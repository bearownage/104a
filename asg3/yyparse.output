Nonterminals useless in grammar

   hfunc
   identList


Terminals unused in grammar

   TOK_CHAR
   TOK_BR
   TOK_NOT
   TOK_ROOT
   TOK_BLOCK
   TOK_CALL
   TOK_IFELSE
   TOK_INITDECL
   TOK_NEWARRAY
   TOK_TYPEID
   TOK_FIELD
   TOK_NEWSTR
   TOK_FUNCTION
   TOK_PROTOTYPE
   TOK_DECLID


Rules useless in grammar

   86 hfunc: hfunc ')'
   87      | hfunc param
   88      | identdec

   89 identList: identList ',' identdec
   90          | identdec


Rules useless in parser due to conflicts

   57 unop: %empty


State 2 conflicts: 3 shift/reduce, 15 reduce/reduce
State 10 conflicts: 3 shift/reduce, 15 reduce/reduce
State 18 conflicts: 9 shift/reduce, 25 reduce/reduce
State 19 conflicts: 9 shift/reduce, 25 reduce/reduce
State 20 conflicts: 2 shift/reduce, 15 reduce/reduce
State 21 conflicts: 3 shift/reduce, 15 reduce/reduce
State 36 conflicts: 3 shift/reduce, 15 reduce/reduce
State 40 conflicts: 11 shift/reduce, 23 reduce/reduce
State 45 conflicts: 2 shift/reduce, 15 reduce/reduce
State 46 conflicts: 2 shift/reduce, 15 reduce/reduce
State 52 conflicts: 1 reduce/reduce
State 56 conflicts: 2 shift/reduce
State 57 conflicts: 2 shift/reduce
State 66 conflicts: 17 shift/reduce, 15 reduce/reduce
State 69 conflicts: 3 shift/reduce, 15 reduce/reduce
State 74 conflicts: 9 shift/reduce, 25 reduce/reduce
State 75 conflicts: 9 shift/reduce, 25 reduce/reduce
State 76 conflicts: 9 shift/reduce, 25 reduce/reduce
State 77 conflicts: 9 shift/reduce, 25 reduce/reduce
State 78 conflicts: 9 shift/reduce, 25 reduce/reduce
State 79 conflicts: 9 shift/reduce, 25 reduce/reduce
State 80 conflicts: 9 shift/reduce, 25 reduce/reduce
State 81 conflicts: 9 shift/reduce, 25 reduce/reduce
State 82 conflicts: 9 shift/reduce, 25 reduce/reduce
State 83 conflicts: 9 shift/reduce, 25 reduce/reduce
State 84 conflicts: 9 shift/reduce, 25 reduce/reduce
State 86 conflicts: 9 shift/reduce, 25 reduce/reduce
State 87 conflicts: 2 shift/reduce, 15 reduce/reduce
State 92 conflicts: 14 shift/reduce
State 97 conflicts: 2 shift/reduce, 15 reduce/reduce
State 98 conflicts: 2 shift/reduce, 15 reduce/reduce
State 114 conflicts: 2 shift/reduce
State 115 conflicts: 2 shift/reduce
State 116 conflicts: 2 shift/reduce
State 117 conflicts: 2 shift/reduce
State 118 conflicts: 2 shift/reduce
State 119 conflicts: 2 shift/reduce
State 120 conflicts: 2 shift/reduce
State 121 conflicts: 2 shift/reduce
State 122 conflicts: 2 shift/reduce
State 123 conflicts: 2 shift/reduce
State 124 conflicts: 2 shift/reduce
State 125 conflicts: 14 shift/reduce
State 127 conflicts: 3 shift/reduce, 15 reduce/reduce
State 128 conflicts: 3 shift/reduce, 15 reduce/reduce
State 132 conflicts: 2 shift/reduce, 15 reduce/reduce
State 142 conflicts: 3 shift/reduce, 15 reduce/reduce


Grammar

    0 $accept: start $end

    1 start: program

    2 program: program structdef
    3        | program globaldecl
    4        | program function
    5        | program statement
    6        | program error '{'
    7        | program error ';'
    8        | %empty

    9 structdef: struc '}'

   10 struc: struc fielddecl ';'
   11      | TOK_STRUCT TOK_IDENT '{'

   12 fielddecl: basetype TOK_IDENT
   13          | basetype TOK_ARRAY TOK_IDENT

   14 globaldecl: identdec TOK_VARDECL constant ';'

   15 function: func fnbody '}'
   16         | func ';'

   17 func: func ')'
   18     | func param
   19     | identdec

   20 param: param ',' identdec
   21      | TOK_PARAM identdec
   22      | TOK_PARAM

   23 identdec: basetype TOK_ARRAY TOK_IDENT
   24         | basetype TOK_IDENT

   25 fnbody: fnbody statement
   26       | fnbody localdecl
   27       | '{' statement
   28       | '{' localdecl
   29       | '{'

   30 basetype: TOK_VOID
   31         | TOK_INT
   32         | TOK_STRING
   33         | TOK_IDENT

   34 localdecl: identdec TOK_VARDECL expr ';'

   35 ifelse: TOK_IF TOK_PARAM expr ')' statement TOK_ELSE statement
   36       | TOK_IF TOK_PARAM expr ')' statement TOK_IF

   37 expr: TOK_NEW allocation
   38     | binop
   39     | unop
   40     | call
   41     | '(' expr ')'
   42     | variable
   43     | constant

   44 binop: %empty
   45      | expr '=' expr
   46      | expr '+' expr
   47      | expr '-' expr
   48      | expr '*' expr
   49      | expr '/' expr
   50      | expr '%' expr
   51      | expr TOK_EQ expr
   52      | expr TOK_NE expr
   53      | expr TOK_LT expr
   54      | expr TOK_LE expr
   55      | expr TOK_GT expr
   56      | expr TOK_GE expr

   57 unop: %empty
   58     | '+' expr
   59     | '-' expr

   60 statement: block
   61          | while
   62          | ifelse
   63          | return
   64          | expr ';'
   65          | ';'

   66 block: blockHelp '}'

   67 blockHelp: blockHelp statement
   68          | '{' statement

   69 while: TOK_WHILE TOK_PARAM expr ')' statement

   70 return: TOK_RETURN ';'
   71       | TOK_RETURN expr ';'

   72 allocation: TOK_IDENT
   73           | TOK_STRING TOK_PARAM expr ')'
   74           | basetype '[' expr ']'

   75 call: funCall ')'

   76 funCall: funCall ','
   77        | funCall expr
   78        | TOK_IDENT TOK_PARAM

   79 variable: TOK_IDENT
   80         | expr '[' expr ']'
   81         | expr TOK_ARROW TOK_IDENT

   82 constant: TOK_INTCON
   83         | TOK_STRINGCON
   84         | TOK_CHARCON
   85         | TOK_NULL


Terminals, with rules where they appear

$end (0) 0
'%' (37) 50
'(' (40) 41
')' (41) 17 35 36 41 69 73 75
'*' (42) 48
'+' (43) 46 58
',' (44) 20 76
'-' (45) 47 59
'/' (47) 49
';' (59) 7 10 14 16 34 64 65 70 71
'=' (61) 45
'[' (91) 74 80
']' (93) 74 80
'{' (123) 6 11 27 28 29 68
'}' (125) 9 15 66
error (256) 6 7
TOK_VOID (258) 30
TOK_CHAR (259)
TOK_INT (260) 31
TOK_STRING (261) 32 73
TOK_IF (262) 35 36
TOK_ELSE (263) 35
TOK_WHILE (264) 69
TOK_RETURN (265) 70 71
TOK_STRUCT (266) 11
TOK_NULL (267) 85
TOK_NEW (268) 37
TOK_VARDECL (269) 14 34
TOK_ARRAY (270) 13 23
TOK_ARROW (271) 81
TOK_BR (272)
TOK_EQ (273) 51
TOK_NE (274) 52
TOK_LT (275) 53
TOK_LE (276) 54
TOK_GT (277) 55
TOK_GE (278) 56
TOK_NOT (279)
TOK_IDENT (280) 11 12 13 23 24 33 72 78 79 81
TOK_INTCON (281) 82
TOK_CHARCON (282) 84
TOK_STRINGCON (283) 83
TOK_ROOT (284)
TOK_BLOCK (285)
TOK_CALL (286)
TOK_IFELSE (287)
TOK_INITDECL (288)
TOK_POS (289)
TOK_NEG (290)
TOK_NEWARRAY (291)
TOK_TYPEID (292)
TOK_FIELD (293)
TOK_NEWSTR (294)
TOK_PARAM (295) 21 22 35 36 69 73 78
TOK_FUNCTION (296)
TOK_PROTOTYPE (297)
TOK_DECLID (298)


Nonterminals, with rules where they appear

$accept (58)
    on left: 0
start (59)
    on left: 1, on right: 0
program (60)
    on left: 2 3 4 5 6 7 8, on right: 1 2 3 4 5 6 7
structdef (61)
    on left: 9, on right: 2
struc (62)
    on left: 10 11, on right: 9 10
fielddecl (63)
    on left: 12 13, on right: 10
globaldecl (64)
    on left: 14, on right: 3
function (65)
    on left: 15 16, on right: 4
func (66)
    on left: 17 18 19, on right: 15 16 17 18
param (67)
    on left: 20 21 22, on right: 18 20
identdec (68)
    on left: 23 24, on right: 14 19 20 21 34
fnbody (69)
    on left: 25 26 27 28 29, on right: 15 25 26
basetype (70)
    on left: 30 31 32 33, on right: 12 13 23 24 74
localdecl (71)
    on left: 34, on right: 26 28
ifelse (72)
    on left: 35 36, on right: 62
expr (73)
    on left: 37 38 39 40 41 42 43, on right: 34 35 36 41 45 46 47 48
    49 50 51 52 53 54 55 56 58 59 64 69 71 73 74 77 80 81
binop (74)
    on left: 44 45 46 47 48 49 50 51 52 53 54 55 56, on right: 38
unop (75)
    on left: 57 58 59, on right: 39
statement (76)
    on left: 60 61 62 63 64 65, on right: 5 25 27 35 36 67 68 69
block (77)
    on left: 66, on right: 60
blockHelp (78)
    on left: 67 68, on right: 66 67
while (79)
    on left: 69, on right: 61
return (80)
    on left: 70 71, on right: 63
allocation (81)
    on left: 72 73 74, on right: 37
call (82)
    on left: 75, on right: 40
funCall (83)
    on left: 76 77 78, on right: 75 76 77
variable (84)
    on left: 79 80 81, on right: 42
constant (85)
    on left: 82 83 84 85, on right: 14 43


State 0

    0 $accept: . start $end

    $default  reduce using rule 8 (program)

    start    go to state 1
    program  go to state 2


State 1

    0 $accept: start . $end

    $end  shift, and go to state 3


State 2

    1 start: program .
    2 program: program . structdef
    3        | program . globaldecl
    4        | program . function
    5        | program . statement
    6        | program . error '{'
    7        | program . error ';'

    error          shift, and go to state 4
    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_IF         shift, and go to state 8
    TOK_WHILE      shift, and go to state 9
    TOK_RETURN     shift, and go to state 10
    TOK_STRUCT     shift, and go to state 11
    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 14
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '('            shift, and go to state 20
    '{'            shift, and go to state 21
    ';'            shift, and go to state 22

    $end       reduce using rule 1 (start)
    TOK_ARROW  reduce using rule 44 (binop)
    TOK_ARROW  [reduce using rule 57 (unop)]
    TOK_EQ     reduce using rule 44 (binop)
    TOK_EQ     [reduce using rule 57 (unop)]
    TOK_NE     reduce using rule 44 (binop)
    TOK_NE     [reduce using rule 57 (unop)]
    TOK_LT     reduce using rule 44 (binop)
    TOK_LT     [reduce using rule 57 (unop)]
    TOK_LE     reduce using rule 44 (binop)
    TOK_LE     [reduce using rule 57 (unop)]
    TOK_GT     reduce using rule 44 (binop)
    TOK_GT     [reduce using rule 57 (unop)]
    TOK_GE     reduce using rule 44 (binop)
    TOK_GE     [reduce using rule 57 (unop)]
    '+'        [reduce using rule 44 (binop)]
    '+'        [reduce using rule 57 (unop)]
    '-'        [reduce using rule 44 (binop)]
    '-'        [reduce using rule 57 (unop)]
    '*'        reduce using rule 44 (binop)
    '*'        [reduce using rule 57 (unop)]
    '/'        reduce using rule 44 (binop)
    '/'        [reduce using rule 57 (unop)]
    '%'        reduce using rule 44 (binop)
    '%'        [reduce using rule 57 (unop)]
    ';'        [reduce using rule 44 (binop)]
    ';'        [reduce using rule 57 (unop)]
    '='        reduce using rule 44 (binop)
    '='        [reduce using rule 57 (unop)]
    '['        reduce using rule 44 (binop)
    '['        [reduce using rule 57 (unop)]

    structdef   go to state 23
    struc       go to state 24
    globaldecl  go to state 25
    function    go to state 26
    func        go to state 27
    identdec    go to state 28
    basetype    go to state 29
    ifelse      go to state 30
    expr        go to state 31
    binop       go to state 32
    unop        go to state 33
    statement   go to state 34
    block       go to state 35
    blockHelp   go to state 36
    while       go to state 37
    return      go to state 38
    call        go to state 39
    funCall     go to state 40
    variable    go to state 41
    constant    go to state 42


State 3

    0 $accept: start $end .

    $default  accept


State 4

    6 program: program error . '{'
    7        | program error . ';'

    '{'  shift, and go to state 43
    ';'  shift, and go to state 44


State 5

   30 basetype: TOK_VOID .

    $default  reduce using rule 30 (basetype)


State 6

   31 basetype: TOK_INT .

    $default  reduce using rule 31 (basetype)


State 7

   32 basetype: TOK_STRING .

    $default  reduce using rule 32 (basetype)


State 8

   35 ifelse: TOK_IF . TOK_PARAM expr ')' statement TOK_ELSE statement
   36       | TOK_IF . TOK_PARAM expr ')' statement TOK_IF

    TOK_PARAM  shift, and go to state 45


State 9

   69 while: TOK_WHILE . TOK_PARAM expr ')' statement

    TOK_PARAM  shift, and go to state 46


State 10

   70 return: TOK_RETURN . ';'
   71       | TOK_RETURN . expr ';'

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 47
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '('            shift, and go to state 20
    ';'            shift, and go to state 48

    TOK_ARROW  reduce using rule 44 (binop)
    TOK_ARROW  [reduce using rule 57 (unop)]
    TOK_EQ     reduce using rule 44 (binop)
    TOK_EQ     [reduce using rule 57 (unop)]
    TOK_NE     reduce using rule 44 (binop)
    TOK_NE     [reduce using rule 57 (unop)]
    TOK_LT     reduce using rule 44 (binop)
    TOK_LT     [reduce using rule 57 (unop)]
    TOK_LE     reduce using rule 44 (binop)
    TOK_LE     [reduce using rule 57 (unop)]
    TOK_GT     reduce using rule 44 (binop)
    TOK_GT     [reduce using rule 57 (unop)]
    TOK_GE     reduce using rule 44 (binop)
    TOK_GE     [reduce using rule 57 (unop)]
    '+'        [reduce using rule 44 (binop)]
    '+'        [reduce using rule 57 (unop)]
    '-'        [reduce using rule 44 (binop)]
    '-'        [reduce using rule 57 (unop)]
    '*'        reduce using rule 44 (binop)
    '*'        [reduce using rule 57 (unop)]
    '/'        reduce using rule 44 (binop)
    '/'        [reduce using rule 57 (unop)]
    '%'        reduce using rule 44 (binop)
    '%'        [reduce using rule 57 (unop)]
    ';'        [reduce using rule 44 (binop)]
    ';'        [reduce using rule 57 (unop)]
    '='        reduce using rule 44 (binop)
    '='        [reduce using rule 57 (unop)]
    '['        reduce using rule 44 (binop)
    '['        [reduce using rule 57 (unop)]
    $default   reduce using rule 44 (binop)

    expr      go to state 49
    binop     go to state 32
    unop      go to state 33
    call      go to state 39
    funCall   go to state 40
    variable  go to state 41
    constant  go to state 42


State 11

   11 struc: TOK_STRUCT . TOK_IDENT '{'

    TOK_IDENT  shift, and go to state 50


State 12

   85 constant: TOK_NULL .

    $default  reduce using rule 85 (constant)


State 13

   37 expr: TOK_NEW . allocation

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 51
    TOK_IDENT   shift, and go to state 52

    basetype    go to state 53
    allocation  go to state 54


State 14

   33 basetype: TOK_IDENT .
   78 funCall: TOK_IDENT . TOK_PARAM
   79 variable: TOK_IDENT .

    TOK_PARAM  shift, and go to state 55

    TOK_ARRAY  reduce using rule 33 (basetype)
    TOK_IDENT  reduce using rule 33 (basetype)
    $default   reduce using rule 79 (variable)


State 15

   82 constant: TOK_INTCON .

    $default  reduce using rule 82 (constant)


State 16

   84 constant: TOK_CHARCON .

    $default  reduce using rule 84 (constant)


State 17

   83 constant: TOK_STRINGCON .

    $default  reduce using rule 83 (constant)


State 18

   58 unop: '+' . expr

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 47
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '('            shift, and go to state 20

    TOK_NULL       [reduce using rule 44 (binop)]
    TOK_NULL       [reduce using rule 57 (unop)]
    TOK_NEW        [reduce using rule 44 (binop)]
    TOK_NEW        [reduce using rule 57 (unop)]
    TOK_ARROW      reduce using rule 44 (binop)
    TOK_ARROW      [reduce using rule 57 (unop)]
    TOK_EQ         reduce using rule 44 (binop)
    TOK_EQ         [reduce using rule 57 (unop)]
    TOK_NE         reduce using rule 44 (binop)
    TOK_NE         [reduce using rule 57 (unop)]
    TOK_LT         reduce using rule 44 (binop)
    TOK_LT         [reduce using rule 57 (unop)]
    TOK_LE         reduce using rule 44 (binop)
    TOK_LE         [reduce using rule 57 (unop)]
    TOK_GT         reduce using rule 44 (binop)
    TOK_GT         [reduce using rule 57 (unop)]
    TOK_GE         reduce using rule 44 (binop)
    TOK_GE         [reduce using rule 57 (unop)]
    TOK_IDENT      [reduce using rule 44 (binop)]
    TOK_IDENT      [reduce using rule 57 (unop)]
    TOK_INTCON     [reduce using rule 44 (binop)]
    TOK_INTCON     [reduce using rule 57 (unop)]
    TOK_CHARCON    [reduce using rule 44 (binop)]
    TOK_CHARCON    [reduce using rule 57 (unop)]
    TOK_STRINGCON  [reduce using rule 44 (binop)]
    TOK_STRINGCON  [reduce using rule 57 (unop)]
    '+'            [reduce using rule 44 (binop)]
    '+'            [reduce using rule 57 (unop)]
    '-'            [reduce using rule 44 (binop)]
    '-'            [reduce using rule 57 (unop)]
    '*'            reduce using rule 44 (binop)
    '*'            [reduce using rule 57 (unop)]
    '/'            reduce using rule 44 (binop)
    '/'            [reduce using rule 57 (unop)]
    '%'            reduce using rule 44 (binop)
    '%'            [reduce using rule 57 (unop)]
    '('            [reduce using rule 44 (binop)]
    '('            [reduce using rule 57 (unop)]
    ')'            reduce using rule 44 (binop)
    ')'            [reduce using rule 57 (unop)]
    ';'            reduce using rule 44 (binop)
    ';'            [reduce using rule 57 (unop)]
    ','            reduce using rule 44 (binop)
    ','            [reduce using rule 57 (unop)]
    '='            reduce using rule 44 (binop)
    '='            [reduce using rule 57 (unop)]
    '['            reduce using rule 44 (binop)
    '['            [reduce using rule 57 (unop)]
    ']'            reduce using rule 44 (binop)
    ']'            [reduce using rule 57 (unop)]
    $default       reduce using rule 44 (binop)

    expr      go to state 56
    binop     go to state 32
    unop      go to state 33
    call      go to state 39
    funCall   go to state 40
    variable  go to state 41
    constant  go to state 42


State 19

   59 unop: '-' . expr

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 47
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '('            shift, and go to state 20

    TOK_NULL       [reduce using rule 44 (binop)]
    TOK_NULL       [reduce using rule 57 (unop)]
    TOK_NEW        [reduce using rule 44 (binop)]
    TOK_NEW        [reduce using rule 57 (unop)]
    TOK_ARROW      reduce using rule 44 (binop)
    TOK_ARROW      [reduce using rule 57 (unop)]
    TOK_EQ         reduce using rule 44 (binop)
    TOK_EQ         [reduce using rule 57 (unop)]
    TOK_NE         reduce using rule 44 (binop)
    TOK_NE         [reduce using rule 57 (unop)]
    TOK_LT         reduce using rule 44 (binop)
    TOK_LT         [reduce using rule 57 (unop)]
    TOK_LE         reduce using rule 44 (binop)
    TOK_LE         [reduce using rule 57 (unop)]
    TOK_GT         reduce using rule 44 (binop)
    TOK_GT         [reduce using rule 57 (unop)]
    TOK_GE         reduce using rule 44 (binop)
    TOK_GE         [reduce using rule 57 (unop)]
    TOK_IDENT      [reduce using rule 44 (binop)]
    TOK_IDENT      [reduce using rule 57 (unop)]
    TOK_INTCON     [reduce using rule 44 (binop)]
    TOK_INTCON     [reduce using rule 57 (unop)]
    TOK_CHARCON    [reduce using rule 44 (binop)]
    TOK_CHARCON    [reduce using rule 57 (unop)]
    TOK_STRINGCON  [reduce using rule 44 (binop)]
    TOK_STRINGCON  [reduce using rule 57 (unop)]
    '+'            [reduce using rule 44 (binop)]
    '+'            [reduce using rule 57 (unop)]
    '-'            [reduce using rule 44 (binop)]
    '-'            [reduce using rule 57 (unop)]
    '*'            reduce using rule 44 (binop)
    '*'            [reduce using rule 57 (unop)]
    '/'            reduce using rule 44 (binop)
    '/'            [reduce using rule 57 (unop)]
    '%'            reduce using rule 44 (binop)
    '%'            [reduce using rule 57 (unop)]
    '('            [reduce using rule 44 (binop)]
    '('            [reduce using rule 57 (unop)]
    ')'            reduce using rule 44 (binop)
    ')'            [reduce using rule 57 (unop)]
    ';'            reduce using rule 44 (binop)
    ';'            [reduce using rule 57 (unop)]
    ','            reduce using rule 44 (binop)
    ','            [reduce using rule 57 (unop)]
    '='            reduce using rule 44 (binop)
    '='            [reduce using rule 57 (unop)]
    '['            reduce using rule 44 (binop)
    '['            [reduce using rule 57 (unop)]
    ']'            reduce using rule 44 (binop)
    ']'            [reduce using rule 57 (unop)]
    $default       reduce using rule 44 (binop)

    expr      go to state 57
    binop     go to state 32
    unop      go to state 33
    call      go to state 39
    funCall   go to state 40
    variable  go to state 41
    constant  go to state 42


State 20

   41 expr: '(' . expr ')'

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 47
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '('            shift, and go to state 20

    TOK_ARROW  reduce using rule 44 (binop)
    TOK_ARROW  [reduce using rule 57 (unop)]
    TOK_EQ     reduce using rule 44 (binop)
    TOK_EQ     [reduce using rule 57 (unop)]
    TOK_NE     reduce using rule 44 (binop)
    TOK_NE     [reduce using rule 57 (unop)]
    TOK_LT     reduce using rule 44 (binop)
    TOK_LT     [reduce using rule 57 (unop)]
    TOK_LE     reduce using rule 44 (binop)
    TOK_LE     [reduce using rule 57 (unop)]
    TOK_GT     reduce using rule 44 (binop)
    TOK_GT     [reduce using rule 57 (unop)]
    TOK_GE     reduce using rule 44 (binop)
    TOK_GE     [reduce using rule 57 (unop)]
    '+'        [reduce using rule 44 (binop)]
    '+'        [reduce using rule 57 (unop)]
    '-'        [reduce using rule 44 (binop)]
    '-'        [reduce using rule 57 (unop)]
    '*'        reduce using rule 44 (binop)
    '*'        [reduce using rule 57 (unop)]
    '/'        reduce using rule 44 (binop)
    '/'        [reduce using rule 57 (unop)]
    '%'        reduce using rule 44 (binop)
    '%'        [reduce using rule 57 (unop)]
    ')'        reduce using rule 44 (binop)
    ')'        [reduce using rule 57 (unop)]
    '='        reduce using rule 44 (binop)
    '='        [reduce using rule 57 (unop)]
    '['        reduce using rule 44 (binop)
    '['        [reduce using rule 57 (unop)]
    $default   reduce using rule 44 (binop)

    expr      go to state 58
    binop     go to state 32
    unop      go to state 33
    call      go to state 39
    funCall   go to state 40
    variable  go to state 41
    constant  go to state 42


State 21

   68 blockHelp: '{' . statement

    TOK_IF         shift, and go to state 8
    TOK_WHILE      shift, and go to state 9
    TOK_RETURN     shift, and go to state 10
    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 47
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '('            shift, and go to state 20
    '{'            shift, and go to state 21
    ';'            shift, and go to state 22

    TOK_ARROW  reduce using rule 44 (binop)
    TOK_ARROW  [reduce using rule 57 (unop)]
    TOK_EQ     reduce using rule 44 (binop)
    TOK_EQ     [reduce using rule 57 (unop)]
    TOK_NE     reduce using rule 44 (binop)
    TOK_NE     [reduce using rule 57 (unop)]
    TOK_LT     reduce using rule 44 (binop)
    TOK_LT     [reduce using rule 57 (unop)]
    TOK_LE     reduce using rule 44 (binop)
    TOK_LE     [reduce using rule 57 (unop)]
    TOK_GT     reduce using rule 44 (binop)
    TOK_GT     [reduce using rule 57 (unop)]
    TOK_GE     reduce using rule 44 (binop)
    TOK_GE     [reduce using rule 57 (unop)]
    '+'        [reduce using rule 44 (binop)]
    '+'        [reduce using rule 57 (unop)]
    '-'        [reduce using rule 44 (binop)]
    '-'        [reduce using rule 57 (unop)]
    '*'        reduce using rule 44 (binop)
    '*'        [reduce using rule 57 (unop)]
    '/'        reduce using rule 44 (binop)
    '/'        [reduce using rule 57 (unop)]
    '%'        reduce using rule 44 (binop)
    '%'        [reduce using rule 57 (unop)]
    ';'        [reduce using rule 44 (binop)]
    ';'        [reduce using rule 57 (unop)]
    '='        reduce using rule 44 (binop)
    '='        [reduce using rule 57 (unop)]
    '['        reduce using rule 44 (binop)
    '['        [reduce using rule 57 (unop)]
    $default   reduce using rule 44 (binop)

    ifelse     go to state 30
    expr       go to state 31
    binop      go to state 32
    unop       go to state 33
    statement  go to state 59
    block      go to state 35
    blockHelp  go to state 36
    while      go to state 37
    return     go to state 38
    call       go to state 39
    funCall    go to state 40
    variable   go to state 41
    constant   go to state 42


State 22

   65 statement: ';' .

    $default  reduce using rule 65 (statement)


State 23

    2 program: program structdef .

    $default  reduce using rule 2 (program)


State 24

    9 structdef: struc . '}'
   10 struc: struc . fielddecl ';'

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_IDENT   shift, and go to state 60
    '}'         shift, and go to state 61

    fielddecl  go to state 62
    basetype   go to state 63


State 25

    3 program: program globaldecl .

    $default  reduce using rule 3 (program)


State 26

    4 program: program function .

    $default  reduce using rule 4 (program)


State 27

   15 function: func . fnbody '}'
   16         | func . ';'
   17 func: func . ')'
   18     | func . param

    TOK_PARAM  shift, and go to state 64
    ')'        shift, and go to state 65
    '{'        shift, and go to state 66
    ';'        shift, and go to state 67

    param   go to state 68
    fnbody  go to state 69


State 28

   14 globaldecl: identdec . TOK_VARDECL constant ';'
   19 func: identdec .

    TOK_VARDECL  shift, and go to state 70

    $default  reduce using rule 19 (func)


State 29

   23 identdec: basetype . TOK_ARRAY TOK_IDENT
   24         | basetype . TOK_IDENT

    TOK_ARRAY  shift, and go to state 71
    TOK_IDENT  shift, and go to state 72


State 30

   62 statement: ifelse .

    $default  reduce using rule 62 (statement)


State 31

   45 binop: expr . '=' expr
   46      | expr . '+' expr
   47      | expr . '-' expr
   48      | expr . '*' expr
   49      | expr . '/' expr
   50      | expr . '%' expr
   51      | expr . TOK_EQ expr
   52      | expr . TOK_NE expr
   53      | expr . TOK_LT expr
   54      | expr . TOK_LE expr
   55      | expr . TOK_GT expr
   56      | expr . TOK_GE expr
   64 statement: expr . ';'
   80 variable: expr . '[' expr ']'
   81         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 73
    TOK_EQ     shift, and go to state 74
    TOK_NE     shift, and go to state 75
    TOK_LT     shift, and go to state 76
    TOK_LE     shift, and go to state 77
    TOK_GT     shift, and go to state 78
    TOK_GE     shift, and go to state 79
    '+'        shift, and go to state 80
    '-'        shift, and go to state 81
    '*'        shift, and go to state 82
    '/'        shift, and go to state 83
    '%'        shift, and go to state 84
    ';'        shift, and go to state 85
    '='        shift, and go to state 86
    '['        shift, and go to state 87


State 32

   38 expr: binop .

    $default  reduce using rule 38 (expr)


State 33

   39 expr: unop .

    $default  reduce using rule 39 (expr)


State 34

    5 program: program statement .

    $default  reduce using rule 5 (program)


State 35

   60 statement: block .

    $default  reduce using rule 60 (statement)


State 36

   66 block: blockHelp . '}'
   67 blockHelp: blockHelp . statement

    TOK_IF         shift, and go to state 8
    TOK_WHILE      shift, and go to state 9
    TOK_RETURN     shift, and go to state 10
    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 47
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '('            shift, and go to state 20
    '{'            shift, and go to state 21
    ';'            shift, and go to state 22
    '}'            shift, and go to state 88

    TOK_ARROW  reduce using rule 44 (binop)
    TOK_ARROW  [reduce using rule 57 (unop)]
    TOK_EQ     reduce using rule 44 (binop)
    TOK_EQ     [reduce using rule 57 (unop)]
    TOK_NE     reduce using rule 44 (binop)
    TOK_NE     [reduce using rule 57 (unop)]
    TOK_LT     reduce using rule 44 (binop)
    TOK_LT     [reduce using rule 57 (unop)]
    TOK_LE     reduce using rule 44 (binop)
    TOK_LE     [reduce using rule 57 (unop)]
    TOK_GT     reduce using rule 44 (binop)
    TOK_GT     [reduce using rule 57 (unop)]
    TOK_GE     reduce using rule 44 (binop)
    TOK_GE     [reduce using rule 57 (unop)]
    '+'        [reduce using rule 44 (binop)]
    '+'        [reduce using rule 57 (unop)]
    '-'        [reduce using rule 44 (binop)]
    '-'        [reduce using rule 57 (unop)]
    '*'        reduce using rule 44 (binop)
    '*'        [reduce using rule 57 (unop)]
    '/'        reduce using rule 44 (binop)
    '/'        [reduce using rule 57 (unop)]
    '%'        reduce using rule 44 (binop)
    '%'        [reduce using rule 57 (unop)]
    ';'        [reduce using rule 44 (binop)]
    ';'        [reduce using rule 57 (unop)]
    '='        reduce using rule 44 (binop)
    '='        [reduce using rule 57 (unop)]
    '['        reduce using rule 44 (binop)
    '['        [reduce using rule 57 (unop)]
    $default   reduce using rule 44 (binop)

    ifelse     go to state 30
    expr       go to state 31
    binop      go to state 32
    unop       go to state 33
    statement  go to state 89
    block      go to state 35
    blockHelp  go to state 36
    while      go to state 37
    return     go to state 38
    call       go to state 39
    funCall    go to state 40
    variable   go to state 41
    constant   go to state 42


State 37

   61 statement: while .

    $default  reduce using rule 61 (statement)


State 38

   63 statement: return .

    $default  reduce using rule 63 (statement)


State 39

   40 expr: call .

    $default  reduce using rule 40 (expr)


State 40

   75 call: funCall . ')'
   76 funCall: funCall . ','
   77        | funCall . expr

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 47
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '('            shift, and go to state 20
    ')'            shift, and go to state 90
    ','            shift, and go to state 91

    TOK_NULL       [reduce using rule 44 (binop)]
    TOK_NULL       [reduce using rule 57 (unop)]
    TOK_NEW        [reduce using rule 44 (binop)]
    TOK_NEW        [reduce using rule 57 (unop)]
    TOK_ARROW      reduce using rule 44 (binop)
    TOK_ARROW      [reduce using rule 57 (unop)]
    TOK_EQ         reduce using rule 44 (binop)
    TOK_EQ         [reduce using rule 57 (unop)]
    TOK_NE         reduce using rule 44 (binop)
    TOK_NE         [reduce using rule 57 (unop)]
    TOK_LT         reduce using rule 44 (binop)
    TOK_LT         [reduce using rule 57 (unop)]
    TOK_LE         reduce using rule 44 (binop)
    TOK_LE         [reduce using rule 57 (unop)]
    TOK_GT         reduce using rule 44 (binop)
    TOK_GT         [reduce using rule 57 (unop)]
    TOK_GE         reduce using rule 44 (binop)
    TOK_GE         [reduce using rule 57 (unop)]
    TOK_IDENT      [reduce using rule 44 (binop)]
    TOK_IDENT      [reduce using rule 57 (unop)]
    TOK_INTCON     [reduce using rule 44 (binop)]
    TOK_INTCON     [reduce using rule 57 (unop)]
    TOK_CHARCON    [reduce using rule 44 (binop)]
    TOK_CHARCON    [reduce using rule 57 (unop)]
    TOK_STRINGCON  [reduce using rule 44 (binop)]
    TOK_STRINGCON  [reduce using rule 57 (unop)]
    '+'            [reduce using rule 44 (binop)]
    '+'            [reduce using rule 57 (unop)]
    '-'            [reduce using rule 44 (binop)]
    '-'            [reduce using rule 57 (unop)]
    '*'            reduce using rule 44 (binop)
    '*'            [reduce using rule 57 (unop)]
    '/'            reduce using rule 44 (binop)
    '/'            [reduce using rule 57 (unop)]
    '%'            reduce using rule 44 (binop)
    '%'            [reduce using rule 57 (unop)]
    '('            [reduce using rule 44 (binop)]
    '('            [reduce using rule 57 (unop)]
    ')'            [reduce using rule 44 (binop)]
    ')'            [reduce using rule 57 (unop)]
    ','            [reduce using rule 44 (binop)]
    ','            [reduce using rule 57 (unop)]
    '='            reduce using rule 44 (binop)
    '='            [reduce using rule 57 (unop)]
    '['            reduce using rule 44 (binop)
    '['            [reduce using rule 57 (unop)]
    $default       reduce using rule 44 (binop)

    expr      go to state 92
    binop     go to state 32
    unop      go to state 33
    call      go to state 39
    funCall   go to state 40
    variable  go to state 41
    constant  go to state 42


State 41

   42 expr: variable .

    $default  reduce using rule 42 (expr)


State 42

   43 expr: constant .

    $default  reduce using rule 43 (expr)


State 43

    6 program: program error '{' .

    $default  reduce using rule 6 (program)


State 44

    7 program: program error ';' .

    $default  reduce using rule 7 (program)


State 45

   35 ifelse: TOK_IF TOK_PARAM . expr ')' statement TOK_ELSE statement
   36       | TOK_IF TOK_PARAM . expr ')' statement TOK_IF

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 47
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '('            shift, and go to state 20

    TOK_ARROW  reduce using rule 44 (binop)
    TOK_ARROW  [reduce using rule 57 (unop)]
    TOK_EQ     reduce using rule 44 (binop)
    TOK_EQ     [reduce using rule 57 (unop)]
    TOK_NE     reduce using rule 44 (binop)
    TOK_NE     [reduce using rule 57 (unop)]
    TOK_LT     reduce using rule 44 (binop)
    TOK_LT     [reduce using rule 57 (unop)]
    TOK_LE     reduce using rule 44 (binop)
    TOK_LE     [reduce using rule 57 (unop)]
    TOK_GT     reduce using rule 44 (binop)
    TOK_GT     [reduce using rule 57 (unop)]
    TOK_GE     reduce using rule 44 (binop)
    TOK_GE     [reduce using rule 57 (unop)]
    '+'        [reduce using rule 44 (binop)]
    '+'        [reduce using rule 57 (unop)]
    '-'        [reduce using rule 44 (binop)]
    '-'        [reduce using rule 57 (unop)]
    '*'        reduce using rule 44 (binop)
    '*'        [reduce using rule 57 (unop)]
    '/'        reduce using rule 44 (binop)
    '/'        [reduce using rule 57 (unop)]
    '%'        reduce using rule 44 (binop)
    '%'        [reduce using rule 57 (unop)]
    ')'        reduce using rule 44 (binop)
    ')'        [reduce using rule 57 (unop)]
    '='        reduce using rule 44 (binop)
    '='        [reduce using rule 57 (unop)]
    '['        reduce using rule 44 (binop)
    '['        [reduce using rule 57 (unop)]
    $default   reduce using rule 44 (binop)

    expr      go to state 93
    binop     go to state 32
    unop      go to state 33
    call      go to state 39
    funCall   go to state 40
    variable  go to state 41
    constant  go to state 42


State 46

   69 while: TOK_WHILE TOK_PARAM . expr ')' statement

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 47
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '('            shift, and go to state 20

    TOK_ARROW  reduce using rule 44 (binop)
    TOK_ARROW  [reduce using rule 57 (unop)]
    TOK_EQ     reduce using rule 44 (binop)
    TOK_EQ     [reduce using rule 57 (unop)]
    TOK_NE     reduce using rule 44 (binop)
    TOK_NE     [reduce using rule 57 (unop)]
    TOK_LT     reduce using rule 44 (binop)
    TOK_LT     [reduce using rule 57 (unop)]
    TOK_LE     reduce using rule 44 (binop)
    TOK_LE     [reduce using rule 57 (unop)]
    TOK_GT     reduce using rule 44 (binop)
    TOK_GT     [reduce using rule 57 (unop)]
    TOK_GE     reduce using rule 44 (binop)
    TOK_GE     [reduce using rule 57 (unop)]
    '+'        [reduce using rule 44 (binop)]
    '+'        [reduce using rule 57 (unop)]
    '-'        [reduce using rule 44 (binop)]
    '-'        [reduce using rule 57 (unop)]
    '*'        reduce using rule 44 (binop)
    '*'        [reduce using rule 57 (unop)]
    '/'        reduce using rule 44 (binop)
    '/'        [reduce using rule 57 (unop)]
    '%'        reduce using rule 44 (binop)
    '%'        [reduce using rule 57 (unop)]
    ')'        reduce using rule 44 (binop)
    ')'        [reduce using rule 57 (unop)]
    '='        reduce using rule 44 (binop)
    '='        [reduce using rule 57 (unop)]
    '['        reduce using rule 44 (binop)
    '['        [reduce using rule 57 (unop)]
    $default   reduce using rule 44 (binop)

    expr      go to state 94
    binop     go to state 32
    unop      go to state 33
    call      go to state 39
    funCall   go to state 40
    variable  go to state 41
    constant  go to state 42


State 47

   78 funCall: TOK_IDENT . TOK_PARAM
   79 variable: TOK_IDENT .

    TOK_PARAM  shift, and go to state 55

    $default  reduce using rule 79 (variable)


State 48

   70 return: TOK_RETURN ';' .

    $default  reduce using rule 70 (return)


State 49

   45 binop: expr . '=' expr
   46      | expr . '+' expr
   47      | expr . '-' expr
   48      | expr . '*' expr
   49      | expr . '/' expr
   50      | expr . '%' expr
   51      | expr . TOK_EQ expr
   52      | expr . TOK_NE expr
   53      | expr . TOK_LT expr
   54      | expr . TOK_LE expr
   55      | expr . TOK_GT expr
   56      | expr . TOK_GE expr
   71 return: TOK_RETURN expr . ';'
   80 variable: expr . '[' expr ']'
   81         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 73
    TOK_EQ     shift, and go to state 74
    TOK_NE     shift, and go to state 75
    TOK_LT     shift, and go to state 76
    TOK_LE     shift, and go to state 77
    TOK_GT     shift, and go to state 78
    TOK_GE     shift, and go to state 79
    '+'        shift, and go to state 80
    '-'        shift, and go to state 81
    '*'        shift, and go to state 82
    '/'        shift, and go to state 83
    '%'        shift, and go to state 84
    ';'        shift, and go to state 95
    '='        shift, and go to state 86
    '['        shift, and go to state 87


State 50

   11 struc: TOK_STRUCT TOK_IDENT . '{'

    '{'  shift, and go to state 96


State 51

   32 basetype: TOK_STRING .
   73 allocation: TOK_STRING . TOK_PARAM expr ')'

    TOK_PARAM  shift, and go to state 97

    $default  reduce using rule 32 (basetype)


State 52

   33 basetype: TOK_IDENT .
   72 allocation: TOK_IDENT .

    '['       reduce using rule 33 (basetype)
    '['       [reduce using rule 72 (allocation)]
    $default  reduce using rule 72 (allocation)


State 53

   74 allocation: basetype . '[' expr ']'

    '['  shift, and go to state 98


State 54

   37 expr: TOK_NEW allocation .

    $default  reduce using rule 37 (expr)


State 55

   78 funCall: TOK_IDENT TOK_PARAM .

    $default  reduce using rule 78 (funCall)


State 56

   45 binop: expr . '=' expr
   46      | expr . '+' expr
   47      | expr . '-' expr
   48      | expr . '*' expr
   49      | expr . '/' expr
   50      | expr . '%' expr
   51      | expr . TOK_EQ expr
   52      | expr . TOK_NE expr
   53      | expr . TOK_LT expr
   54      | expr . TOK_LE expr
   55      | expr . TOK_GT expr
   56      | expr . TOK_GE expr
   58 unop: '+' expr .
   80 variable: expr . '[' expr ']'
   81         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 73
    '='        shift, and go to state 86
    '['        shift, and go to state 87

    '='       [reduce using rule 58 (unop)]
    '['       [reduce using rule 58 (unop)]
    $default  reduce using rule 58 (unop)


State 57

   45 binop: expr . '=' expr
   46      | expr . '+' expr
   47      | expr . '-' expr
   48      | expr . '*' expr
   49      | expr . '/' expr
   50      | expr . '%' expr
   51      | expr . TOK_EQ expr
   52      | expr . TOK_NE expr
   53      | expr . TOK_LT expr
   54      | expr . TOK_LE expr
   55      | expr . TOK_GT expr
   56      | expr . TOK_GE expr
   59 unop: '-' expr .
   80 variable: expr . '[' expr ']'
   81         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 73
    '='        shift, and go to state 86
    '['        shift, and go to state 87

    '='       [reduce using rule 59 (unop)]
    '['       [reduce using rule 59 (unop)]
    $default  reduce using rule 59 (unop)


State 58

   41 expr: '(' expr . ')'
   45 binop: expr . '=' expr
   46      | expr . '+' expr
   47      | expr . '-' expr
   48      | expr . '*' expr
   49      | expr . '/' expr
   50      | expr . '%' expr
   51      | expr . TOK_EQ expr
   52      | expr . TOK_NE expr
   53      | expr . TOK_LT expr
   54      | expr . TOK_LE expr
   55      | expr . TOK_GT expr
   56      | expr . TOK_GE expr
   80 variable: expr . '[' expr ']'
   81         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 73
    TOK_EQ     shift, and go to state 74
    TOK_NE     shift, and go to state 75
    TOK_LT     shift, and go to state 76
    TOK_LE     shift, and go to state 77
    TOK_GT     shift, and go to state 78
    TOK_GE     shift, and go to state 79
    '+'        shift, and go to state 80
    '-'        shift, and go to state 81
    '*'        shift, and go to state 82
    '/'        shift, and go to state 83
    '%'        shift, and go to state 84
    ')'        shift, and go to state 99
    '='        shift, and go to state 86
    '['        shift, and go to state 87


State 59

   68 blockHelp: '{' statement .

    $default  reduce using rule 68 (blockHelp)


State 60

   33 basetype: TOK_IDENT .

    $default  reduce using rule 33 (basetype)


State 61

    9 structdef: struc '}' .

    $default  reduce using rule 9 (structdef)


State 62

   10 struc: struc fielddecl . ';'

    ';'  shift, and go to state 100


State 63

   12 fielddecl: basetype . TOK_IDENT
   13          | basetype . TOK_ARRAY TOK_IDENT

    TOK_ARRAY  shift, and go to state 101
    TOK_IDENT  shift, and go to state 102


State 64

   21 param: TOK_PARAM . identdec
   22      | TOK_PARAM .

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_IDENT   shift, and go to state 60

    $default  reduce using rule 22 (param)

    identdec  go to state 103
    basetype  go to state 29


State 65

   17 func: func ')' .

    $default  reduce using rule 17 (func)


State 66

   27 fnbody: '{' . statement
   28       | '{' . localdecl
   29       | '{' .

    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_IF         shift, and go to state 8
    TOK_WHILE      shift, and go to state 9
    TOK_RETURN     shift, and go to state 10
    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 14
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '('            shift, and go to state 20
    '{'            shift, and go to state 21
    ';'            shift, and go to state 22

    TOK_VOID       [reduce using rule 29 (fnbody)]
    TOK_INT        [reduce using rule 29 (fnbody)]
    TOK_STRING     [reduce using rule 29 (fnbody)]
    TOK_IF         [reduce using rule 29 (fnbody)]
    TOK_WHILE      [reduce using rule 29 (fnbody)]
    TOK_RETURN     [reduce using rule 29 (fnbody)]
    TOK_NULL       [reduce using rule 29 (fnbody)]
    TOK_NEW        [reduce using rule 29 (fnbody)]
    TOK_ARROW      reduce using rule 29 (fnbody)
    TOK_ARROW      [reduce using rule 44 (binop)]
    TOK_ARROW      [reduce using rule 57 (unop)]
    TOK_EQ         reduce using rule 29 (fnbody)
    TOK_EQ         [reduce using rule 44 (binop)]
    TOK_EQ         [reduce using rule 57 (unop)]
    TOK_NE         reduce using rule 29 (fnbody)
    TOK_NE         [reduce using rule 44 (binop)]
    TOK_NE         [reduce using rule 57 (unop)]
    TOK_LT         reduce using rule 29 (fnbody)
    TOK_LT         [reduce using rule 44 (binop)]
    TOK_LT         [reduce using rule 57 (unop)]
    TOK_LE         reduce using rule 29 (fnbody)
    TOK_LE         [reduce using rule 44 (binop)]
    TOK_LE         [reduce using rule 57 (unop)]
    TOK_GT         reduce using rule 29 (fnbody)
    TOK_GT         [reduce using rule 44 (binop)]
    TOK_GT         [reduce using rule 57 (unop)]
    TOK_GE         reduce using rule 29 (fnbody)
    TOK_GE         [reduce using rule 44 (binop)]
    TOK_GE         [reduce using rule 57 (unop)]
    TOK_IDENT      [reduce using rule 29 (fnbody)]
    TOK_INTCON     [reduce using rule 29 (fnbody)]
    TOK_CHARCON    [reduce using rule 29 (fnbody)]
    TOK_STRINGCON  [reduce using rule 29 (fnbody)]
    '+'            [reduce using rule 29 (fnbody)]
    '+'            [reduce using rule 44 (binop)]
    '+'            [reduce using rule 57 (unop)]
    '-'            [reduce using rule 29 (fnbody)]
    '-'            [reduce using rule 44 (binop)]
    '-'            [reduce using rule 57 (unop)]
    '*'            reduce using rule 29 (fnbody)
    '*'            [reduce using rule 44 (binop)]
    '*'            [reduce using rule 57 (unop)]
    '/'            reduce using rule 29 (fnbody)
    '/'            [reduce using rule 44 (binop)]
    '/'            [reduce using rule 57 (unop)]
    '%'            reduce using rule 29 (fnbody)
    '%'            [reduce using rule 44 (binop)]
    '%'            [reduce using rule 57 (unop)]
    '('            [reduce using rule 29 (fnbody)]
    '{'            [reduce using rule 29 (fnbody)]
    ';'            [reduce using rule 29 (fnbody)]
    ';'            [reduce using rule 44 (binop)]
    ';'            [reduce using rule 57 (unop)]
    '='            reduce using rule 29 (fnbody)
    '='            [reduce using rule 44 (binop)]
    '='            [reduce using rule 57 (unop)]
    '['            reduce using rule 29 (fnbody)
    '['            [reduce using rule 44 (binop)]
    '['            [reduce using rule 57 (unop)]
    $default       reduce using rule 29 (fnbody)

    identdec   go to state 104
    basetype   go to state 29
    localdecl  go to state 105
    ifelse     go to state 30
    expr       go to state 31
    binop      go to state 32
    unop       go to state 33
    statement  go to state 106
    block      go to state 35
    blockHelp  go to state 36
    while      go to state 37
    return     go to state 38
    call       go to state 39
    funCall    go to state 40
    variable   go to state 41
    constant   go to state 42


State 67

   16 function: func ';' .

    $default  reduce using rule 16 (function)


State 68

   18 func: func param .
   20 param: param . ',' identdec

    ','  shift, and go to state 107

    $default  reduce using rule 18 (func)


State 69

   15 function: func fnbody . '}'
   25 fnbody: fnbody . statement
   26       | fnbody . localdecl

    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_IF         shift, and go to state 8
    TOK_WHILE      shift, and go to state 9
    TOK_RETURN     shift, and go to state 10
    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 14
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '('            shift, and go to state 20
    '{'            shift, and go to state 21
    ';'            shift, and go to state 22
    '}'            shift, and go to state 108

    TOK_ARROW  reduce using rule 44 (binop)
    TOK_ARROW  [reduce using rule 57 (unop)]
    TOK_EQ     reduce using rule 44 (binop)
    TOK_EQ     [reduce using rule 57 (unop)]
    TOK_NE     reduce using rule 44 (binop)
    TOK_NE     [reduce using rule 57 (unop)]
    TOK_LT     reduce using rule 44 (binop)
    TOK_LT     [reduce using rule 57 (unop)]
    TOK_LE     reduce using rule 44 (binop)
    TOK_LE     [reduce using rule 57 (unop)]
    TOK_GT     reduce using rule 44 (binop)
    TOK_GT     [reduce using rule 57 (unop)]
    TOK_GE     reduce using rule 44 (binop)
    TOK_GE     [reduce using rule 57 (unop)]
    '+'        [reduce using rule 44 (binop)]
    '+'        [reduce using rule 57 (unop)]
    '-'        [reduce using rule 44 (binop)]
    '-'        [reduce using rule 57 (unop)]
    '*'        reduce using rule 44 (binop)
    '*'        [reduce using rule 57 (unop)]
    '/'        reduce using rule 44 (binop)
    '/'        [reduce using rule 57 (unop)]
    '%'        reduce using rule 44 (binop)
    '%'        [reduce using rule 57 (unop)]
    ';'        [reduce using rule 44 (binop)]
    ';'        [reduce using rule 57 (unop)]
    '='        reduce using rule 44 (binop)
    '='        [reduce using rule 57 (unop)]
    '['        reduce using rule 44 (binop)
    '['        [reduce using rule 57 (unop)]
    $default   reduce using rule 44 (binop)

    identdec   go to state 104
    basetype   go to state 29
    localdecl  go to state 109
    ifelse     go to state 30
    expr       go to state 31
    binop      go to state 32
    unop       go to state 33
    statement  go to state 110
    block      go to state 35
    blockHelp  go to state 36
    while      go to state 37
    return     go to state 38
    call       go to state 39
    funCall    go to state 40
    variable   go to state 41
    constant   go to state 42


State 70

   14 globaldecl: identdec TOK_VARDECL . constant ';'

    TOK_NULL       shift, and go to state 12
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17

    constant  go to state 111


State 71

   23 identdec: basetype TOK_ARRAY . TOK_IDENT

    TOK_IDENT  shift, and go to state 112


State 72

   24 identdec: basetype TOK_IDENT .

    $default  reduce using rule 24 (identdec)


State 73

   81 variable: expr TOK_ARROW . TOK_IDENT

    TOK_IDENT  shift, and go to state 113


State 74

   51 binop: expr TOK_EQ . expr

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 47
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '('            shift, and go to state 20

    TOK_NULL       [reduce using rule 44 (binop)]
    TOK_NULL       [reduce using rule 57 (unop)]
    TOK_NEW        [reduce using rule 44 (binop)]
    TOK_NEW        [reduce using rule 57 (unop)]
    TOK_ARROW      reduce using rule 44 (binop)
    TOK_ARROW      [reduce using rule 57 (unop)]
    TOK_EQ         reduce using rule 44 (binop)
    TOK_EQ         [reduce using rule 57 (unop)]
    TOK_NE         reduce using rule 44 (binop)
    TOK_NE         [reduce using rule 57 (unop)]
    TOK_LT         reduce using rule 44 (binop)
    TOK_LT         [reduce using rule 57 (unop)]
    TOK_LE         reduce using rule 44 (binop)
    TOK_LE         [reduce using rule 57 (unop)]
    TOK_GT         reduce using rule 44 (binop)
    TOK_GT         [reduce using rule 57 (unop)]
    TOK_GE         reduce using rule 44 (binop)
    TOK_GE         [reduce using rule 57 (unop)]
    TOK_IDENT      [reduce using rule 44 (binop)]
    TOK_IDENT      [reduce using rule 57 (unop)]
    TOK_INTCON     [reduce using rule 44 (binop)]
    TOK_INTCON     [reduce using rule 57 (unop)]
    TOK_CHARCON    [reduce using rule 44 (binop)]
    TOK_CHARCON    [reduce using rule 57 (unop)]
    TOK_STRINGCON  [reduce using rule 44 (binop)]
    TOK_STRINGCON  [reduce using rule 57 (unop)]
    '+'            [reduce using rule 44 (binop)]
    '+'            [reduce using rule 57 (unop)]
    '-'            [reduce using rule 44 (binop)]
    '-'            [reduce using rule 57 (unop)]
    '*'            reduce using rule 44 (binop)
    '*'            [reduce using rule 57 (unop)]
    '/'            reduce using rule 44 (binop)
    '/'            [reduce using rule 57 (unop)]
    '%'            reduce using rule 44 (binop)
    '%'            [reduce using rule 57 (unop)]
    '('            [reduce using rule 44 (binop)]
    '('            [reduce using rule 57 (unop)]
    ')'            reduce using rule 44 (binop)
    ')'            [reduce using rule 57 (unop)]
    ';'            reduce using rule 44 (binop)
    ';'            [reduce using rule 57 (unop)]
    ','            reduce using rule 44 (binop)
    ','            [reduce using rule 57 (unop)]
    '='            reduce using rule 44 (binop)
    '='            [reduce using rule 57 (unop)]
    '['            reduce using rule 44 (binop)
    '['            [reduce using rule 57 (unop)]
    ']'            reduce using rule 44 (binop)
    ']'            [reduce using rule 57 (unop)]
    $default       reduce using rule 44 (binop)

    expr      go to state 114
    binop     go to state 32
    unop      go to state 33
    call      go to state 39
    funCall   go to state 40
    variable  go to state 41
    constant  go to state 42


State 75

   52 binop: expr TOK_NE . expr

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 47
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '('            shift, and go to state 20

    TOK_NULL       [reduce using rule 44 (binop)]
    TOK_NULL       [reduce using rule 57 (unop)]
    TOK_NEW        [reduce using rule 44 (binop)]
    TOK_NEW        [reduce using rule 57 (unop)]
    TOK_ARROW      reduce using rule 44 (binop)
    TOK_ARROW      [reduce using rule 57 (unop)]
    TOK_EQ         reduce using rule 44 (binop)
    TOK_EQ         [reduce using rule 57 (unop)]
    TOK_NE         reduce using rule 44 (binop)
    TOK_NE         [reduce using rule 57 (unop)]
    TOK_LT         reduce using rule 44 (binop)
    TOK_LT         [reduce using rule 57 (unop)]
    TOK_LE         reduce using rule 44 (binop)
    TOK_LE         [reduce using rule 57 (unop)]
    TOK_GT         reduce using rule 44 (binop)
    TOK_GT         [reduce using rule 57 (unop)]
    TOK_GE         reduce using rule 44 (binop)
    TOK_GE         [reduce using rule 57 (unop)]
    TOK_IDENT      [reduce using rule 44 (binop)]
    TOK_IDENT      [reduce using rule 57 (unop)]
    TOK_INTCON     [reduce using rule 44 (binop)]
    TOK_INTCON     [reduce using rule 57 (unop)]
    TOK_CHARCON    [reduce using rule 44 (binop)]
    TOK_CHARCON    [reduce using rule 57 (unop)]
    TOK_STRINGCON  [reduce using rule 44 (binop)]
    TOK_STRINGCON  [reduce using rule 57 (unop)]
    '+'            [reduce using rule 44 (binop)]
    '+'            [reduce using rule 57 (unop)]
    '-'            [reduce using rule 44 (binop)]
    '-'            [reduce using rule 57 (unop)]
    '*'            reduce using rule 44 (binop)
    '*'            [reduce using rule 57 (unop)]
    '/'            reduce using rule 44 (binop)
    '/'            [reduce using rule 57 (unop)]
    '%'            reduce using rule 44 (binop)
    '%'            [reduce using rule 57 (unop)]
    '('            [reduce using rule 44 (binop)]
    '('            [reduce using rule 57 (unop)]
    ')'            reduce using rule 44 (binop)
    ')'            [reduce using rule 57 (unop)]
    ';'            reduce using rule 44 (binop)
    ';'            [reduce using rule 57 (unop)]
    ','            reduce using rule 44 (binop)
    ','            [reduce using rule 57 (unop)]
    '='            reduce using rule 44 (binop)
    '='            [reduce using rule 57 (unop)]
    '['            reduce using rule 44 (binop)
    '['            [reduce using rule 57 (unop)]
    ']'            reduce using rule 44 (binop)
    ']'            [reduce using rule 57 (unop)]
    $default       reduce using rule 44 (binop)

    expr      go to state 115
    binop     go to state 32
    unop      go to state 33
    call      go to state 39
    funCall   go to state 40
    variable  go to state 41
    constant  go to state 42


State 76

   53 binop: expr TOK_LT . expr

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 47
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '('            shift, and go to state 20

    TOK_NULL       [reduce using rule 44 (binop)]
    TOK_NULL       [reduce using rule 57 (unop)]
    TOK_NEW        [reduce using rule 44 (binop)]
    TOK_NEW        [reduce using rule 57 (unop)]
    TOK_ARROW      reduce using rule 44 (binop)
    TOK_ARROW      [reduce using rule 57 (unop)]
    TOK_EQ         reduce using rule 44 (binop)
    TOK_EQ         [reduce using rule 57 (unop)]
    TOK_NE         reduce using rule 44 (binop)
    TOK_NE         [reduce using rule 57 (unop)]
    TOK_LT         reduce using rule 44 (binop)
    TOK_LT         [reduce using rule 57 (unop)]
    TOK_LE         reduce using rule 44 (binop)
    TOK_LE         [reduce using rule 57 (unop)]
    TOK_GT         reduce using rule 44 (binop)
    TOK_GT         [reduce using rule 57 (unop)]
    TOK_GE         reduce using rule 44 (binop)
    TOK_GE         [reduce using rule 57 (unop)]
    TOK_IDENT      [reduce using rule 44 (binop)]
    TOK_IDENT      [reduce using rule 57 (unop)]
    TOK_INTCON     [reduce using rule 44 (binop)]
    TOK_INTCON     [reduce using rule 57 (unop)]
    TOK_CHARCON    [reduce using rule 44 (binop)]
    TOK_CHARCON    [reduce using rule 57 (unop)]
    TOK_STRINGCON  [reduce using rule 44 (binop)]
    TOK_STRINGCON  [reduce using rule 57 (unop)]
    '+'            [reduce using rule 44 (binop)]
    '+'            [reduce using rule 57 (unop)]
    '-'            [reduce using rule 44 (binop)]
    '-'            [reduce using rule 57 (unop)]
    '*'            reduce using rule 44 (binop)
    '*'            [reduce using rule 57 (unop)]
    '/'            reduce using rule 44 (binop)
    '/'            [reduce using rule 57 (unop)]
    '%'            reduce using rule 44 (binop)
    '%'            [reduce using rule 57 (unop)]
    '('            [reduce using rule 44 (binop)]
    '('            [reduce using rule 57 (unop)]
    ')'            reduce using rule 44 (binop)
    ')'            [reduce using rule 57 (unop)]
    ';'            reduce using rule 44 (binop)
    ';'            [reduce using rule 57 (unop)]
    ','            reduce using rule 44 (binop)
    ','            [reduce using rule 57 (unop)]
    '='            reduce using rule 44 (binop)
    '='            [reduce using rule 57 (unop)]
    '['            reduce using rule 44 (binop)
    '['            [reduce using rule 57 (unop)]
    ']'            reduce using rule 44 (binop)
    ']'            [reduce using rule 57 (unop)]
    $default       reduce using rule 44 (binop)

    expr      go to state 116
    binop     go to state 32
    unop      go to state 33
    call      go to state 39
    funCall   go to state 40
    variable  go to state 41
    constant  go to state 42


State 77

   54 binop: expr TOK_LE . expr

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 47
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '('            shift, and go to state 20

    TOK_NULL       [reduce using rule 44 (binop)]
    TOK_NULL       [reduce using rule 57 (unop)]
    TOK_NEW        [reduce using rule 44 (binop)]
    TOK_NEW        [reduce using rule 57 (unop)]
    TOK_ARROW      reduce using rule 44 (binop)
    TOK_ARROW      [reduce using rule 57 (unop)]
    TOK_EQ         reduce using rule 44 (binop)
    TOK_EQ         [reduce using rule 57 (unop)]
    TOK_NE         reduce using rule 44 (binop)
    TOK_NE         [reduce using rule 57 (unop)]
    TOK_LT         reduce using rule 44 (binop)
    TOK_LT         [reduce using rule 57 (unop)]
    TOK_LE         reduce using rule 44 (binop)
    TOK_LE         [reduce using rule 57 (unop)]
    TOK_GT         reduce using rule 44 (binop)
    TOK_GT         [reduce using rule 57 (unop)]
    TOK_GE         reduce using rule 44 (binop)
    TOK_GE         [reduce using rule 57 (unop)]
    TOK_IDENT      [reduce using rule 44 (binop)]
    TOK_IDENT      [reduce using rule 57 (unop)]
    TOK_INTCON     [reduce using rule 44 (binop)]
    TOK_INTCON     [reduce using rule 57 (unop)]
    TOK_CHARCON    [reduce using rule 44 (binop)]
    TOK_CHARCON    [reduce using rule 57 (unop)]
    TOK_STRINGCON  [reduce using rule 44 (binop)]
    TOK_STRINGCON  [reduce using rule 57 (unop)]
    '+'            [reduce using rule 44 (binop)]
    '+'            [reduce using rule 57 (unop)]
    '-'            [reduce using rule 44 (binop)]
    '-'            [reduce using rule 57 (unop)]
    '*'            reduce using rule 44 (binop)
    '*'            [reduce using rule 57 (unop)]
    '/'            reduce using rule 44 (binop)
    '/'            [reduce using rule 57 (unop)]
    '%'            reduce using rule 44 (binop)
    '%'            [reduce using rule 57 (unop)]
    '('            [reduce using rule 44 (binop)]
    '('            [reduce using rule 57 (unop)]
    ')'            reduce using rule 44 (binop)
    ')'            [reduce using rule 57 (unop)]
    ';'            reduce using rule 44 (binop)
    ';'            [reduce using rule 57 (unop)]
    ','            reduce using rule 44 (binop)
    ','            [reduce using rule 57 (unop)]
    '='            reduce using rule 44 (binop)
    '='            [reduce using rule 57 (unop)]
    '['            reduce using rule 44 (binop)
    '['            [reduce using rule 57 (unop)]
    ']'            reduce using rule 44 (binop)
    ']'            [reduce using rule 57 (unop)]
    $default       reduce using rule 44 (binop)

    expr      go to state 117
    binop     go to state 32
    unop      go to state 33
    call      go to state 39
    funCall   go to state 40
    variable  go to state 41
    constant  go to state 42


State 78

   55 binop: expr TOK_GT . expr

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 47
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '('            shift, and go to state 20

    TOK_NULL       [reduce using rule 44 (binop)]
    TOK_NULL       [reduce using rule 57 (unop)]
    TOK_NEW        [reduce using rule 44 (binop)]
    TOK_NEW        [reduce using rule 57 (unop)]
    TOK_ARROW      reduce using rule 44 (binop)
    TOK_ARROW      [reduce using rule 57 (unop)]
    TOK_EQ         reduce using rule 44 (binop)
    TOK_EQ         [reduce using rule 57 (unop)]
    TOK_NE         reduce using rule 44 (binop)
    TOK_NE         [reduce using rule 57 (unop)]
    TOK_LT         reduce using rule 44 (binop)
    TOK_LT         [reduce using rule 57 (unop)]
    TOK_LE         reduce using rule 44 (binop)
    TOK_LE         [reduce using rule 57 (unop)]
    TOK_GT         reduce using rule 44 (binop)
    TOK_GT         [reduce using rule 57 (unop)]
    TOK_GE         reduce using rule 44 (binop)
    TOK_GE         [reduce using rule 57 (unop)]
    TOK_IDENT      [reduce using rule 44 (binop)]
    TOK_IDENT      [reduce using rule 57 (unop)]
    TOK_INTCON     [reduce using rule 44 (binop)]
    TOK_INTCON     [reduce using rule 57 (unop)]
    TOK_CHARCON    [reduce using rule 44 (binop)]
    TOK_CHARCON    [reduce using rule 57 (unop)]
    TOK_STRINGCON  [reduce using rule 44 (binop)]
    TOK_STRINGCON  [reduce using rule 57 (unop)]
    '+'            [reduce using rule 44 (binop)]
    '+'            [reduce using rule 57 (unop)]
    '-'            [reduce using rule 44 (binop)]
    '-'            [reduce using rule 57 (unop)]
    '*'            reduce using rule 44 (binop)
    '*'            [reduce using rule 57 (unop)]
    '/'            reduce using rule 44 (binop)
    '/'            [reduce using rule 57 (unop)]
    '%'            reduce using rule 44 (binop)
    '%'            [reduce using rule 57 (unop)]
    '('            [reduce using rule 44 (binop)]
    '('            [reduce using rule 57 (unop)]
    ')'            reduce using rule 44 (binop)
    ')'            [reduce using rule 57 (unop)]
    ';'            reduce using rule 44 (binop)
    ';'            [reduce using rule 57 (unop)]
    ','            reduce using rule 44 (binop)
    ','            [reduce using rule 57 (unop)]
    '='            reduce using rule 44 (binop)
    '='            [reduce using rule 57 (unop)]
    '['            reduce using rule 44 (binop)
    '['            [reduce using rule 57 (unop)]
    ']'            reduce using rule 44 (binop)
    ']'            [reduce using rule 57 (unop)]
    $default       reduce using rule 44 (binop)

    expr      go to state 118
    binop     go to state 32
    unop      go to state 33
    call      go to state 39
    funCall   go to state 40
    variable  go to state 41
    constant  go to state 42


State 79

   56 binop: expr TOK_GE . expr

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 47
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '('            shift, and go to state 20

    TOK_NULL       [reduce using rule 44 (binop)]
    TOK_NULL       [reduce using rule 57 (unop)]
    TOK_NEW        [reduce using rule 44 (binop)]
    TOK_NEW        [reduce using rule 57 (unop)]
    TOK_ARROW      reduce using rule 44 (binop)
    TOK_ARROW      [reduce using rule 57 (unop)]
    TOK_EQ         reduce using rule 44 (binop)
    TOK_EQ         [reduce using rule 57 (unop)]
    TOK_NE         reduce using rule 44 (binop)
    TOK_NE         [reduce using rule 57 (unop)]
    TOK_LT         reduce using rule 44 (binop)
    TOK_LT         [reduce using rule 57 (unop)]
    TOK_LE         reduce using rule 44 (binop)
    TOK_LE         [reduce using rule 57 (unop)]
    TOK_GT         reduce using rule 44 (binop)
    TOK_GT         [reduce using rule 57 (unop)]
    TOK_GE         reduce using rule 44 (binop)
    TOK_GE         [reduce using rule 57 (unop)]
    TOK_IDENT      [reduce using rule 44 (binop)]
    TOK_IDENT      [reduce using rule 57 (unop)]
    TOK_INTCON     [reduce using rule 44 (binop)]
    TOK_INTCON     [reduce using rule 57 (unop)]
    TOK_CHARCON    [reduce using rule 44 (binop)]
    TOK_CHARCON    [reduce using rule 57 (unop)]
    TOK_STRINGCON  [reduce using rule 44 (binop)]
    TOK_STRINGCON  [reduce using rule 57 (unop)]
    '+'            [reduce using rule 44 (binop)]
    '+'            [reduce using rule 57 (unop)]
    '-'            [reduce using rule 44 (binop)]
    '-'            [reduce using rule 57 (unop)]
    '*'            reduce using rule 44 (binop)
    '*'            [reduce using rule 57 (unop)]
    '/'            reduce using rule 44 (binop)
    '/'            [reduce using rule 57 (unop)]
    '%'            reduce using rule 44 (binop)
    '%'            [reduce using rule 57 (unop)]
    '('            [reduce using rule 44 (binop)]
    '('            [reduce using rule 57 (unop)]
    ')'            reduce using rule 44 (binop)
    ')'            [reduce using rule 57 (unop)]
    ';'            reduce using rule 44 (binop)
    ';'            [reduce using rule 57 (unop)]
    ','            reduce using rule 44 (binop)
    ','            [reduce using rule 57 (unop)]
    '='            reduce using rule 44 (binop)
    '='            [reduce using rule 57 (unop)]
    '['            reduce using rule 44 (binop)
    '['            [reduce using rule 57 (unop)]
    ']'            reduce using rule 44 (binop)
    ']'            [reduce using rule 57 (unop)]
    $default       reduce using rule 44 (binop)

    expr      go to state 119
    binop     go to state 32
    unop      go to state 33
    call      go to state 39
    funCall   go to state 40
    variable  go to state 41
    constant  go to state 42


State 80

   46 binop: expr '+' . expr

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 47
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '('            shift, and go to state 20

    TOK_NULL       [reduce using rule 44 (binop)]
    TOK_NULL       [reduce using rule 57 (unop)]
    TOK_NEW        [reduce using rule 44 (binop)]
    TOK_NEW        [reduce using rule 57 (unop)]
    TOK_ARROW      reduce using rule 44 (binop)
    TOK_ARROW      [reduce using rule 57 (unop)]
    TOK_EQ         reduce using rule 44 (binop)
    TOK_EQ         [reduce using rule 57 (unop)]
    TOK_NE         reduce using rule 44 (binop)
    TOK_NE         [reduce using rule 57 (unop)]
    TOK_LT         reduce using rule 44 (binop)
    TOK_LT         [reduce using rule 57 (unop)]
    TOK_LE         reduce using rule 44 (binop)
    TOK_LE         [reduce using rule 57 (unop)]
    TOK_GT         reduce using rule 44 (binop)
    TOK_GT         [reduce using rule 57 (unop)]
    TOK_GE         reduce using rule 44 (binop)
    TOK_GE         [reduce using rule 57 (unop)]
    TOK_IDENT      [reduce using rule 44 (binop)]
    TOK_IDENT      [reduce using rule 57 (unop)]
    TOK_INTCON     [reduce using rule 44 (binop)]
    TOK_INTCON     [reduce using rule 57 (unop)]
    TOK_CHARCON    [reduce using rule 44 (binop)]
    TOK_CHARCON    [reduce using rule 57 (unop)]
    TOK_STRINGCON  [reduce using rule 44 (binop)]
    TOK_STRINGCON  [reduce using rule 57 (unop)]
    '+'            [reduce using rule 44 (binop)]
    '+'            [reduce using rule 57 (unop)]
    '-'            [reduce using rule 44 (binop)]
    '-'            [reduce using rule 57 (unop)]
    '*'            reduce using rule 44 (binop)
    '*'            [reduce using rule 57 (unop)]
    '/'            reduce using rule 44 (binop)
    '/'            [reduce using rule 57 (unop)]
    '%'            reduce using rule 44 (binop)
    '%'            [reduce using rule 57 (unop)]
    '('            [reduce using rule 44 (binop)]
    '('            [reduce using rule 57 (unop)]
    ')'            reduce using rule 44 (binop)
    ')'            [reduce using rule 57 (unop)]
    ';'            reduce using rule 44 (binop)
    ';'            [reduce using rule 57 (unop)]
    ','            reduce using rule 44 (binop)
    ','            [reduce using rule 57 (unop)]
    '='            reduce using rule 44 (binop)
    '='            [reduce using rule 57 (unop)]
    '['            reduce using rule 44 (binop)
    '['            [reduce using rule 57 (unop)]
    ']'            reduce using rule 44 (binop)
    ']'            [reduce using rule 57 (unop)]
    $default       reduce using rule 44 (binop)

    expr      go to state 120
    binop     go to state 32
    unop      go to state 33
    call      go to state 39
    funCall   go to state 40
    variable  go to state 41
    constant  go to state 42


State 81

   47 binop: expr '-' . expr

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 47
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '('            shift, and go to state 20

    TOK_NULL       [reduce using rule 44 (binop)]
    TOK_NULL       [reduce using rule 57 (unop)]
    TOK_NEW        [reduce using rule 44 (binop)]
    TOK_NEW        [reduce using rule 57 (unop)]
    TOK_ARROW      reduce using rule 44 (binop)
    TOK_ARROW      [reduce using rule 57 (unop)]
    TOK_EQ         reduce using rule 44 (binop)
    TOK_EQ         [reduce using rule 57 (unop)]
    TOK_NE         reduce using rule 44 (binop)
    TOK_NE         [reduce using rule 57 (unop)]
    TOK_LT         reduce using rule 44 (binop)
    TOK_LT         [reduce using rule 57 (unop)]
    TOK_LE         reduce using rule 44 (binop)
    TOK_LE         [reduce using rule 57 (unop)]
    TOK_GT         reduce using rule 44 (binop)
    TOK_GT         [reduce using rule 57 (unop)]
    TOK_GE         reduce using rule 44 (binop)
    TOK_GE         [reduce using rule 57 (unop)]
    TOK_IDENT      [reduce using rule 44 (binop)]
    TOK_IDENT      [reduce using rule 57 (unop)]
    TOK_INTCON     [reduce using rule 44 (binop)]
    TOK_INTCON     [reduce using rule 57 (unop)]
    TOK_CHARCON    [reduce using rule 44 (binop)]
    TOK_CHARCON    [reduce using rule 57 (unop)]
    TOK_STRINGCON  [reduce using rule 44 (binop)]
    TOK_STRINGCON  [reduce using rule 57 (unop)]
    '+'            [reduce using rule 44 (binop)]
    '+'            [reduce using rule 57 (unop)]
    '-'            [reduce using rule 44 (binop)]
    '-'            [reduce using rule 57 (unop)]
    '*'            reduce using rule 44 (binop)
    '*'            [reduce using rule 57 (unop)]
    '/'            reduce using rule 44 (binop)
    '/'            [reduce using rule 57 (unop)]
    '%'            reduce using rule 44 (binop)
    '%'            [reduce using rule 57 (unop)]
    '('            [reduce using rule 44 (binop)]
    '('            [reduce using rule 57 (unop)]
    ')'            reduce using rule 44 (binop)
    ')'            [reduce using rule 57 (unop)]
    ';'            reduce using rule 44 (binop)
    ';'            [reduce using rule 57 (unop)]
    ','            reduce using rule 44 (binop)
    ','            [reduce using rule 57 (unop)]
    '='            reduce using rule 44 (binop)
    '='            [reduce using rule 57 (unop)]
    '['            reduce using rule 44 (binop)
    '['            [reduce using rule 57 (unop)]
    ']'            reduce using rule 44 (binop)
    ']'            [reduce using rule 57 (unop)]
    $default       reduce using rule 44 (binop)

    expr      go to state 121
    binop     go to state 32
    unop      go to state 33
    call      go to state 39
    funCall   go to state 40
    variable  go to state 41
    constant  go to state 42


State 82

   48 binop: expr '*' . expr

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 47
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '('            shift, and go to state 20

    TOK_NULL       [reduce using rule 44 (binop)]
    TOK_NULL       [reduce using rule 57 (unop)]
    TOK_NEW        [reduce using rule 44 (binop)]
    TOK_NEW        [reduce using rule 57 (unop)]
    TOK_ARROW      reduce using rule 44 (binop)
    TOK_ARROW      [reduce using rule 57 (unop)]
    TOK_EQ         reduce using rule 44 (binop)
    TOK_EQ         [reduce using rule 57 (unop)]
    TOK_NE         reduce using rule 44 (binop)
    TOK_NE         [reduce using rule 57 (unop)]
    TOK_LT         reduce using rule 44 (binop)
    TOK_LT         [reduce using rule 57 (unop)]
    TOK_LE         reduce using rule 44 (binop)
    TOK_LE         [reduce using rule 57 (unop)]
    TOK_GT         reduce using rule 44 (binop)
    TOK_GT         [reduce using rule 57 (unop)]
    TOK_GE         reduce using rule 44 (binop)
    TOK_GE         [reduce using rule 57 (unop)]
    TOK_IDENT      [reduce using rule 44 (binop)]
    TOK_IDENT      [reduce using rule 57 (unop)]
    TOK_INTCON     [reduce using rule 44 (binop)]
    TOK_INTCON     [reduce using rule 57 (unop)]
    TOK_CHARCON    [reduce using rule 44 (binop)]
    TOK_CHARCON    [reduce using rule 57 (unop)]
    TOK_STRINGCON  [reduce using rule 44 (binop)]
    TOK_STRINGCON  [reduce using rule 57 (unop)]
    '+'            [reduce using rule 44 (binop)]
    '+'            [reduce using rule 57 (unop)]
    '-'            [reduce using rule 44 (binop)]
    '-'            [reduce using rule 57 (unop)]
    '*'            reduce using rule 44 (binop)
    '*'            [reduce using rule 57 (unop)]
    '/'            reduce using rule 44 (binop)
    '/'            [reduce using rule 57 (unop)]
    '%'            reduce using rule 44 (binop)
    '%'            [reduce using rule 57 (unop)]
    '('            [reduce using rule 44 (binop)]
    '('            [reduce using rule 57 (unop)]
    ')'            reduce using rule 44 (binop)
    ')'            [reduce using rule 57 (unop)]
    ';'            reduce using rule 44 (binop)
    ';'            [reduce using rule 57 (unop)]
    ','            reduce using rule 44 (binop)
    ','            [reduce using rule 57 (unop)]
    '='            reduce using rule 44 (binop)
    '='            [reduce using rule 57 (unop)]
    '['            reduce using rule 44 (binop)
    '['            [reduce using rule 57 (unop)]
    ']'            reduce using rule 44 (binop)
    ']'            [reduce using rule 57 (unop)]
    $default       reduce using rule 44 (binop)

    expr      go to state 122
    binop     go to state 32
    unop      go to state 33
    call      go to state 39
    funCall   go to state 40
    variable  go to state 41
    constant  go to state 42


State 83

   49 binop: expr '/' . expr

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 47
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '('            shift, and go to state 20

    TOK_NULL       [reduce using rule 44 (binop)]
    TOK_NULL       [reduce using rule 57 (unop)]
    TOK_NEW        [reduce using rule 44 (binop)]
    TOK_NEW        [reduce using rule 57 (unop)]
    TOK_ARROW      reduce using rule 44 (binop)
    TOK_ARROW      [reduce using rule 57 (unop)]
    TOK_EQ         reduce using rule 44 (binop)
    TOK_EQ         [reduce using rule 57 (unop)]
    TOK_NE         reduce using rule 44 (binop)
    TOK_NE         [reduce using rule 57 (unop)]
    TOK_LT         reduce using rule 44 (binop)
    TOK_LT         [reduce using rule 57 (unop)]
    TOK_LE         reduce using rule 44 (binop)
    TOK_LE         [reduce using rule 57 (unop)]
    TOK_GT         reduce using rule 44 (binop)
    TOK_GT         [reduce using rule 57 (unop)]
    TOK_GE         reduce using rule 44 (binop)
    TOK_GE         [reduce using rule 57 (unop)]
    TOK_IDENT      [reduce using rule 44 (binop)]
    TOK_IDENT      [reduce using rule 57 (unop)]
    TOK_INTCON     [reduce using rule 44 (binop)]
    TOK_INTCON     [reduce using rule 57 (unop)]
    TOK_CHARCON    [reduce using rule 44 (binop)]
    TOK_CHARCON    [reduce using rule 57 (unop)]
    TOK_STRINGCON  [reduce using rule 44 (binop)]
    TOK_STRINGCON  [reduce using rule 57 (unop)]
    '+'            [reduce using rule 44 (binop)]
    '+'            [reduce using rule 57 (unop)]
    '-'            [reduce using rule 44 (binop)]
    '-'            [reduce using rule 57 (unop)]
    '*'            reduce using rule 44 (binop)
    '*'            [reduce using rule 57 (unop)]
    '/'            reduce using rule 44 (binop)
    '/'            [reduce using rule 57 (unop)]
    '%'            reduce using rule 44 (binop)
    '%'            [reduce using rule 57 (unop)]
    '('            [reduce using rule 44 (binop)]
    '('            [reduce using rule 57 (unop)]
    ')'            reduce using rule 44 (binop)
    ')'            [reduce using rule 57 (unop)]
    ';'            reduce using rule 44 (binop)
    ';'            [reduce using rule 57 (unop)]
    ','            reduce using rule 44 (binop)
    ','            [reduce using rule 57 (unop)]
    '='            reduce using rule 44 (binop)
    '='            [reduce using rule 57 (unop)]
    '['            reduce using rule 44 (binop)
    '['            [reduce using rule 57 (unop)]
    ']'            reduce using rule 44 (binop)
    ']'            [reduce using rule 57 (unop)]
    $default       reduce using rule 44 (binop)

    expr      go to state 123
    binop     go to state 32
    unop      go to state 33
    call      go to state 39
    funCall   go to state 40
    variable  go to state 41
    constant  go to state 42


State 84

   50 binop: expr '%' . expr

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 47
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '('            shift, and go to state 20

    TOK_NULL       [reduce using rule 44 (binop)]
    TOK_NULL       [reduce using rule 57 (unop)]
    TOK_NEW        [reduce using rule 44 (binop)]
    TOK_NEW        [reduce using rule 57 (unop)]
    TOK_ARROW      reduce using rule 44 (binop)
    TOK_ARROW      [reduce using rule 57 (unop)]
    TOK_EQ         reduce using rule 44 (binop)
    TOK_EQ         [reduce using rule 57 (unop)]
    TOK_NE         reduce using rule 44 (binop)
    TOK_NE         [reduce using rule 57 (unop)]
    TOK_LT         reduce using rule 44 (binop)
    TOK_LT         [reduce using rule 57 (unop)]
    TOK_LE         reduce using rule 44 (binop)
    TOK_LE         [reduce using rule 57 (unop)]
    TOK_GT         reduce using rule 44 (binop)
    TOK_GT         [reduce using rule 57 (unop)]
    TOK_GE         reduce using rule 44 (binop)
    TOK_GE         [reduce using rule 57 (unop)]
    TOK_IDENT      [reduce using rule 44 (binop)]
    TOK_IDENT      [reduce using rule 57 (unop)]
    TOK_INTCON     [reduce using rule 44 (binop)]
    TOK_INTCON     [reduce using rule 57 (unop)]
    TOK_CHARCON    [reduce using rule 44 (binop)]
    TOK_CHARCON    [reduce using rule 57 (unop)]
    TOK_STRINGCON  [reduce using rule 44 (binop)]
    TOK_STRINGCON  [reduce using rule 57 (unop)]
    '+'            [reduce using rule 44 (binop)]
    '+'            [reduce using rule 57 (unop)]
    '-'            [reduce using rule 44 (binop)]
    '-'            [reduce using rule 57 (unop)]
    '*'            reduce using rule 44 (binop)
    '*'            [reduce using rule 57 (unop)]
    '/'            reduce using rule 44 (binop)
    '/'            [reduce using rule 57 (unop)]
    '%'            reduce using rule 44 (binop)
    '%'            [reduce using rule 57 (unop)]
    '('            [reduce using rule 44 (binop)]
    '('            [reduce using rule 57 (unop)]
    ')'            reduce using rule 44 (binop)
    ')'            [reduce using rule 57 (unop)]
    ';'            reduce using rule 44 (binop)
    ';'            [reduce using rule 57 (unop)]
    ','            reduce using rule 44 (binop)
    ','            [reduce using rule 57 (unop)]
    '='            reduce using rule 44 (binop)
    '='            [reduce using rule 57 (unop)]
    '['            reduce using rule 44 (binop)
    '['            [reduce using rule 57 (unop)]
    ']'            reduce using rule 44 (binop)
    ']'            [reduce using rule 57 (unop)]
    $default       reduce using rule 44 (binop)

    expr      go to state 124
    binop     go to state 32
    unop      go to state 33
    call      go to state 39
    funCall   go to state 40
    variable  go to state 41
    constant  go to state 42


State 85

   64 statement: expr ';' .

    $default  reduce using rule 64 (statement)


State 86

   45 binop: expr '=' . expr

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 47
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '('            shift, and go to state 20

    TOK_NULL       [reduce using rule 44 (binop)]
    TOK_NULL       [reduce using rule 57 (unop)]
    TOK_NEW        [reduce using rule 44 (binop)]
    TOK_NEW        [reduce using rule 57 (unop)]
    TOK_ARROW      reduce using rule 44 (binop)
    TOK_ARROW      [reduce using rule 57 (unop)]
    TOK_EQ         reduce using rule 44 (binop)
    TOK_EQ         [reduce using rule 57 (unop)]
    TOK_NE         reduce using rule 44 (binop)
    TOK_NE         [reduce using rule 57 (unop)]
    TOK_LT         reduce using rule 44 (binop)
    TOK_LT         [reduce using rule 57 (unop)]
    TOK_LE         reduce using rule 44 (binop)
    TOK_LE         [reduce using rule 57 (unop)]
    TOK_GT         reduce using rule 44 (binop)
    TOK_GT         [reduce using rule 57 (unop)]
    TOK_GE         reduce using rule 44 (binop)
    TOK_GE         [reduce using rule 57 (unop)]
    TOK_IDENT      [reduce using rule 44 (binop)]
    TOK_IDENT      [reduce using rule 57 (unop)]
    TOK_INTCON     [reduce using rule 44 (binop)]
    TOK_INTCON     [reduce using rule 57 (unop)]
    TOK_CHARCON    [reduce using rule 44 (binop)]
    TOK_CHARCON    [reduce using rule 57 (unop)]
    TOK_STRINGCON  [reduce using rule 44 (binop)]
    TOK_STRINGCON  [reduce using rule 57 (unop)]
    '+'            [reduce using rule 44 (binop)]
    '+'            [reduce using rule 57 (unop)]
    '-'            [reduce using rule 44 (binop)]
    '-'            [reduce using rule 57 (unop)]
    '*'            reduce using rule 44 (binop)
    '*'            [reduce using rule 57 (unop)]
    '/'            reduce using rule 44 (binop)
    '/'            [reduce using rule 57 (unop)]
    '%'            reduce using rule 44 (binop)
    '%'            [reduce using rule 57 (unop)]
    '('            [reduce using rule 44 (binop)]
    '('            [reduce using rule 57 (unop)]
    ')'            reduce using rule 44 (binop)
    ')'            [reduce using rule 57 (unop)]
    ';'            reduce using rule 44 (binop)
    ';'            [reduce using rule 57 (unop)]
    ','            reduce using rule 44 (binop)
    ','            [reduce using rule 57 (unop)]
    '='            reduce using rule 44 (binop)
    '='            [reduce using rule 57 (unop)]
    '['            reduce using rule 44 (binop)
    '['            [reduce using rule 57 (unop)]
    ']'            reduce using rule 44 (binop)
    ']'            [reduce using rule 57 (unop)]
    $default       reduce using rule 44 (binop)

    expr      go to state 125
    binop     go to state 32
    unop      go to state 33
    call      go to state 39
    funCall   go to state 40
    variable  go to state 41
    constant  go to state 42


State 87

   80 variable: expr '[' . expr ']'

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 47
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '('            shift, and go to state 20

    TOK_ARROW  reduce using rule 44 (binop)
    TOK_ARROW  [reduce using rule 57 (unop)]
    TOK_EQ     reduce using rule 44 (binop)
    TOK_EQ     [reduce using rule 57 (unop)]
    TOK_NE     reduce using rule 44 (binop)
    TOK_NE     [reduce using rule 57 (unop)]
    TOK_LT     reduce using rule 44 (binop)
    TOK_LT     [reduce using rule 57 (unop)]
    TOK_LE     reduce using rule 44 (binop)
    TOK_LE     [reduce using rule 57 (unop)]
    TOK_GT     reduce using rule 44 (binop)
    TOK_GT     [reduce using rule 57 (unop)]
    TOK_GE     reduce using rule 44 (binop)
    TOK_GE     [reduce using rule 57 (unop)]
    '+'        [reduce using rule 44 (binop)]
    '+'        [reduce using rule 57 (unop)]
    '-'        [reduce using rule 44 (binop)]
    '-'        [reduce using rule 57 (unop)]
    '*'        reduce using rule 44 (binop)
    '*'        [reduce using rule 57 (unop)]
    '/'        reduce using rule 44 (binop)
    '/'        [reduce using rule 57 (unop)]
    '%'        reduce using rule 44 (binop)
    '%'        [reduce using rule 57 (unop)]
    '='        reduce using rule 44 (binop)
    '='        [reduce using rule 57 (unop)]
    '['        reduce using rule 44 (binop)
    '['        [reduce using rule 57 (unop)]
    ']'        reduce using rule 44 (binop)
    ']'        [reduce using rule 57 (unop)]
    $default   reduce using rule 44 (binop)

    expr      go to state 126
    binop     go to state 32
    unop      go to state 33
    call      go to state 39
    funCall   go to state 40
    variable  go to state 41
    constant  go to state 42


State 88

   66 block: blockHelp '}' .

    $default  reduce using rule 66 (block)


State 89

   67 blockHelp: blockHelp statement .

    $default  reduce using rule 67 (blockHelp)


State 90

   75 call: funCall ')' .

    $default  reduce using rule 75 (call)


State 91

   76 funCall: funCall ',' .

    $default  reduce using rule 76 (funCall)


State 92

   45 binop: expr . '=' expr
   46      | expr . '+' expr
   47      | expr . '-' expr
   48      | expr . '*' expr
   49      | expr . '/' expr
   50      | expr . '%' expr
   51      | expr . TOK_EQ expr
   52      | expr . TOK_NE expr
   53      | expr . TOK_LT expr
   54      | expr . TOK_LE expr
   55      | expr . TOK_GT expr
   56      | expr . TOK_GE expr
   77 funCall: funCall expr .
   80 variable: expr . '[' expr ']'
   81         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 73
    TOK_EQ     shift, and go to state 74
    TOK_NE     shift, and go to state 75
    TOK_LT     shift, and go to state 76
    TOK_LE     shift, and go to state 77
    TOK_GT     shift, and go to state 78
    TOK_GE     shift, and go to state 79
    '+'        shift, and go to state 80
    '-'        shift, and go to state 81
    '*'        shift, and go to state 82
    '/'        shift, and go to state 83
    '%'        shift, and go to state 84
    '='        shift, and go to state 86
    '['        shift, and go to state 87

    TOK_ARROW  [reduce using rule 77 (funCall)]
    TOK_EQ     [reduce using rule 77 (funCall)]
    TOK_NE     [reduce using rule 77 (funCall)]
    TOK_LT     [reduce using rule 77 (funCall)]
    TOK_LE     [reduce using rule 77 (funCall)]
    TOK_GT     [reduce using rule 77 (funCall)]
    TOK_GE     [reduce using rule 77 (funCall)]
    '+'        [reduce using rule 77 (funCall)]
    '-'        [reduce using rule 77 (funCall)]
    '*'        [reduce using rule 77 (funCall)]
    '/'        [reduce using rule 77 (funCall)]
    '%'        [reduce using rule 77 (funCall)]
    '='        [reduce using rule 77 (funCall)]
    '['        [reduce using rule 77 (funCall)]
    $default   reduce using rule 77 (funCall)


State 93

   35 ifelse: TOK_IF TOK_PARAM expr . ')' statement TOK_ELSE statement
   36       | TOK_IF TOK_PARAM expr . ')' statement TOK_IF
   45 binop: expr . '=' expr
   46      | expr . '+' expr
   47      | expr . '-' expr
   48      | expr . '*' expr
   49      | expr . '/' expr
   50      | expr . '%' expr
   51      | expr . TOK_EQ expr
   52      | expr . TOK_NE expr
   53      | expr . TOK_LT expr
   54      | expr . TOK_LE expr
   55      | expr . TOK_GT expr
   56      | expr . TOK_GE expr
   80 variable: expr . '[' expr ']'
   81         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 73
    TOK_EQ     shift, and go to state 74
    TOK_NE     shift, and go to state 75
    TOK_LT     shift, and go to state 76
    TOK_LE     shift, and go to state 77
    TOK_GT     shift, and go to state 78
    TOK_GE     shift, and go to state 79
    '+'        shift, and go to state 80
    '-'        shift, and go to state 81
    '*'        shift, and go to state 82
    '/'        shift, and go to state 83
    '%'        shift, and go to state 84
    ')'        shift, and go to state 127
    '='        shift, and go to state 86
    '['        shift, and go to state 87


State 94

   45 binop: expr . '=' expr
   46      | expr . '+' expr
   47      | expr . '-' expr
   48      | expr . '*' expr
   49      | expr . '/' expr
   50      | expr . '%' expr
   51      | expr . TOK_EQ expr
   52      | expr . TOK_NE expr
   53      | expr . TOK_LT expr
   54      | expr . TOK_LE expr
   55      | expr . TOK_GT expr
   56      | expr . TOK_GE expr
   69 while: TOK_WHILE TOK_PARAM expr . ')' statement
   80 variable: expr . '[' expr ']'
   81         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 73
    TOK_EQ     shift, and go to state 74
    TOK_NE     shift, and go to state 75
    TOK_LT     shift, and go to state 76
    TOK_LE     shift, and go to state 77
    TOK_GT     shift, and go to state 78
    TOK_GE     shift, and go to state 79
    '+'        shift, and go to state 80
    '-'        shift, and go to state 81
    '*'        shift, and go to state 82
    '/'        shift, and go to state 83
    '%'        shift, and go to state 84
    ')'        shift, and go to state 128
    '='        shift, and go to state 86
    '['        shift, and go to state 87


State 95

   71 return: TOK_RETURN expr ';' .

    $default  reduce using rule 71 (return)


State 96

   11 struc: TOK_STRUCT TOK_IDENT '{' .

    $default  reduce using rule 11 (struc)


State 97

   73 allocation: TOK_STRING TOK_PARAM . expr ')'

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 47
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '('            shift, and go to state 20

    TOK_ARROW  reduce using rule 44 (binop)
    TOK_ARROW  [reduce using rule 57 (unop)]
    TOK_EQ     reduce using rule 44 (binop)
    TOK_EQ     [reduce using rule 57 (unop)]
    TOK_NE     reduce using rule 44 (binop)
    TOK_NE     [reduce using rule 57 (unop)]
    TOK_LT     reduce using rule 44 (binop)
    TOK_LT     [reduce using rule 57 (unop)]
    TOK_LE     reduce using rule 44 (binop)
    TOK_LE     [reduce using rule 57 (unop)]
    TOK_GT     reduce using rule 44 (binop)
    TOK_GT     [reduce using rule 57 (unop)]
    TOK_GE     reduce using rule 44 (binop)
    TOK_GE     [reduce using rule 57 (unop)]
    '+'        [reduce using rule 44 (binop)]
    '+'        [reduce using rule 57 (unop)]
    '-'        [reduce using rule 44 (binop)]
    '-'        [reduce using rule 57 (unop)]
    '*'        reduce using rule 44 (binop)
    '*'        [reduce using rule 57 (unop)]
    '/'        reduce using rule 44 (binop)
    '/'        [reduce using rule 57 (unop)]
    '%'        reduce using rule 44 (binop)
    '%'        [reduce using rule 57 (unop)]
    ')'        reduce using rule 44 (binop)
    ')'        [reduce using rule 57 (unop)]
    '='        reduce using rule 44 (binop)
    '='        [reduce using rule 57 (unop)]
    '['        reduce using rule 44 (binop)
    '['        [reduce using rule 57 (unop)]
    $default   reduce using rule 44 (binop)

    expr      go to state 129
    binop     go to state 32
    unop      go to state 33
    call      go to state 39
    funCall   go to state 40
    variable  go to state 41
    constant  go to state 42


State 98

   74 allocation: basetype '[' . expr ']'

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 47
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '('            shift, and go to state 20

    TOK_ARROW  reduce using rule 44 (binop)
    TOK_ARROW  [reduce using rule 57 (unop)]
    TOK_EQ     reduce using rule 44 (binop)
    TOK_EQ     [reduce using rule 57 (unop)]
    TOK_NE     reduce using rule 44 (binop)
    TOK_NE     [reduce using rule 57 (unop)]
    TOK_LT     reduce using rule 44 (binop)
    TOK_LT     [reduce using rule 57 (unop)]
    TOK_LE     reduce using rule 44 (binop)
    TOK_LE     [reduce using rule 57 (unop)]
    TOK_GT     reduce using rule 44 (binop)
    TOK_GT     [reduce using rule 57 (unop)]
    TOK_GE     reduce using rule 44 (binop)
    TOK_GE     [reduce using rule 57 (unop)]
    '+'        [reduce using rule 44 (binop)]
    '+'        [reduce using rule 57 (unop)]
    '-'        [reduce using rule 44 (binop)]
    '-'        [reduce using rule 57 (unop)]
    '*'        reduce using rule 44 (binop)
    '*'        [reduce using rule 57 (unop)]
    '/'        reduce using rule 44 (binop)
    '/'        [reduce using rule 57 (unop)]
    '%'        reduce using rule 44 (binop)
    '%'        [reduce using rule 57 (unop)]
    '='        reduce using rule 44 (binop)
    '='        [reduce using rule 57 (unop)]
    '['        reduce using rule 44 (binop)
    '['        [reduce using rule 57 (unop)]
    ']'        reduce using rule 44 (binop)
    ']'        [reduce using rule 57 (unop)]
    $default   reduce using rule 44 (binop)

    expr      go to state 130
    binop     go to state 32
    unop      go to state 33
    call      go to state 39
    funCall   go to state 40
    variable  go to state 41
    constant  go to state 42


State 99

   41 expr: '(' expr ')' .

    $default  reduce using rule 41 (expr)


State 100

   10 struc: struc fielddecl ';' .

    $default  reduce using rule 10 (struc)


State 101

   13 fielddecl: basetype TOK_ARRAY . TOK_IDENT

    TOK_IDENT  shift, and go to state 131


State 102

   12 fielddecl: basetype TOK_IDENT .

    $default  reduce using rule 12 (fielddecl)


State 103

   21 param: TOK_PARAM identdec .

    $default  reduce using rule 21 (param)


State 104

   34 localdecl: identdec . TOK_VARDECL expr ';'

    TOK_VARDECL  shift, and go to state 132


State 105

   28 fnbody: '{' localdecl .

    $default  reduce using rule 28 (fnbody)


State 106

   27 fnbody: '{' statement .

    $default  reduce using rule 27 (fnbody)


State 107

   20 param: param ',' . identdec

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_IDENT   shift, and go to state 60

    identdec  go to state 133
    basetype  go to state 29


State 108

   15 function: func fnbody '}' .

    $default  reduce using rule 15 (function)


State 109

   26 fnbody: fnbody localdecl .

    $default  reduce using rule 26 (fnbody)


State 110

   25 fnbody: fnbody statement .

    $default  reduce using rule 25 (fnbody)


State 111

   14 globaldecl: identdec TOK_VARDECL constant . ';'

    ';'  shift, and go to state 134


State 112

   23 identdec: basetype TOK_ARRAY TOK_IDENT .

    $default  reduce using rule 23 (identdec)


State 113

   81 variable: expr TOK_ARROW TOK_IDENT .

    $default  reduce using rule 81 (variable)


State 114

   45 binop: expr . '=' expr
   46      | expr . '+' expr
   47      | expr . '-' expr
   48      | expr . '*' expr
   49      | expr . '/' expr
   50      | expr . '%' expr
   51      | expr . TOK_EQ expr
   51      | expr TOK_EQ expr .
   52      | expr . TOK_NE expr
   53      | expr . TOK_LT expr
   54      | expr . TOK_LE expr
   55      | expr . TOK_GT expr
   56      | expr . TOK_GE expr
   80 variable: expr . '[' expr ']'
   81         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 73
    '+'        shift, and go to state 80
    '-'        shift, and go to state 81
    '*'        shift, and go to state 82
    '/'        shift, and go to state 83
    '%'        shift, and go to state 84
    '='        shift, and go to state 86
    '['        shift, and go to state 87

    '='       [reduce using rule 51 (binop)]
    '['       [reduce using rule 51 (binop)]
    $default  reduce using rule 51 (binop)


State 115

   45 binop: expr . '=' expr
   46      | expr . '+' expr
   47      | expr . '-' expr
   48      | expr . '*' expr
   49      | expr . '/' expr
   50      | expr . '%' expr
   51      | expr . TOK_EQ expr
   52      | expr . TOK_NE expr
   52      | expr TOK_NE expr .
   53      | expr . TOK_LT expr
   54      | expr . TOK_LE expr
   55      | expr . TOK_GT expr
   56      | expr . TOK_GE expr
   80 variable: expr . '[' expr ']'
   81         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 73
    '+'        shift, and go to state 80
    '-'        shift, and go to state 81
    '*'        shift, and go to state 82
    '/'        shift, and go to state 83
    '%'        shift, and go to state 84
    '='        shift, and go to state 86
    '['        shift, and go to state 87

    '='       [reduce using rule 52 (binop)]
    '['       [reduce using rule 52 (binop)]
    $default  reduce using rule 52 (binop)


State 116

   45 binop: expr . '=' expr
   46      | expr . '+' expr
   47      | expr . '-' expr
   48      | expr . '*' expr
   49      | expr . '/' expr
   50      | expr . '%' expr
   51      | expr . TOK_EQ expr
   52      | expr . TOK_NE expr
   53      | expr . TOK_LT expr
   53      | expr TOK_LT expr .
   54      | expr . TOK_LE expr
   55      | expr . TOK_GT expr
   56      | expr . TOK_GE expr
   80 variable: expr . '[' expr ']'
   81         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 73
    '+'        shift, and go to state 80
    '-'        shift, and go to state 81
    '*'        shift, and go to state 82
    '/'        shift, and go to state 83
    '%'        shift, and go to state 84
    '='        shift, and go to state 86
    '['        shift, and go to state 87

    '='       [reduce using rule 53 (binop)]
    '['       [reduce using rule 53 (binop)]
    $default  reduce using rule 53 (binop)


State 117

   45 binop: expr . '=' expr
   46      | expr . '+' expr
   47      | expr . '-' expr
   48      | expr . '*' expr
   49      | expr . '/' expr
   50      | expr . '%' expr
   51      | expr . TOK_EQ expr
   52      | expr . TOK_NE expr
   53      | expr . TOK_LT expr
   54      | expr . TOK_LE expr
   54      | expr TOK_LE expr .
   55      | expr . TOK_GT expr
   56      | expr . TOK_GE expr
   80 variable: expr . '[' expr ']'
   81         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 73
    '+'        shift, and go to state 80
    '-'        shift, and go to state 81
    '*'        shift, and go to state 82
    '/'        shift, and go to state 83
    '%'        shift, and go to state 84
    '='        shift, and go to state 86
    '['        shift, and go to state 87

    '='       [reduce using rule 54 (binop)]
    '['       [reduce using rule 54 (binop)]
    $default  reduce using rule 54 (binop)


State 118

   45 binop: expr . '=' expr
   46      | expr . '+' expr
   47      | expr . '-' expr
   48      | expr . '*' expr
   49      | expr . '/' expr
   50      | expr . '%' expr
   51      | expr . TOK_EQ expr
   52      | expr . TOK_NE expr
   53      | expr . TOK_LT expr
   54      | expr . TOK_LE expr
   55      | expr . TOK_GT expr
   55      | expr TOK_GT expr .
   56      | expr . TOK_GE expr
   80 variable: expr . '[' expr ']'
   81         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 73
    '+'        shift, and go to state 80
    '-'        shift, and go to state 81
    '*'        shift, and go to state 82
    '/'        shift, and go to state 83
    '%'        shift, and go to state 84
    '='        shift, and go to state 86
    '['        shift, and go to state 87

    '='       [reduce using rule 55 (binop)]
    '['       [reduce using rule 55 (binop)]
    $default  reduce using rule 55 (binop)


State 119

   45 binop: expr . '=' expr
   46      | expr . '+' expr
   47      | expr . '-' expr
   48      | expr . '*' expr
   49      | expr . '/' expr
   50      | expr . '%' expr
   51      | expr . TOK_EQ expr
   52      | expr . TOK_NE expr
   53      | expr . TOK_LT expr
   54      | expr . TOK_LE expr
   55      | expr . TOK_GT expr
   56      | expr . TOK_GE expr
   56      | expr TOK_GE expr .
   80 variable: expr . '[' expr ']'
   81         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 73
    '+'        shift, and go to state 80
    '-'        shift, and go to state 81
    '*'        shift, and go to state 82
    '/'        shift, and go to state 83
    '%'        shift, and go to state 84
    '='        shift, and go to state 86
    '['        shift, and go to state 87

    '='       [reduce using rule 56 (binop)]
    '['       [reduce using rule 56 (binop)]
    $default  reduce using rule 56 (binop)


State 120

   45 binop: expr . '=' expr
   46      | expr . '+' expr
   46      | expr '+' expr .
   47      | expr . '-' expr
   48      | expr . '*' expr
   49      | expr . '/' expr
   50      | expr . '%' expr
   51      | expr . TOK_EQ expr
   52      | expr . TOK_NE expr
   53      | expr . TOK_LT expr
   54      | expr . TOK_LE expr
   55      | expr . TOK_GT expr
   56      | expr . TOK_GE expr
   80 variable: expr . '[' expr ']'
   81         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 73
    '*'        shift, and go to state 82
    '/'        shift, and go to state 83
    '%'        shift, and go to state 84
    '='        shift, and go to state 86
    '['        shift, and go to state 87

    '='       [reduce using rule 46 (binop)]
    '['       [reduce using rule 46 (binop)]
    $default  reduce using rule 46 (binop)


State 121

   45 binop: expr . '=' expr
   46      | expr . '+' expr
   47      | expr . '-' expr
   47      | expr '-' expr .
   48      | expr . '*' expr
   49      | expr . '/' expr
   50      | expr . '%' expr
   51      | expr . TOK_EQ expr
   52      | expr . TOK_NE expr
   53      | expr . TOK_LT expr
   54      | expr . TOK_LE expr
   55      | expr . TOK_GT expr
   56      | expr . TOK_GE expr
   80 variable: expr . '[' expr ']'
   81         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 73
    '*'        shift, and go to state 82
    '/'        shift, and go to state 83
    '%'        shift, and go to state 84
    '='        shift, and go to state 86
    '['        shift, and go to state 87

    '='       [reduce using rule 47 (binop)]
    '['       [reduce using rule 47 (binop)]
    $default  reduce using rule 47 (binop)


State 122

   45 binop: expr . '=' expr
   46      | expr . '+' expr
   47      | expr . '-' expr
   48      | expr . '*' expr
   48      | expr '*' expr .
   49      | expr . '/' expr
   50      | expr . '%' expr
   51      | expr . TOK_EQ expr
   52      | expr . TOK_NE expr
   53      | expr . TOK_LT expr
   54      | expr . TOK_LE expr
   55      | expr . TOK_GT expr
   56      | expr . TOK_GE expr
   80 variable: expr . '[' expr ']'
   81         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 73
    '='        shift, and go to state 86
    '['        shift, and go to state 87

    '='       [reduce using rule 48 (binop)]
    '['       [reduce using rule 48 (binop)]
    $default  reduce using rule 48 (binop)


State 123

   45 binop: expr . '=' expr
   46      | expr . '+' expr
   47      | expr . '-' expr
   48      | expr . '*' expr
   49      | expr . '/' expr
   49      | expr '/' expr .
   50      | expr . '%' expr
   51      | expr . TOK_EQ expr
   52      | expr . TOK_NE expr
   53      | expr . TOK_LT expr
   54      | expr . TOK_LE expr
   55      | expr . TOK_GT expr
   56      | expr . TOK_GE expr
   80 variable: expr . '[' expr ']'
   81         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 73
    '='        shift, and go to state 86
    '['        shift, and go to state 87

    '='       [reduce using rule 49 (binop)]
    '['       [reduce using rule 49 (binop)]
    $default  reduce using rule 49 (binop)


State 124

   45 binop: expr . '=' expr
   46      | expr . '+' expr
   47      | expr . '-' expr
   48      | expr . '*' expr
   49      | expr . '/' expr
   50      | expr . '%' expr
   50      | expr '%' expr .
   51      | expr . TOK_EQ expr
   52      | expr . TOK_NE expr
   53      | expr . TOK_LT expr
   54      | expr . TOK_LE expr
   55      | expr . TOK_GT expr
   56      | expr . TOK_GE expr
   80 variable: expr . '[' expr ']'
   81         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 73
    '='        shift, and go to state 86
    '['        shift, and go to state 87

    '='       [reduce using rule 50 (binop)]
    '['       [reduce using rule 50 (binop)]
    $default  reduce using rule 50 (binop)


State 125

   45 binop: expr . '=' expr
   45      | expr '=' expr .
   46      | expr . '+' expr
   47      | expr . '-' expr
   48      | expr . '*' expr
   49      | expr . '/' expr
   50      | expr . '%' expr
   51      | expr . TOK_EQ expr
   52      | expr . TOK_NE expr
   53      | expr . TOK_LT expr
   54      | expr . TOK_LE expr
   55      | expr . TOK_GT expr
   56      | expr . TOK_GE expr
   80 variable: expr . '[' expr ']'
   81         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 73
    TOK_EQ     shift, and go to state 74
    TOK_NE     shift, and go to state 75
    TOK_LT     shift, and go to state 76
    TOK_LE     shift, and go to state 77
    TOK_GT     shift, and go to state 78
    TOK_GE     shift, and go to state 79
    '+'        shift, and go to state 80
    '-'        shift, and go to state 81
    '*'        shift, and go to state 82
    '/'        shift, and go to state 83
    '%'        shift, and go to state 84
    '='        shift, and go to state 86
    '['        shift, and go to state 87

    TOK_ARROW  [reduce using rule 45 (binop)]
    TOK_EQ     [reduce using rule 45 (binop)]
    TOK_NE     [reduce using rule 45 (binop)]
    TOK_LT     [reduce using rule 45 (binop)]
    TOK_LE     [reduce using rule 45 (binop)]
    TOK_GT     [reduce using rule 45 (binop)]
    TOK_GE     [reduce using rule 45 (binop)]
    '+'        [reduce using rule 45 (binop)]
    '-'        [reduce using rule 45 (binop)]
    '*'        [reduce using rule 45 (binop)]
    '/'        [reduce using rule 45 (binop)]
    '%'        [reduce using rule 45 (binop)]
    '='        [reduce using rule 45 (binop)]
    '['        [reduce using rule 45 (binop)]
    $default   reduce using rule 45 (binop)


State 126

   45 binop: expr . '=' expr
   46      | expr . '+' expr
   47      | expr . '-' expr
   48      | expr . '*' expr
   49      | expr . '/' expr
   50      | expr . '%' expr
   51      | expr . TOK_EQ expr
   52      | expr . TOK_NE expr
   53      | expr . TOK_LT expr
   54      | expr . TOK_LE expr
   55      | expr . TOK_GT expr
   56      | expr . TOK_GE expr
   80 variable: expr . '[' expr ']'
   80         | expr '[' expr . ']'
   81         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 73
    TOK_EQ     shift, and go to state 74
    TOK_NE     shift, and go to state 75
    TOK_LT     shift, and go to state 76
    TOK_LE     shift, and go to state 77
    TOK_GT     shift, and go to state 78
    TOK_GE     shift, and go to state 79
    '+'        shift, and go to state 80
    '-'        shift, and go to state 81
    '*'        shift, and go to state 82
    '/'        shift, and go to state 83
    '%'        shift, and go to state 84
    '='        shift, and go to state 86
    '['        shift, and go to state 87
    ']'        shift, and go to state 135


State 127

   35 ifelse: TOK_IF TOK_PARAM expr ')' . statement TOK_ELSE statement
   36       | TOK_IF TOK_PARAM expr ')' . statement TOK_IF

    TOK_IF         shift, and go to state 8
    TOK_WHILE      shift, and go to state 9
    TOK_RETURN     shift, and go to state 10
    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 47
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '('            shift, and go to state 20
    '{'            shift, and go to state 21
    ';'            shift, and go to state 22

    TOK_ARROW  reduce using rule 44 (binop)
    TOK_ARROW  [reduce using rule 57 (unop)]
    TOK_EQ     reduce using rule 44 (binop)
    TOK_EQ     [reduce using rule 57 (unop)]
    TOK_NE     reduce using rule 44 (binop)
    TOK_NE     [reduce using rule 57 (unop)]
    TOK_LT     reduce using rule 44 (binop)
    TOK_LT     [reduce using rule 57 (unop)]
    TOK_LE     reduce using rule 44 (binop)
    TOK_LE     [reduce using rule 57 (unop)]
    TOK_GT     reduce using rule 44 (binop)
    TOK_GT     [reduce using rule 57 (unop)]
    TOK_GE     reduce using rule 44 (binop)
    TOK_GE     [reduce using rule 57 (unop)]
    '+'        [reduce using rule 44 (binop)]
    '+'        [reduce using rule 57 (unop)]
    '-'        [reduce using rule 44 (binop)]
    '-'        [reduce using rule 57 (unop)]
    '*'        reduce using rule 44 (binop)
    '*'        [reduce using rule 57 (unop)]
    '/'        reduce using rule 44 (binop)
    '/'        [reduce using rule 57 (unop)]
    '%'        reduce using rule 44 (binop)
    '%'        [reduce using rule 57 (unop)]
    ';'        [reduce using rule 44 (binop)]
    ';'        [reduce using rule 57 (unop)]
    '='        reduce using rule 44 (binop)
    '='        [reduce using rule 57 (unop)]
    '['        reduce using rule 44 (binop)
    '['        [reduce using rule 57 (unop)]
    $default   reduce using rule 44 (binop)

    ifelse     go to state 30
    expr       go to state 31
    binop      go to state 32
    unop       go to state 33
    statement  go to state 136
    block      go to state 35
    blockHelp  go to state 36
    while      go to state 37
    return     go to state 38
    call       go to state 39
    funCall    go to state 40
    variable   go to state 41
    constant   go to state 42


State 128

   69 while: TOK_WHILE TOK_PARAM expr ')' . statement

    TOK_IF         shift, and go to state 8
    TOK_WHILE      shift, and go to state 9
    TOK_RETURN     shift, and go to state 10
    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 47
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '('            shift, and go to state 20
    '{'            shift, and go to state 21
    ';'            shift, and go to state 22

    TOK_ARROW  reduce using rule 44 (binop)
    TOK_ARROW  [reduce using rule 57 (unop)]
    TOK_EQ     reduce using rule 44 (binop)
    TOK_EQ     [reduce using rule 57 (unop)]
    TOK_NE     reduce using rule 44 (binop)
    TOK_NE     [reduce using rule 57 (unop)]
    TOK_LT     reduce using rule 44 (binop)
    TOK_LT     [reduce using rule 57 (unop)]
    TOK_LE     reduce using rule 44 (binop)
    TOK_LE     [reduce using rule 57 (unop)]
    TOK_GT     reduce using rule 44 (binop)
    TOK_GT     [reduce using rule 57 (unop)]
    TOK_GE     reduce using rule 44 (binop)
    TOK_GE     [reduce using rule 57 (unop)]
    '+'        [reduce using rule 44 (binop)]
    '+'        [reduce using rule 57 (unop)]
    '-'        [reduce using rule 44 (binop)]
    '-'        [reduce using rule 57 (unop)]
    '*'        reduce using rule 44 (binop)
    '*'        [reduce using rule 57 (unop)]
    '/'        reduce using rule 44 (binop)
    '/'        [reduce using rule 57 (unop)]
    '%'        reduce using rule 44 (binop)
    '%'        [reduce using rule 57 (unop)]
    ';'        [reduce using rule 44 (binop)]
    ';'        [reduce using rule 57 (unop)]
    '='        reduce using rule 44 (binop)
    '='        [reduce using rule 57 (unop)]
    '['        reduce using rule 44 (binop)
    '['        [reduce using rule 57 (unop)]
    $default   reduce using rule 44 (binop)

    ifelse     go to state 30
    expr       go to state 31
    binop      go to state 32
    unop       go to state 33
    statement  go to state 137
    block      go to state 35
    blockHelp  go to state 36
    while      go to state 37
    return     go to state 38
    call       go to state 39
    funCall    go to state 40
    variable   go to state 41
    constant   go to state 42


State 129

   45 binop: expr . '=' expr
   46      | expr . '+' expr
   47      | expr . '-' expr
   48      | expr . '*' expr
   49      | expr . '/' expr
   50      | expr . '%' expr
   51      | expr . TOK_EQ expr
   52      | expr . TOK_NE expr
   53      | expr . TOK_LT expr
   54      | expr . TOK_LE expr
   55      | expr . TOK_GT expr
   56      | expr . TOK_GE expr
   73 allocation: TOK_STRING TOK_PARAM expr . ')'
   80 variable: expr . '[' expr ']'
   81         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 73
    TOK_EQ     shift, and go to state 74
    TOK_NE     shift, and go to state 75
    TOK_LT     shift, and go to state 76
    TOK_LE     shift, and go to state 77
    TOK_GT     shift, and go to state 78
    TOK_GE     shift, and go to state 79
    '+'        shift, and go to state 80
    '-'        shift, and go to state 81
    '*'        shift, and go to state 82
    '/'        shift, and go to state 83
    '%'        shift, and go to state 84
    ')'        shift, and go to state 138
    '='        shift, and go to state 86
    '['        shift, and go to state 87


State 130

   45 binop: expr . '=' expr
   46      | expr . '+' expr
   47      | expr . '-' expr
   48      | expr . '*' expr
   49      | expr . '/' expr
   50      | expr . '%' expr
   51      | expr . TOK_EQ expr
   52      | expr . TOK_NE expr
   53      | expr . TOK_LT expr
   54      | expr . TOK_LE expr
   55      | expr . TOK_GT expr
   56      | expr . TOK_GE expr
   74 allocation: basetype '[' expr . ']'
   80 variable: expr . '[' expr ']'
   81         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 73
    TOK_EQ     shift, and go to state 74
    TOK_NE     shift, and go to state 75
    TOK_LT     shift, and go to state 76
    TOK_LE     shift, and go to state 77
    TOK_GT     shift, and go to state 78
    TOK_GE     shift, and go to state 79
    '+'        shift, and go to state 80
    '-'        shift, and go to state 81
    '*'        shift, and go to state 82
    '/'        shift, and go to state 83
    '%'        shift, and go to state 84
    '='        shift, and go to state 86
    '['        shift, and go to state 87
    ']'        shift, and go to state 139


State 131

   13 fielddecl: basetype TOK_ARRAY TOK_IDENT .

    $default  reduce using rule 13 (fielddecl)


State 132

   34 localdecl: identdec TOK_VARDECL . expr ';'

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 47
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '('            shift, and go to state 20

    TOK_ARROW  reduce using rule 44 (binop)
    TOK_ARROW  [reduce using rule 57 (unop)]
    TOK_EQ     reduce using rule 44 (binop)
    TOK_EQ     [reduce using rule 57 (unop)]
    TOK_NE     reduce using rule 44 (binop)
    TOK_NE     [reduce using rule 57 (unop)]
    TOK_LT     reduce using rule 44 (binop)
    TOK_LT     [reduce using rule 57 (unop)]
    TOK_LE     reduce using rule 44 (binop)
    TOK_LE     [reduce using rule 57 (unop)]
    TOK_GT     reduce using rule 44 (binop)
    TOK_GT     [reduce using rule 57 (unop)]
    TOK_GE     reduce using rule 44 (binop)
    TOK_GE     [reduce using rule 57 (unop)]
    '+'        [reduce using rule 44 (binop)]
    '+'        [reduce using rule 57 (unop)]
    '-'        [reduce using rule 44 (binop)]
    '-'        [reduce using rule 57 (unop)]
    '*'        reduce using rule 44 (binop)
    '*'        [reduce using rule 57 (unop)]
    '/'        reduce using rule 44 (binop)
    '/'        [reduce using rule 57 (unop)]
    '%'        reduce using rule 44 (binop)
    '%'        [reduce using rule 57 (unop)]
    ';'        reduce using rule 44 (binop)
    ';'        [reduce using rule 57 (unop)]
    '='        reduce using rule 44 (binop)
    '='        [reduce using rule 57 (unop)]
    '['        reduce using rule 44 (binop)
    '['        [reduce using rule 57 (unop)]
    $default   reduce using rule 44 (binop)

    expr      go to state 140
    binop     go to state 32
    unop      go to state 33
    call      go to state 39
    funCall   go to state 40
    variable  go to state 41
    constant  go to state 42


State 133

   20 param: param ',' identdec .

    $default  reduce using rule 20 (param)


State 134

   14 globaldecl: identdec TOK_VARDECL constant ';' .

    $default  reduce using rule 14 (globaldecl)


State 135

   80 variable: expr '[' expr ']' .

    $default  reduce using rule 80 (variable)


State 136

   35 ifelse: TOK_IF TOK_PARAM expr ')' statement . TOK_ELSE statement
   36       | TOK_IF TOK_PARAM expr ')' statement . TOK_IF

    TOK_IF    shift, and go to state 141
    TOK_ELSE  shift, and go to state 142


State 137

   69 while: TOK_WHILE TOK_PARAM expr ')' statement .

    $default  reduce using rule 69 (while)


State 138

   73 allocation: TOK_STRING TOK_PARAM expr ')' .

    $default  reduce using rule 73 (allocation)


State 139

   74 allocation: basetype '[' expr ']' .

    $default  reduce using rule 74 (allocation)


State 140

   34 localdecl: identdec TOK_VARDECL expr . ';'
   45 binop: expr . '=' expr
   46      | expr . '+' expr
   47      | expr . '-' expr
   48      | expr . '*' expr
   49      | expr . '/' expr
   50      | expr . '%' expr
   51      | expr . TOK_EQ expr
   52      | expr . TOK_NE expr
   53      | expr . TOK_LT expr
   54      | expr . TOK_LE expr
   55      | expr . TOK_GT expr
   56      | expr . TOK_GE expr
   80 variable: expr . '[' expr ']'
   81         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 73
    TOK_EQ     shift, and go to state 74
    TOK_NE     shift, and go to state 75
    TOK_LT     shift, and go to state 76
    TOK_LE     shift, and go to state 77
    TOK_GT     shift, and go to state 78
    TOK_GE     shift, and go to state 79
    '+'        shift, and go to state 80
    '-'        shift, and go to state 81
    '*'        shift, and go to state 82
    '/'        shift, and go to state 83
    '%'        shift, and go to state 84
    ';'        shift, and go to state 143
    '='        shift, and go to state 86
    '['        shift, and go to state 87


State 141

   36 ifelse: TOK_IF TOK_PARAM expr ')' statement TOK_IF .

    $default  reduce using rule 36 (ifelse)


State 142

   35 ifelse: TOK_IF TOK_PARAM expr ')' statement TOK_ELSE . statement

    TOK_IF         shift, and go to state 8
    TOK_WHILE      shift, and go to state 9
    TOK_RETURN     shift, and go to state 10
    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 47
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '('            shift, and go to state 20
    '{'            shift, and go to state 21
    ';'            shift, and go to state 22

    TOK_ARROW  reduce using rule 44 (binop)
    TOK_ARROW  [reduce using rule 57 (unop)]
    TOK_EQ     reduce using rule 44 (binop)
    TOK_EQ     [reduce using rule 57 (unop)]
    TOK_NE     reduce using rule 44 (binop)
    TOK_NE     [reduce using rule 57 (unop)]
    TOK_LT     reduce using rule 44 (binop)
    TOK_LT     [reduce using rule 57 (unop)]
    TOK_LE     reduce using rule 44 (binop)
    TOK_LE     [reduce using rule 57 (unop)]
    TOK_GT     reduce using rule 44 (binop)
    TOK_GT     [reduce using rule 57 (unop)]
    TOK_GE     reduce using rule 44 (binop)
    TOK_GE     [reduce using rule 57 (unop)]
    '+'        [reduce using rule 44 (binop)]
    '+'        [reduce using rule 57 (unop)]
    '-'        [reduce using rule 44 (binop)]
    '-'        [reduce using rule 57 (unop)]
    '*'        reduce using rule 44 (binop)
    '*'        [reduce using rule 57 (unop)]
    '/'        reduce using rule 44 (binop)
    '/'        [reduce using rule 57 (unop)]
    '%'        reduce using rule 44 (binop)
    '%'        [reduce using rule 57 (unop)]
    ';'        [reduce using rule 44 (binop)]
    ';'        [reduce using rule 57 (unop)]
    '='        reduce using rule 44 (binop)
    '='        [reduce using rule 57 (unop)]
    '['        reduce using rule 44 (binop)
    '['        [reduce using rule 57 (unop)]
    $default   reduce using rule 44 (binop)

    ifelse     go to state 30
    expr       go to state 31
    binop      go to state 32
    unop       go to state 33
    statement  go to state 144
    block      go to state 35
    blockHelp  go to state 36
    while      go to state 37
    return     go to state 38
    call       go to state 39
    funCall    go to state 40
    variable   go to state 41
    constant   go to state 42


State 143

   34 localdecl: identdec TOK_VARDECL expr ';' .

    $default  reduce using rule 34 (localdecl)


State 144

   35 ifelse: TOK_IF TOK_PARAM expr ')' statement TOK_ELSE statement .

    $default  reduce using rule 35 (ifelse)

Nonterminals useless in grammar

   identList
   return


Terminals unused in grammar

   TOK_CHAR
   TOK_RETURN
   TOK_BR
   TOK_NOT
   TOK_ROOT
   TOK_BLOCK
   TOK_CALL
   TOK_IFELSE
   TOK_INITDECL
   TOK_NEWARRAY
   TOK_TYPEID
   TOK_FIELD
   TOK_NEWSTR
   TOK_FUNCTION
   TOK_DECLID


Rules useless in grammar

   77 identList: identList ',' identdec
   78          | identdec

   79 return: TOK_RETURN ';'
   80       | TOK_RETURN expr ';'


Rules useless in parser due to conflicts

   30 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE statement

   52 unop: %empty


State 22 conflicts: 16 shift/reduce, 15 reduce/reduce
State 24 conflicts: 3 shift/reduce, 15 reduce/reduce
State 41 conflicts: 2 shift/reduce, 18 reduce/reduce
State 42 conflicts: 2 shift/reduce, 18 reduce/reduce
State 43 conflicts: 2 shift/reduce, 15 reduce/reduce
State 45 conflicts: 3 shift/reduce, 15 reduce/reduce
State 54 conflicts: 3 shift/reduce, 15 reduce/reduce
State 66 conflicts: 2 shift/reduce, 15 reduce/reduce
State 67 conflicts: 2 shift/reduce, 15 reduce/reduce
State 69 conflicts: 1 reduce/reduce
State 72 conflicts: 2 shift/reduce, 16 reduce/reduce
State 74 conflicts: 2 shift/reduce
State 75 conflicts: 2 shift/reduce
State 78 conflicts: 2 shift/reduce, 15 reduce/reduce
State 80 conflicts: 2 shift/reduce, 18 reduce/reduce
State 81 conflicts: 2 shift/reduce, 18 reduce/reduce
State 82 conflicts: 2 shift/reduce, 18 reduce/reduce
State 83 conflicts: 2 shift/reduce, 18 reduce/reduce
State 84 conflicts: 2 shift/reduce, 18 reduce/reduce
State 85 conflicts: 2 shift/reduce, 18 reduce/reduce
State 86 conflicts: 2 shift/reduce, 18 reduce/reduce
State 87 conflicts: 2 shift/reduce, 18 reduce/reduce
State 88 conflicts: 2 shift/reduce, 18 reduce/reduce
State 89 conflicts: 2 shift/reduce, 18 reduce/reduce
State 90 conflicts: 2 shift/reduce, 18 reduce/reduce
State 92 conflicts: 2 shift/reduce, 18 reduce/reduce
State 93 conflicts: 2 shift/reduce, 15 reduce/reduce
State 100 conflicts: 2 shift/reduce, 15 reduce/reduce
State 101 conflicts: 2 shift/reduce, 15 reduce/reduce
State 107 conflicts: 2 shift/reduce
State 108 conflicts: 2 shift/reduce
State 109 conflicts: 2 shift/reduce
State 110 conflicts: 2 shift/reduce
State 111 conflicts: 2 shift/reduce
State 112 conflicts: 2 shift/reduce
State 113 conflicts: 2 shift/reduce
State 114 conflicts: 2 shift/reduce
State 115 conflicts: 2 shift/reduce
State 116 conflicts: 2 shift/reduce
State 117 conflicts: 2 shift/reduce
State 118 conflicts: 14 shift/reduce
State 120 conflicts: 3 shift/reduce, 15 reduce/reduce
State 121 conflicts: 3 shift/reduce, 15 reduce/reduce
State 125 conflicts: 2 shift/reduce, 16 reduce/reduce


Grammar

    0 $accept: start $end

    1 start: program

    2 program: program structdef
    3        | program globaldecl
    4        | program function
    5        | %empty

    6 structdef: struc '}'

    7 struc: struc fielddecl ';'
    8      | TOK_STRUCT TOK_IDENT '{'

    9 fielddecl: basetype TOK_IDENT
   10          | basetype TOK_ARRAY TOK_IDENT

   11 globaldecl: identdec TOK_VARDECL constant ';'

   12 function: func fnbody '}'

   13 func: func ')'
   14     | func param
   15     | identdec

   16 param: param ',' identdec
   17      | TOK_PARAM identdec

   18 identdec: basetype TOK_ARRAY TOK_IDENT
   19         | basetype TOK_IDENT

   20 fnbody: fnbody statement
   21       | fnbody localdecl
   22       | '{' statement
   23       | '{' localdecl
   24       | '{'

   25 basetype: TOK_VOID
   26         | TOK_INT
   27         | TOK_STRING
   28         | TOK_IDENT

   29 localdecl: identdec TOK_VARDECL expr ';'

   30 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE statement
   31       | TOK_IF '(' expr ')' statement

   32 expr: TOK_NEW allocation
   33     | binop
   34     | unop
   35     | call
   36     | '(' expr ')'
   37     | variable
   38     | constant

   39 binop: %empty
   40      | expr '=' expr
   41      | expr '+' expr
   42      | expr '-' expr
   43      | expr '*' expr
   44      | expr '/' expr
   45      | expr '%' expr
   46      | expr TOK_EQ expr
   47      | expr TOK_NE expr
   48      | expr TOK_LT expr
   49      | expr TOK_LE expr
   50      | expr TOK_GT expr
   51      | expr TOK_GE expr

   52 unop: %empty
   53     | '+' expr
   54     | '-' expr

   55 statement: block
   56          | while
   57          | ifelse
   58          | expr ';'
   59          | ';'

   60 block: blockHelp '}'

   61 blockHelp: blockHelp statement
   62          | '{' statement

   63 while: TOK_WHILE '(' expr ')' statement

   64 allocation: TOK_IDENT
   65           | TOK_STRING '(' expr ')'
   66           | basetype '[' expr ']'

   67 exprList: exprList ',' expr
   68         | expr

   69 call: TOK_IDENT '(' exprList ')'

   70 variable: TOK_IDENT
   71         | expr '[' expr ']'
   72         | expr TOK_ARROW TOK_IDENT

   73 constant: TOK_INTCON
   74         | TOK_STRINGCON
   75         | TOK_CHARCON
   76         | TOK_NULL


Terminals, with rules where they appear

$end (0) 0
'%' (37) 45
'(' (40) 30 31 36 63 65 69
')' (41) 13 30 31 36 63 65 69
'*' (42) 43
'+' (43) 41 53
',' (44) 16 67
'-' (45) 42 54
'/' (47) 44
';' (59) 7 11 29 58 59
'=' (61) 40
'[' (91) 66 71
']' (93) 66 71
'{' (123) 8 22 23 24 62
'}' (125) 6 12 60
error (256)
TOK_VOID (258) 25
TOK_CHAR (259)
TOK_INT (260) 26
TOK_STRING (261) 27 65
TOK_IF (262) 30 31
TOK_ELSE (263) 30
TOK_WHILE (264) 63
TOK_RETURN (265)
TOK_STRUCT (266) 8
TOK_NULL (267) 76
TOK_NEW (268) 32
TOK_VARDECL (269) 11 29
TOK_ARRAY (270) 10 18
TOK_ARROW (271) 72
TOK_BR (272)
TOK_EQ (273) 46
TOK_NE (274) 47
TOK_LT (275) 48
TOK_LE (276) 49
TOK_GT (277) 50
TOK_GE (278) 51
TOK_NOT (279)
TOK_IDENT (280) 8 9 10 18 19 28 64 69 70 72
TOK_INTCON (281) 73
TOK_CHARCON (282) 75
TOK_STRINGCON (283) 74
TOK_ROOT (284)
TOK_BLOCK (285)
TOK_CALL (286)
TOK_IFELSE (287)
TOK_INITDECL (288)
TOK_POS (289)
TOK_NEG (290)
TOK_NEWARRAY (291)
TOK_TYPEID (292)
TOK_FIELD (293)
TOK_NEWSTR (294)
TOK_PARAM (295) 17
TOK_FUNCTION (296)
TOK_DECLID (297)


Nonterminals, with rules where they appear

$accept (57)
    on left: 0
start (58)
    on left: 1, on right: 0
program (59)
    on left: 2 3 4 5, on right: 1 2 3 4
structdef (60)
    on left: 6, on right: 2
struc (61)
    on left: 7 8, on right: 6 7
fielddecl (62)
    on left: 9 10, on right: 7
globaldecl (63)
    on left: 11, on right: 3
function (64)
    on left: 12, on right: 4
func (65)
    on left: 13 14 15, on right: 12 13 14
param (66)
    on left: 16 17, on right: 14 16
identdec (67)
    on left: 18 19, on right: 11 15 16 17 29
fnbody (68)
    on left: 20 21 22 23 24, on right: 12 20 21
basetype (69)
    on left: 25 26 27 28, on right: 9 10 18 19 66
localdecl (70)
    on left: 29, on right: 21 23
ifelse (71)
    on left: 30 31, on right: 57
expr (72)
    on left: 32 33 34 35 36 37 38, on right: 29 30 31 36 40 41 42 43
    44 45 46 47 48 49 50 51 53 54 58 63 65 66 67 68 71 72
binop (73)
    on left: 39 40 41 42 43 44 45 46 47 48 49 50 51, on right: 33
unop (74)
    on left: 52 53 54, on right: 34
statement (75)
    on left: 55 56 57 58 59, on right: 20 22 30 31 61 62 63
block (76)
    on left: 60, on right: 55
blockHelp (77)
    on left: 61 62, on right: 60 61
while (78)
    on left: 63, on right: 56
allocation (79)
    on left: 64 65 66, on right: 32
exprList (80)
    on left: 67 68, on right: 67 69
call (81)
    on left: 69, on right: 35
variable (82)
    on left: 70 71 72, on right: 37
constant (83)
    on left: 73 74 75 76, on right: 11 38


State 0

    0 $accept: . start $end

    $default  reduce using rule 5 (program)

    start    go to state 1
    program  go to state 2


State 1

    0 $accept: start . $end

    $end  shift, and go to state 3


State 2

    1 start: program .
    2 program: program . structdef
    3        | program . globaldecl
    4        | program . function

    TOK_VOID    shift, and go to state 4
    TOK_INT     shift, and go to state 5
    TOK_STRING  shift, and go to state 6
    TOK_STRUCT  shift, and go to state 7
    TOK_IDENT   shift, and go to state 8

    $default  reduce using rule 1 (start)

    structdef   go to state 9
    struc       go to state 10
    globaldecl  go to state 11
    function    go to state 12
    func        go to state 13
    identdec    go to state 14
    basetype    go to state 15


State 3

    0 $accept: start $end .

    $default  accept


State 4

   25 basetype: TOK_VOID .

    $default  reduce using rule 25 (basetype)


State 5

   26 basetype: TOK_INT .

    $default  reduce using rule 26 (basetype)


State 6

   27 basetype: TOK_STRING .

    $default  reduce using rule 27 (basetype)


State 7

    8 struc: TOK_STRUCT . TOK_IDENT '{'

    TOK_IDENT  shift, and go to state 16


State 8

   28 basetype: TOK_IDENT .

    $default  reduce using rule 28 (basetype)


State 9

    2 program: program structdef .

    $default  reduce using rule 2 (program)


State 10

    6 structdef: struc . '}'
    7 struc: struc . fielddecl ';'

    TOK_VOID    shift, and go to state 4
    TOK_INT     shift, and go to state 5
    TOK_STRING  shift, and go to state 6
    TOK_IDENT   shift, and go to state 8
    '}'         shift, and go to state 17

    fielddecl  go to state 18
    basetype   go to state 19


State 11

    3 program: program globaldecl .

    $default  reduce using rule 3 (program)


State 12

    4 program: program function .

    $default  reduce using rule 4 (program)


State 13

   12 function: func . fnbody '}'
   13 func: func . ')'
   14     | func . param

    TOK_PARAM  shift, and go to state 20
    ')'        shift, and go to state 21
    '{'        shift, and go to state 22

    param   go to state 23
    fnbody  go to state 24


State 14

   11 globaldecl: identdec . TOK_VARDECL constant ';'
   15 func: identdec .

    TOK_VARDECL  shift, and go to state 25

    $default  reduce using rule 15 (func)


State 15

   18 identdec: basetype . TOK_ARRAY TOK_IDENT
   19         | basetype . TOK_IDENT

    TOK_ARRAY  shift, and go to state 26
    TOK_IDENT  shift, and go to state 27


State 16

    8 struc: TOK_STRUCT TOK_IDENT . '{'

    '{'  shift, and go to state 28


State 17

    6 structdef: struc '}' .

    $default  reduce using rule 6 (structdef)


State 18

    7 struc: struc fielddecl . ';'

    ';'  shift, and go to state 29


State 19

    9 fielddecl: basetype . TOK_IDENT
   10          | basetype . TOK_ARRAY TOK_IDENT

    TOK_ARRAY  shift, and go to state 30
    TOK_IDENT  shift, and go to state 31


State 20

   17 param: TOK_PARAM . identdec

    TOK_VOID    shift, and go to state 4
    TOK_INT     shift, and go to state 5
    TOK_STRING  shift, and go to state 6
    TOK_IDENT   shift, and go to state 8

    identdec  go to state 32
    basetype  go to state 15


State 21

   13 func: func ')' .

    $default  reduce using rule 13 (func)


State 22

   22 fnbody: '{' . statement
   23       | '{' . localdecl
   24       | '{' .

    TOK_VOID       shift, and go to state 4
    TOK_INT        shift, and go to state 5
    TOK_STRING     shift, and go to state 6
    TOK_IF         shift, and go to state 33
    TOK_WHILE      shift, and go to state 34
    TOK_NULL       shift, and go to state 35
    TOK_NEW        shift, and go to state 36
    TOK_IDENT      shift, and go to state 37
    TOK_INTCON     shift, and go to state 38
    TOK_CHARCON    shift, and go to state 39
    TOK_STRINGCON  shift, and go to state 40
    '+'            shift, and go to state 41
    '-'            shift, and go to state 42
    '('            shift, and go to state 43
    ';'            shift, and go to state 44
    '{'            shift, and go to state 45

    TOK_VOID       [reduce using rule 24 (fnbody)]
    TOK_INT        [reduce using rule 24 (fnbody)]
    TOK_STRING     [reduce using rule 24 (fnbody)]
    TOK_IF         [reduce using rule 24 (fnbody)]
    TOK_WHILE      [reduce using rule 24 (fnbody)]
    TOK_NULL       [reduce using rule 24 (fnbody)]
    TOK_NEW        [reduce using rule 24 (fnbody)]
    TOK_ARROW      reduce using rule 24 (fnbody)
    TOK_ARROW      [reduce using rule 39 (binop)]
    TOK_ARROW      [reduce using rule 52 (unop)]
    TOK_EQ         reduce using rule 24 (fnbody)
    TOK_EQ         [reduce using rule 39 (binop)]
    TOK_EQ         [reduce using rule 52 (unop)]
    TOK_NE         reduce using rule 24 (fnbody)
    TOK_NE         [reduce using rule 39 (binop)]
    TOK_NE         [reduce using rule 52 (unop)]
    TOK_LT         reduce using rule 24 (fnbody)
    TOK_LT         [reduce using rule 39 (binop)]
    TOK_LT         [reduce using rule 52 (unop)]
    TOK_LE         reduce using rule 24 (fnbody)
    TOK_LE         [reduce using rule 39 (binop)]
    TOK_LE         [reduce using rule 52 (unop)]
    TOK_GT         reduce using rule 24 (fnbody)
    TOK_GT         [reduce using rule 39 (binop)]
    TOK_GT         [reduce using rule 52 (unop)]
    TOK_GE         reduce using rule 24 (fnbody)
    TOK_GE         [reduce using rule 39 (binop)]
    TOK_GE         [reduce using rule 52 (unop)]
    TOK_IDENT      [reduce using rule 24 (fnbody)]
    TOK_INTCON     [reduce using rule 24 (fnbody)]
    TOK_CHARCON    [reduce using rule 24 (fnbody)]
    TOK_STRINGCON  [reduce using rule 24 (fnbody)]
    '+'            [reduce using rule 24 (fnbody)]
    '+'            [reduce using rule 39 (binop)]
    '+'            [reduce using rule 52 (unop)]
    '-'            [reduce using rule 24 (fnbody)]
    '-'            [reduce using rule 39 (binop)]
    '-'            [reduce using rule 52 (unop)]
    '*'            reduce using rule 24 (fnbody)
    '*'            [reduce using rule 39 (binop)]
    '*'            [reduce using rule 52 (unop)]
    '/'            reduce using rule 24 (fnbody)
    '/'            [reduce using rule 39 (binop)]
    '/'            [reduce using rule 52 (unop)]
    '%'            reduce using rule 24 (fnbody)
    '%'            [reduce using rule 39 (binop)]
    '%'            [reduce using rule 52 (unop)]
    '('            [reduce using rule 24 (fnbody)]
    ';'            [reduce using rule 24 (fnbody)]
    ';'            [reduce using rule 39 (binop)]
    ';'            [reduce using rule 52 (unop)]
    '{'            [reduce using rule 24 (fnbody)]
    '='            reduce using rule 24 (fnbody)
    '='            [reduce using rule 39 (binop)]
    '='            [reduce using rule 52 (unop)]
    '['            reduce using rule 24 (fnbody)
    '['            [reduce using rule 39 (binop)]
    '['            [reduce using rule 52 (unop)]
    $default       reduce using rule 24 (fnbody)

    identdec   go to state 46
    basetype   go to state 15
    localdecl  go to state 47
    ifelse     go to state 48
    expr       go to state 49
    binop      go to state 50
    unop       go to state 51
    statement  go to state 52
    block      go to state 53
    blockHelp  go to state 54
    while      go to state 55
    call       go to state 56
    variable   go to state 57
    constant   go to state 58


State 23

   14 func: func param .
   16 param: param . ',' identdec

    ','  shift, and go to state 59

    $default  reduce using rule 14 (func)


State 24

   12 function: func fnbody . '}'
   20 fnbody: fnbody . statement
   21       | fnbody . localdecl

    TOK_VOID       shift, and go to state 4
    TOK_INT        shift, and go to state 5
    TOK_STRING     shift, and go to state 6
    TOK_IF         shift, and go to state 33
    TOK_WHILE      shift, and go to state 34
    TOK_NULL       shift, and go to state 35
    TOK_NEW        shift, and go to state 36
    TOK_IDENT      shift, and go to state 37
    TOK_INTCON     shift, and go to state 38
    TOK_CHARCON    shift, and go to state 39
    TOK_STRINGCON  shift, and go to state 40
    '+'            shift, and go to state 41
    '-'            shift, and go to state 42
    '('            shift, and go to state 43
    '}'            shift, and go to state 60
    ';'            shift, and go to state 44
    '{'            shift, and go to state 45

    TOK_ARROW  reduce using rule 39 (binop)
    TOK_ARROW  [reduce using rule 52 (unop)]
    TOK_EQ     reduce using rule 39 (binop)
    TOK_EQ     [reduce using rule 52 (unop)]
    TOK_NE     reduce using rule 39 (binop)
    TOK_NE     [reduce using rule 52 (unop)]
    TOK_LT     reduce using rule 39 (binop)
    TOK_LT     [reduce using rule 52 (unop)]
    TOK_LE     reduce using rule 39 (binop)
    TOK_LE     [reduce using rule 52 (unop)]
    TOK_GT     reduce using rule 39 (binop)
    TOK_GT     [reduce using rule 52 (unop)]
    TOK_GE     reduce using rule 39 (binop)
    TOK_GE     [reduce using rule 52 (unop)]
    '+'        [reduce using rule 39 (binop)]
    '+'        [reduce using rule 52 (unop)]
    '-'        [reduce using rule 39 (binop)]
    '-'        [reduce using rule 52 (unop)]
    '*'        reduce using rule 39 (binop)
    '*'        [reduce using rule 52 (unop)]
    '/'        reduce using rule 39 (binop)
    '/'        [reduce using rule 52 (unop)]
    '%'        reduce using rule 39 (binop)
    '%'        [reduce using rule 52 (unop)]
    ';'        [reduce using rule 39 (binop)]
    ';'        [reduce using rule 52 (unop)]
    '='        reduce using rule 39 (binop)
    '='        [reduce using rule 52 (unop)]
    '['        reduce using rule 39 (binop)
    '['        [reduce using rule 52 (unop)]
    $default   reduce using rule 39 (binop)

    identdec   go to state 46
    basetype   go to state 15
    localdecl  go to state 61
    ifelse     go to state 48
    expr       go to state 49
    binop      go to state 50
    unop       go to state 51
    statement  go to state 62
    block      go to state 53
    blockHelp  go to state 54
    while      go to state 55
    call       go to state 56
    variable   go to state 57
    constant   go to state 58


State 25

   11 globaldecl: identdec TOK_VARDECL . constant ';'

    TOK_NULL       shift, and go to state 35
    TOK_INTCON     shift, and go to state 38
    TOK_CHARCON    shift, and go to state 39
    TOK_STRINGCON  shift, and go to state 40

    constant  go to state 63


State 26

   18 identdec: basetype TOK_ARRAY . TOK_IDENT

    TOK_IDENT  shift, and go to state 64


State 27

   19 identdec: basetype TOK_IDENT .

    $default  reduce using rule 19 (identdec)


State 28

    8 struc: TOK_STRUCT TOK_IDENT '{' .

    $default  reduce using rule 8 (struc)


State 29

    7 struc: struc fielddecl ';' .

    $default  reduce using rule 7 (struc)


State 30

   10 fielddecl: basetype TOK_ARRAY . TOK_IDENT

    TOK_IDENT  shift, and go to state 65


State 31

    9 fielddecl: basetype TOK_IDENT .

    $default  reduce using rule 9 (fielddecl)


State 32

   17 param: TOK_PARAM identdec .

    $default  reduce using rule 17 (param)


State 33

   30 ifelse: TOK_IF . '(' expr ')' statement TOK_ELSE statement
   31       | TOK_IF . '(' expr ')' statement

    '('  shift, and go to state 66


State 34

   63 while: TOK_WHILE . '(' expr ')' statement

    '('  shift, and go to state 67


State 35

   76 constant: TOK_NULL .

    $default  reduce using rule 76 (constant)


State 36

   32 expr: TOK_NEW . allocation

    TOK_VOID    shift, and go to state 4
    TOK_INT     shift, and go to state 5
    TOK_STRING  shift, and go to state 68
    TOK_IDENT   shift, and go to state 69

    basetype    go to state 70
    allocation  go to state 71


State 37

   28 basetype: TOK_IDENT .
   69 call: TOK_IDENT . '(' exprList ')'
   70 variable: TOK_IDENT .

    '('  shift, and go to state 72

    TOK_ARRAY  reduce using rule 28 (basetype)
    TOK_IDENT  reduce using rule 28 (basetype)
    $default   reduce using rule 70 (variable)


State 38

   73 constant: TOK_INTCON .

    $default  reduce using rule 73 (constant)


State 39

   75 constant: TOK_CHARCON .

    $default  reduce using rule 75 (constant)


State 40

   74 constant: TOK_STRINGCON .

    $default  reduce using rule 74 (constant)


State 41

   53 unop: '+' . expr

    TOK_NULL       shift, and go to state 35
    TOK_NEW        shift, and go to state 36
    TOK_IDENT      shift, and go to state 73
    TOK_INTCON     shift, and go to state 38
    TOK_CHARCON    shift, and go to state 39
    TOK_STRINGCON  shift, and go to state 40
    '+'            shift, and go to state 41
    '-'            shift, and go to state 42
    '('            shift, and go to state 43

    TOK_ARROW  reduce using rule 39 (binop)
    TOK_ARROW  [reduce using rule 52 (unop)]
    TOK_EQ     reduce using rule 39 (binop)
    TOK_EQ     [reduce using rule 52 (unop)]
    TOK_NE     reduce using rule 39 (binop)
    TOK_NE     [reduce using rule 52 (unop)]
    TOK_LT     reduce using rule 39 (binop)
    TOK_LT     [reduce using rule 52 (unop)]
    TOK_LE     reduce using rule 39 (binop)
    TOK_LE     [reduce using rule 52 (unop)]
    TOK_GT     reduce using rule 39 (binop)
    TOK_GT     [reduce using rule 52 (unop)]
    TOK_GE     reduce using rule 39 (binop)
    TOK_GE     [reduce using rule 52 (unop)]
    '+'        [reduce using rule 39 (binop)]
    '+'        [reduce using rule 52 (unop)]
    '-'        [reduce using rule 39 (binop)]
    '-'        [reduce using rule 52 (unop)]
    '*'        reduce using rule 39 (binop)
    '*'        [reduce using rule 52 (unop)]
    '/'        reduce using rule 39 (binop)
    '/'        [reduce using rule 52 (unop)]
    '%'        reduce using rule 39 (binop)
    '%'        [reduce using rule 52 (unop)]
    ')'        reduce using rule 39 (binop)
    ')'        [reduce using rule 52 (unop)]
    ';'        reduce using rule 39 (binop)
    ';'        [reduce using rule 52 (unop)]
    ','        reduce using rule 39 (binop)
    ','        [reduce using rule 52 (unop)]
    '='        reduce using rule 39 (binop)
    '='        [reduce using rule 52 (unop)]
    '['        reduce using rule 39 (binop)
    '['        [reduce using rule 52 (unop)]
    ']'        reduce using rule 39 (binop)
    ']'        [reduce using rule 52 (unop)]
    $default   reduce using rule 39 (binop)

    expr      go to state 74
    binop     go to state 50
    unop      go to state 51
    call      go to state 56
    variable  go to state 57
    constant  go to state 58


State 42

   54 unop: '-' . expr

    TOK_NULL       shift, and go to state 35
    TOK_NEW        shift, and go to state 36
    TOK_IDENT      shift, and go to state 73
    TOK_INTCON     shift, and go to state 38
    TOK_CHARCON    shift, and go to state 39
    TOK_STRINGCON  shift, and go to state 40
    '+'            shift, and go to state 41
    '-'            shift, and go to state 42
    '('            shift, and go to state 43

    TOK_ARROW  reduce using rule 39 (binop)
    TOK_ARROW  [reduce using rule 52 (unop)]
    TOK_EQ     reduce using rule 39 (binop)
    TOK_EQ     [reduce using rule 52 (unop)]
    TOK_NE     reduce using rule 39 (binop)
    TOK_NE     [reduce using rule 52 (unop)]
    TOK_LT     reduce using rule 39 (binop)
    TOK_LT     [reduce using rule 52 (unop)]
    TOK_LE     reduce using rule 39 (binop)
    TOK_LE     [reduce using rule 52 (unop)]
    TOK_GT     reduce using rule 39 (binop)
    TOK_GT     [reduce using rule 52 (unop)]
    TOK_GE     reduce using rule 39 (binop)
    TOK_GE     [reduce using rule 52 (unop)]
    '+'        [reduce using rule 39 (binop)]
    '+'        [reduce using rule 52 (unop)]
    '-'        [reduce using rule 39 (binop)]
    '-'        [reduce using rule 52 (unop)]
    '*'        reduce using rule 39 (binop)
    '*'        [reduce using rule 52 (unop)]
    '/'        reduce using rule 39 (binop)
    '/'        [reduce using rule 52 (unop)]
    '%'        reduce using rule 39 (binop)
    '%'        [reduce using rule 52 (unop)]
    ')'        reduce using rule 39 (binop)
    ')'        [reduce using rule 52 (unop)]
    ';'        reduce using rule 39 (binop)
    ';'        [reduce using rule 52 (unop)]
    ','        reduce using rule 39 (binop)
    ','        [reduce using rule 52 (unop)]
    '='        reduce using rule 39 (binop)
    '='        [reduce using rule 52 (unop)]
    '['        reduce using rule 39 (binop)
    '['        [reduce using rule 52 (unop)]
    ']'        reduce using rule 39 (binop)
    ']'        [reduce using rule 52 (unop)]
    $default   reduce using rule 39 (binop)

    expr      go to state 75
    binop     go to state 50
    unop      go to state 51
    call      go to state 56
    variable  go to state 57
    constant  go to state 58


State 43

   36 expr: '(' . expr ')'

    TOK_NULL       shift, and go to state 35
    TOK_NEW        shift, and go to state 36
    TOK_IDENT      shift, and go to state 73
    TOK_INTCON     shift, and go to state 38
    TOK_CHARCON    shift, and go to state 39
    TOK_STRINGCON  shift, and go to state 40
    '+'            shift, and go to state 41
    '-'            shift, and go to state 42
    '('            shift, and go to state 43

    TOK_ARROW  reduce using rule 39 (binop)
    TOK_ARROW  [reduce using rule 52 (unop)]
    TOK_EQ     reduce using rule 39 (binop)
    TOK_EQ     [reduce using rule 52 (unop)]
    TOK_NE     reduce using rule 39 (binop)
    TOK_NE     [reduce using rule 52 (unop)]
    TOK_LT     reduce using rule 39 (binop)
    TOK_LT     [reduce using rule 52 (unop)]
    TOK_LE     reduce using rule 39 (binop)
    TOK_LE     [reduce using rule 52 (unop)]
    TOK_GT     reduce using rule 39 (binop)
    TOK_GT     [reduce using rule 52 (unop)]
    TOK_GE     reduce using rule 39 (binop)
    TOK_GE     [reduce using rule 52 (unop)]
    '+'        [reduce using rule 39 (binop)]
    '+'        [reduce using rule 52 (unop)]
    '-'        [reduce using rule 39 (binop)]
    '-'        [reduce using rule 52 (unop)]
    '*'        reduce using rule 39 (binop)
    '*'        [reduce using rule 52 (unop)]
    '/'        reduce using rule 39 (binop)
    '/'        [reduce using rule 52 (unop)]
    '%'        reduce using rule 39 (binop)
    '%'        [reduce using rule 52 (unop)]
    ')'        reduce using rule 39 (binop)
    ')'        [reduce using rule 52 (unop)]
    '='        reduce using rule 39 (binop)
    '='        [reduce using rule 52 (unop)]
    '['        reduce using rule 39 (binop)
    '['        [reduce using rule 52 (unop)]
    $default   reduce using rule 39 (binop)

    expr      go to state 76
    binop     go to state 50
    unop      go to state 51
    call      go to state 56
    variable  go to state 57
    constant  go to state 58


State 44

   59 statement: ';' .

    $default  reduce using rule 59 (statement)


State 45

   62 blockHelp: '{' . statement

    TOK_IF         shift, and go to state 33
    TOK_WHILE      shift, and go to state 34
    TOK_NULL       shift, and go to state 35
    TOK_NEW        shift, and go to state 36
    TOK_IDENT      shift, and go to state 73
    TOK_INTCON     shift, and go to state 38
    TOK_CHARCON    shift, and go to state 39
    TOK_STRINGCON  shift, and go to state 40
    '+'            shift, and go to state 41
    '-'            shift, and go to state 42
    '('            shift, and go to state 43
    ';'            shift, and go to state 44
    '{'            shift, and go to state 45

    TOK_ARROW  reduce using rule 39 (binop)
    TOK_ARROW  [reduce using rule 52 (unop)]
    TOK_EQ     reduce using rule 39 (binop)
    TOK_EQ     [reduce using rule 52 (unop)]
    TOK_NE     reduce using rule 39 (binop)
    TOK_NE     [reduce using rule 52 (unop)]
    TOK_LT     reduce using rule 39 (binop)
    TOK_LT     [reduce using rule 52 (unop)]
    TOK_LE     reduce using rule 39 (binop)
    TOK_LE     [reduce using rule 52 (unop)]
    TOK_GT     reduce using rule 39 (binop)
    TOK_GT     [reduce using rule 52 (unop)]
    TOK_GE     reduce using rule 39 (binop)
    TOK_GE     [reduce using rule 52 (unop)]
    '+'        [reduce using rule 39 (binop)]
    '+'        [reduce using rule 52 (unop)]
    '-'        [reduce using rule 39 (binop)]
    '-'        [reduce using rule 52 (unop)]
    '*'        reduce using rule 39 (binop)
    '*'        [reduce using rule 52 (unop)]
    '/'        reduce using rule 39 (binop)
    '/'        [reduce using rule 52 (unop)]
    '%'        reduce using rule 39 (binop)
    '%'        [reduce using rule 52 (unop)]
    ';'        [reduce using rule 39 (binop)]
    ';'        [reduce using rule 52 (unop)]
    '='        reduce using rule 39 (binop)
    '='        [reduce using rule 52 (unop)]
    '['        reduce using rule 39 (binop)
    '['        [reduce using rule 52 (unop)]
    $default   reduce using rule 39 (binop)

    ifelse     go to state 48
    expr       go to state 49
    binop      go to state 50
    unop       go to state 51
    statement  go to state 77
    block      go to state 53
    blockHelp  go to state 54
    while      go to state 55
    call       go to state 56
    variable   go to state 57
    constant   go to state 58


State 46

   29 localdecl: identdec . TOK_VARDECL expr ';'

    TOK_VARDECL  shift, and go to state 78


State 47

   23 fnbody: '{' localdecl .

    $default  reduce using rule 23 (fnbody)


State 48

   57 statement: ifelse .

    $default  reduce using rule 57 (statement)


State 49

   40 binop: expr . '=' expr
   41      | expr . '+' expr
   42      | expr . '-' expr
   43      | expr . '*' expr
   44      | expr . '/' expr
   45      | expr . '%' expr
   46      | expr . TOK_EQ expr
   47      | expr . TOK_NE expr
   48      | expr . TOK_LT expr
   49      | expr . TOK_LE expr
   50      | expr . TOK_GT expr
   51      | expr . TOK_GE expr
   58 statement: expr . ';'
   71 variable: expr . '[' expr ']'
   72         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 79
    TOK_EQ     shift, and go to state 80
    TOK_NE     shift, and go to state 81
    TOK_LT     shift, and go to state 82
    TOK_LE     shift, and go to state 83
    TOK_GT     shift, and go to state 84
    TOK_GE     shift, and go to state 85
    '+'        shift, and go to state 86
    '-'        shift, and go to state 87
    '*'        shift, and go to state 88
    '/'        shift, and go to state 89
    '%'        shift, and go to state 90
    ';'        shift, and go to state 91
    '='        shift, and go to state 92
    '['        shift, and go to state 93


State 50

   33 expr: binop .

    $default  reduce using rule 33 (expr)


State 51

   34 expr: unop .

    $default  reduce using rule 34 (expr)


State 52

   22 fnbody: '{' statement .

    $default  reduce using rule 22 (fnbody)


State 53

   55 statement: block .

    $default  reduce using rule 55 (statement)


State 54

   60 block: blockHelp . '}'
   61 blockHelp: blockHelp . statement

    TOK_IF         shift, and go to state 33
    TOK_WHILE      shift, and go to state 34
    TOK_NULL       shift, and go to state 35
    TOK_NEW        shift, and go to state 36
    TOK_IDENT      shift, and go to state 73
    TOK_INTCON     shift, and go to state 38
    TOK_CHARCON    shift, and go to state 39
    TOK_STRINGCON  shift, and go to state 40
    '+'            shift, and go to state 41
    '-'            shift, and go to state 42
    '('            shift, and go to state 43
    '}'            shift, and go to state 94
    ';'            shift, and go to state 44
    '{'            shift, and go to state 45

    TOK_ARROW  reduce using rule 39 (binop)
    TOK_ARROW  [reduce using rule 52 (unop)]
    TOK_EQ     reduce using rule 39 (binop)
    TOK_EQ     [reduce using rule 52 (unop)]
    TOK_NE     reduce using rule 39 (binop)
    TOK_NE     [reduce using rule 52 (unop)]
    TOK_LT     reduce using rule 39 (binop)
    TOK_LT     [reduce using rule 52 (unop)]
    TOK_LE     reduce using rule 39 (binop)
    TOK_LE     [reduce using rule 52 (unop)]
    TOK_GT     reduce using rule 39 (binop)
    TOK_GT     [reduce using rule 52 (unop)]
    TOK_GE     reduce using rule 39 (binop)
    TOK_GE     [reduce using rule 52 (unop)]
    '+'        [reduce using rule 39 (binop)]
    '+'        [reduce using rule 52 (unop)]
    '-'        [reduce using rule 39 (binop)]
    '-'        [reduce using rule 52 (unop)]
    '*'        reduce using rule 39 (binop)
    '*'        [reduce using rule 52 (unop)]
    '/'        reduce using rule 39 (binop)
    '/'        [reduce using rule 52 (unop)]
    '%'        reduce using rule 39 (binop)
    '%'        [reduce using rule 52 (unop)]
    ';'        [reduce using rule 39 (binop)]
    ';'        [reduce using rule 52 (unop)]
    '='        reduce using rule 39 (binop)
    '='        [reduce using rule 52 (unop)]
    '['        reduce using rule 39 (binop)
    '['        [reduce using rule 52 (unop)]
    $default   reduce using rule 39 (binop)

    ifelse     go to state 48
    expr       go to state 49
    binop      go to state 50
    unop       go to state 51
    statement  go to state 95
    block      go to state 53
    blockHelp  go to state 54
    while      go to state 55
    call       go to state 56
    variable   go to state 57
    constant   go to state 58


State 55

   56 statement: while .

    $default  reduce using rule 56 (statement)


State 56

   35 expr: call .

    $default  reduce using rule 35 (expr)


State 57

   37 expr: variable .

    $default  reduce using rule 37 (expr)


State 58

   38 expr: constant .

    $default  reduce using rule 38 (expr)


State 59

   16 param: param ',' . identdec

    TOK_VOID    shift, and go to state 4
    TOK_INT     shift, and go to state 5
    TOK_STRING  shift, and go to state 6
    TOK_IDENT   shift, and go to state 8

    identdec  go to state 96
    basetype  go to state 15


State 60

   12 function: func fnbody '}' .

    $default  reduce using rule 12 (function)


State 61

   21 fnbody: fnbody localdecl .

    $default  reduce using rule 21 (fnbody)


State 62

   20 fnbody: fnbody statement .

    $default  reduce using rule 20 (fnbody)


State 63

   11 globaldecl: identdec TOK_VARDECL constant . ';'

    ';'  shift, and go to state 97


State 64

   18 identdec: basetype TOK_ARRAY TOK_IDENT .

    $default  reduce using rule 18 (identdec)


State 65

   10 fielddecl: basetype TOK_ARRAY TOK_IDENT .

    $default  reduce using rule 10 (fielddecl)


State 66

   30 ifelse: TOK_IF '(' . expr ')' statement TOK_ELSE statement
   31       | TOK_IF '(' . expr ')' statement

    TOK_NULL       shift, and go to state 35
    TOK_NEW        shift, and go to state 36
    TOK_IDENT      shift, and go to state 73
    TOK_INTCON     shift, and go to state 38
    TOK_CHARCON    shift, and go to state 39
    TOK_STRINGCON  shift, and go to state 40
    '+'            shift, and go to state 41
    '-'            shift, and go to state 42
    '('            shift, and go to state 43

    TOK_ARROW  reduce using rule 39 (binop)
    TOK_ARROW  [reduce using rule 52 (unop)]
    TOK_EQ     reduce using rule 39 (binop)
    TOK_EQ     [reduce using rule 52 (unop)]
    TOK_NE     reduce using rule 39 (binop)
    TOK_NE     [reduce using rule 52 (unop)]
    TOK_LT     reduce using rule 39 (binop)
    TOK_LT     [reduce using rule 52 (unop)]
    TOK_LE     reduce using rule 39 (binop)
    TOK_LE     [reduce using rule 52 (unop)]
    TOK_GT     reduce using rule 39 (binop)
    TOK_GT     [reduce using rule 52 (unop)]
    TOK_GE     reduce using rule 39 (binop)
    TOK_GE     [reduce using rule 52 (unop)]
    '+'        [reduce using rule 39 (binop)]
    '+'        [reduce using rule 52 (unop)]
    '-'        [reduce using rule 39 (binop)]
    '-'        [reduce using rule 52 (unop)]
    '*'        reduce using rule 39 (binop)
    '*'        [reduce using rule 52 (unop)]
    '/'        reduce using rule 39 (binop)
    '/'        [reduce using rule 52 (unop)]
    '%'        reduce using rule 39 (binop)
    '%'        [reduce using rule 52 (unop)]
    ')'        reduce using rule 39 (binop)
    ')'        [reduce using rule 52 (unop)]
    '='        reduce using rule 39 (binop)
    '='        [reduce using rule 52 (unop)]
    '['        reduce using rule 39 (binop)
    '['        [reduce using rule 52 (unop)]
    $default   reduce using rule 39 (binop)

    expr      go to state 98
    binop     go to state 50
    unop      go to state 51
    call      go to state 56
    variable  go to state 57
    constant  go to state 58


State 67

   63 while: TOK_WHILE '(' . expr ')' statement

    TOK_NULL       shift, and go to state 35
    TOK_NEW        shift, and go to state 36
    TOK_IDENT      shift, and go to state 73
    TOK_INTCON     shift, and go to state 38
    TOK_CHARCON    shift, and go to state 39
    TOK_STRINGCON  shift, and go to state 40
    '+'            shift, and go to state 41
    '-'            shift, and go to state 42
    '('            shift, and go to state 43

    TOK_ARROW  reduce using rule 39 (binop)
    TOK_ARROW  [reduce using rule 52 (unop)]
    TOK_EQ     reduce using rule 39 (binop)
    TOK_EQ     [reduce using rule 52 (unop)]
    TOK_NE     reduce using rule 39 (binop)
    TOK_NE     [reduce using rule 52 (unop)]
    TOK_LT     reduce using rule 39 (binop)
    TOK_LT     [reduce using rule 52 (unop)]
    TOK_LE     reduce using rule 39 (binop)
    TOK_LE     [reduce using rule 52 (unop)]
    TOK_GT     reduce using rule 39 (binop)
    TOK_GT     [reduce using rule 52 (unop)]
    TOK_GE     reduce using rule 39 (binop)
    TOK_GE     [reduce using rule 52 (unop)]
    '+'        [reduce using rule 39 (binop)]
    '+'        [reduce using rule 52 (unop)]
    '-'        [reduce using rule 39 (binop)]
    '-'        [reduce using rule 52 (unop)]
    '*'        reduce using rule 39 (binop)
    '*'        [reduce using rule 52 (unop)]
    '/'        reduce using rule 39 (binop)
    '/'        [reduce using rule 52 (unop)]
    '%'        reduce using rule 39 (binop)
    '%'        [reduce using rule 52 (unop)]
    ')'        reduce using rule 39 (binop)
    ')'        [reduce using rule 52 (unop)]
    '='        reduce using rule 39 (binop)
    '='        [reduce using rule 52 (unop)]
    '['        reduce using rule 39 (binop)
    '['        [reduce using rule 52 (unop)]
    $default   reduce using rule 39 (binop)

    expr      go to state 99
    binop     go to state 50
    unop      go to state 51
    call      go to state 56
    variable  go to state 57
    constant  go to state 58


State 68

   27 basetype: TOK_STRING .
   65 allocation: TOK_STRING . '(' expr ')'

    '('  shift, and go to state 100

    $default  reduce using rule 27 (basetype)


State 69

   28 basetype: TOK_IDENT .
   64 allocation: TOK_IDENT .

    '['       reduce using rule 28 (basetype)
    '['       [reduce using rule 64 (allocation)]
    $default  reduce using rule 64 (allocation)


State 70

   66 allocation: basetype . '[' expr ']'

    '['  shift, and go to state 101


State 71

   32 expr: TOK_NEW allocation .

    $default  reduce using rule 32 (expr)


State 72

   69 call: TOK_IDENT '(' . exprList ')'

    TOK_NULL       shift, and go to state 35
    TOK_NEW        shift, and go to state 36
    TOK_IDENT      shift, and go to state 73
    TOK_INTCON     shift, and go to state 38
    TOK_CHARCON    shift, and go to state 39
    TOK_STRINGCON  shift, and go to state 40
    '+'            shift, and go to state 41
    '-'            shift, and go to state 42
    '('            shift, and go to state 43

    TOK_ARROW  reduce using rule 39 (binop)
    TOK_ARROW  [reduce using rule 52 (unop)]
    TOK_EQ     reduce using rule 39 (binop)
    TOK_EQ     [reduce using rule 52 (unop)]
    TOK_NE     reduce using rule 39 (binop)
    TOK_NE     [reduce using rule 52 (unop)]
    TOK_LT     reduce using rule 39 (binop)
    TOK_LT     [reduce using rule 52 (unop)]
    TOK_LE     reduce using rule 39 (binop)
    TOK_LE     [reduce using rule 52 (unop)]
    TOK_GT     reduce using rule 39 (binop)
    TOK_GT     [reduce using rule 52 (unop)]
    TOK_GE     reduce using rule 39 (binop)
    TOK_GE     [reduce using rule 52 (unop)]
    '+'        [reduce using rule 39 (binop)]
    '+'        [reduce using rule 52 (unop)]
    '-'        [reduce using rule 39 (binop)]
    '-'        [reduce using rule 52 (unop)]
    '*'        reduce using rule 39 (binop)
    '*'        [reduce using rule 52 (unop)]
    '/'        reduce using rule 39 (binop)
    '/'        [reduce using rule 52 (unop)]
    '%'        reduce using rule 39 (binop)
    '%'        [reduce using rule 52 (unop)]
    ')'        reduce using rule 39 (binop)
    ')'        [reduce using rule 52 (unop)]
    ','        reduce using rule 39 (binop)
    ','        [reduce using rule 52 (unop)]
    '='        reduce using rule 39 (binop)
    '='        [reduce using rule 52 (unop)]
    '['        reduce using rule 39 (binop)
    '['        [reduce using rule 52 (unop)]
    $default   reduce using rule 39 (binop)

    expr      go to state 102
    binop     go to state 50
    unop      go to state 51
    exprList  go to state 103
    call      go to state 56
    variable  go to state 57
    constant  go to state 58


State 73

   69 call: TOK_IDENT . '(' exprList ')'
   70 variable: TOK_IDENT .

    '('  shift, and go to state 72

    $default  reduce using rule 70 (variable)


State 74

   40 binop: expr . '=' expr
   41      | expr . '+' expr
   42      | expr . '-' expr
   43      | expr . '*' expr
   44      | expr . '/' expr
   45      | expr . '%' expr
   46      | expr . TOK_EQ expr
   47      | expr . TOK_NE expr
   48      | expr . TOK_LT expr
   49      | expr . TOK_LE expr
   50      | expr . TOK_GT expr
   51      | expr . TOK_GE expr
   53 unop: '+' expr .
   71 variable: expr . '[' expr ']'
   72         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 79
    '='        shift, and go to state 92
    '['        shift, and go to state 93

    '='       [reduce using rule 53 (unop)]
    '['       [reduce using rule 53 (unop)]
    $default  reduce using rule 53 (unop)


State 75

   40 binop: expr . '=' expr
   41      | expr . '+' expr
   42      | expr . '-' expr
   43      | expr . '*' expr
   44      | expr . '/' expr
   45      | expr . '%' expr
   46      | expr . TOK_EQ expr
   47      | expr . TOK_NE expr
   48      | expr . TOK_LT expr
   49      | expr . TOK_LE expr
   50      | expr . TOK_GT expr
   51      | expr . TOK_GE expr
   54 unop: '-' expr .
   71 variable: expr . '[' expr ']'
   72         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 79
    '='        shift, and go to state 92
    '['        shift, and go to state 93

    '='       [reduce using rule 54 (unop)]
    '['       [reduce using rule 54 (unop)]
    $default  reduce using rule 54 (unop)


State 76

   36 expr: '(' expr . ')'
   40 binop: expr . '=' expr
   41      | expr . '+' expr
   42      | expr . '-' expr
   43      | expr . '*' expr
   44      | expr . '/' expr
   45      | expr . '%' expr
   46      | expr . TOK_EQ expr
   47      | expr . TOK_NE expr
   48      | expr . TOK_LT expr
   49      | expr . TOK_LE expr
   50      | expr . TOK_GT expr
   51      | expr . TOK_GE expr
   71 variable: expr . '[' expr ']'
   72         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 79
    TOK_EQ     shift, and go to state 80
    TOK_NE     shift, and go to state 81
    TOK_LT     shift, and go to state 82
    TOK_LE     shift, and go to state 83
    TOK_GT     shift, and go to state 84
    TOK_GE     shift, and go to state 85
    '+'        shift, and go to state 86
    '-'        shift, and go to state 87
    '*'        shift, and go to state 88
    '/'        shift, and go to state 89
    '%'        shift, and go to state 90
    ')'        shift, and go to state 104
    '='        shift, and go to state 92
    '['        shift, and go to state 93


State 77

   62 blockHelp: '{' statement .

    $default  reduce using rule 62 (blockHelp)


State 78

   29 localdecl: identdec TOK_VARDECL . expr ';'

    TOK_NULL       shift, and go to state 35
    TOK_NEW        shift, and go to state 36
    TOK_IDENT      shift, and go to state 73
    TOK_INTCON     shift, and go to state 38
    TOK_CHARCON    shift, and go to state 39
    TOK_STRINGCON  shift, and go to state 40
    '+'            shift, and go to state 41
    '-'            shift, and go to state 42
    '('            shift, and go to state 43

    TOK_ARROW  reduce using rule 39 (binop)
    TOK_ARROW  [reduce using rule 52 (unop)]
    TOK_EQ     reduce using rule 39 (binop)
    TOK_EQ     [reduce using rule 52 (unop)]
    TOK_NE     reduce using rule 39 (binop)
    TOK_NE     [reduce using rule 52 (unop)]
    TOK_LT     reduce using rule 39 (binop)
    TOK_LT     [reduce using rule 52 (unop)]
    TOK_LE     reduce using rule 39 (binop)
    TOK_LE     [reduce using rule 52 (unop)]
    TOK_GT     reduce using rule 39 (binop)
    TOK_GT     [reduce using rule 52 (unop)]
    TOK_GE     reduce using rule 39 (binop)
    TOK_GE     [reduce using rule 52 (unop)]
    '+'        [reduce using rule 39 (binop)]
    '+'        [reduce using rule 52 (unop)]
    '-'        [reduce using rule 39 (binop)]
    '-'        [reduce using rule 52 (unop)]
    '*'        reduce using rule 39 (binop)
    '*'        [reduce using rule 52 (unop)]
    '/'        reduce using rule 39 (binop)
    '/'        [reduce using rule 52 (unop)]
    '%'        reduce using rule 39 (binop)
    '%'        [reduce using rule 52 (unop)]
    ';'        reduce using rule 39 (binop)
    ';'        [reduce using rule 52 (unop)]
    '='        reduce using rule 39 (binop)
    '='        [reduce using rule 52 (unop)]
    '['        reduce using rule 39 (binop)
    '['        [reduce using rule 52 (unop)]
    $default   reduce using rule 39 (binop)

    expr      go to state 105
    binop     go to state 50
    unop      go to state 51
    call      go to state 56
    variable  go to state 57
    constant  go to state 58


State 79

   72 variable: expr TOK_ARROW . TOK_IDENT

    TOK_IDENT  shift, and go to state 106


State 80

   46 binop: expr TOK_EQ . expr

    TOK_NULL       shift, and go to state 35
    TOK_NEW        shift, and go to state 36
    TOK_IDENT      shift, and go to state 73
    TOK_INTCON     shift, and go to state 38
    TOK_CHARCON    shift, and go to state 39
    TOK_STRINGCON  shift, and go to state 40
    '+'            shift, and go to state 41
    '-'            shift, and go to state 42
    '('            shift, and go to state 43

    TOK_ARROW  reduce using rule 39 (binop)
    TOK_ARROW  [reduce using rule 52 (unop)]
    TOK_EQ     reduce using rule 39 (binop)
    TOK_EQ     [reduce using rule 52 (unop)]
    TOK_NE     reduce using rule 39 (binop)
    TOK_NE     [reduce using rule 52 (unop)]
    TOK_LT     reduce using rule 39 (binop)
    TOK_LT     [reduce using rule 52 (unop)]
    TOK_LE     reduce using rule 39 (binop)
    TOK_LE     [reduce using rule 52 (unop)]
    TOK_GT     reduce using rule 39 (binop)
    TOK_GT     [reduce using rule 52 (unop)]
    TOK_GE     reduce using rule 39 (binop)
    TOK_GE     [reduce using rule 52 (unop)]
    '+'        [reduce using rule 39 (binop)]
    '+'        [reduce using rule 52 (unop)]
    '-'        [reduce using rule 39 (binop)]
    '-'        [reduce using rule 52 (unop)]
    '*'        reduce using rule 39 (binop)
    '*'        [reduce using rule 52 (unop)]
    '/'        reduce using rule 39 (binop)
    '/'        [reduce using rule 52 (unop)]
    '%'        reduce using rule 39 (binop)
    '%'        [reduce using rule 52 (unop)]
    ')'        reduce using rule 39 (binop)
    ')'        [reduce using rule 52 (unop)]
    ';'        reduce using rule 39 (binop)
    ';'        [reduce using rule 52 (unop)]
    ','        reduce using rule 39 (binop)
    ','        [reduce using rule 52 (unop)]
    '='        reduce using rule 39 (binop)
    '='        [reduce using rule 52 (unop)]
    '['        reduce using rule 39 (binop)
    '['        [reduce using rule 52 (unop)]
    ']'        reduce using rule 39 (binop)
    ']'        [reduce using rule 52 (unop)]
    $default   reduce using rule 39 (binop)

    expr      go to state 107
    binop     go to state 50
    unop      go to state 51
    call      go to state 56
    variable  go to state 57
    constant  go to state 58


State 81

   47 binop: expr TOK_NE . expr

    TOK_NULL       shift, and go to state 35
    TOK_NEW        shift, and go to state 36
    TOK_IDENT      shift, and go to state 73
    TOK_INTCON     shift, and go to state 38
    TOK_CHARCON    shift, and go to state 39
    TOK_STRINGCON  shift, and go to state 40
    '+'            shift, and go to state 41
    '-'            shift, and go to state 42
    '('            shift, and go to state 43

    TOK_ARROW  reduce using rule 39 (binop)
    TOK_ARROW  [reduce using rule 52 (unop)]
    TOK_EQ     reduce using rule 39 (binop)
    TOK_EQ     [reduce using rule 52 (unop)]
    TOK_NE     reduce using rule 39 (binop)
    TOK_NE     [reduce using rule 52 (unop)]
    TOK_LT     reduce using rule 39 (binop)
    TOK_LT     [reduce using rule 52 (unop)]
    TOK_LE     reduce using rule 39 (binop)
    TOK_LE     [reduce using rule 52 (unop)]
    TOK_GT     reduce using rule 39 (binop)
    TOK_GT     [reduce using rule 52 (unop)]
    TOK_GE     reduce using rule 39 (binop)
    TOK_GE     [reduce using rule 52 (unop)]
    '+'        [reduce using rule 39 (binop)]
    '+'        [reduce using rule 52 (unop)]
    '-'        [reduce using rule 39 (binop)]
    '-'        [reduce using rule 52 (unop)]
    '*'        reduce using rule 39 (binop)
    '*'        [reduce using rule 52 (unop)]
    '/'        reduce using rule 39 (binop)
    '/'        [reduce using rule 52 (unop)]
    '%'        reduce using rule 39 (binop)
    '%'        [reduce using rule 52 (unop)]
    ')'        reduce using rule 39 (binop)
    ')'        [reduce using rule 52 (unop)]
    ';'        reduce using rule 39 (binop)
    ';'        [reduce using rule 52 (unop)]
    ','        reduce using rule 39 (binop)
    ','        [reduce using rule 52 (unop)]
    '='        reduce using rule 39 (binop)
    '='        [reduce using rule 52 (unop)]
    '['        reduce using rule 39 (binop)
    '['        [reduce using rule 52 (unop)]
    ']'        reduce using rule 39 (binop)
    ']'        [reduce using rule 52 (unop)]
    $default   reduce using rule 39 (binop)

    expr      go to state 108
    binop     go to state 50
    unop      go to state 51
    call      go to state 56
    variable  go to state 57
    constant  go to state 58


State 82

   48 binop: expr TOK_LT . expr

    TOK_NULL       shift, and go to state 35
    TOK_NEW        shift, and go to state 36
    TOK_IDENT      shift, and go to state 73
    TOK_INTCON     shift, and go to state 38
    TOK_CHARCON    shift, and go to state 39
    TOK_STRINGCON  shift, and go to state 40
    '+'            shift, and go to state 41
    '-'            shift, and go to state 42
    '('            shift, and go to state 43

    TOK_ARROW  reduce using rule 39 (binop)
    TOK_ARROW  [reduce using rule 52 (unop)]
    TOK_EQ     reduce using rule 39 (binop)
    TOK_EQ     [reduce using rule 52 (unop)]
    TOK_NE     reduce using rule 39 (binop)
    TOK_NE     [reduce using rule 52 (unop)]
    TOK_LT     reduce using rule 39 (binop)
    TOK_LT     [reduce using rule 52 (unop)]
    TOK_LE     reduce using rule 39 (binop)
    TOK_LE     [reduce using rule 52 (unop)]
    TOK_GT     reduce using rule 39 (binop)
    TOK_GT     [reduce using rule 52 (unop)]
    TOK_GE     reduce using rule 39 (binop)
    TOK_GE     [reduce using rule 52 (unop)]
    '+'        [reduce using rule 39 (binop)]
    '+'        [reduce using rule 52 (unop)]
    '-'        [reduce using rule 39 (binop)]
    '-'        [reduce using rule 52 (unop)]
    '*'        reduce using rule 39 (binop)
    '*'        [reduce using rule 52 (unop)]
    '/'        reduce using rule 39 (binop)
    '/'        [reduce using rule 52 (unop)]
    '%'        reduce using rule 39 (binop)
    '%'        [reduce using rule 52 (unop)]
    ')'        reduce using rule 39 (binop)
    ')'        [reduce using rule 52 (unop)]
    ';'        reduce using rule 39 (binop)
    ';'        [reduce using rule 52 (unop)]
    ','        reduce using rule 39 (binop)
    ','        [reduce using rule 52 (unop)]
    '='        reduce using rule 39 (binop)
    '='        [reduce using rule 52 (unop)]
    '['        reduce using rule 39 (binop)
    '['        [reduce using rule 52 (unop)]
    ']'        reduce using rule 39 (binop)
    ']'        [reduce using rule 52 (unop)]
    $default   reduce using rule 39 (binop)

    expr      go to state 109
    binop     go to state 50
    unop      go to state 51
    call      go to state 56
    variable  go to state 57
    constant  go to state 58


State 83

   49 binop: expr TOK_LE . expr

    TOK_NULL       shift, and go to state 35
    TOK_NEW        shift, and go to state 36
    TOK_IDENT      shift, and go to state 73
    TOK_INTCON     shift, and go to state 38
    TOK_CHARCON    shift, and go to state 39
    TOK_STRINGCON  shift, and go to state 40
    '+'            shift, and go to state 41
    '-'            shift, and go to state 42
    '('            shift, and go to state 43

    TOK_ARROW  reduce using rule 39 (binop)
    TOK_ARROW  [reduce using rule 52 (unop)]
    TOK_EQ     reduce using rule 39 (binop)
    TOK_EQ     [reduce using rule 52 (unop)]
    TOK_NE     reduce using rule 39 (binop)
    TOK_NE     [reduce using rule 52 (unop)]
    TOK_LT     reduce using rule 39 (binop)
    TOK_LT     [reduce using rule 52 (unop)]
    TOK_LE     reduce using rule 39 (binop)
    TOK_LE     [reduce using rule 52 (unop)]
    TOK_GT     reduce using rule 39 (binop)
    TOK_GT     [reduce using rule 52 (unop)]
    TOK_GE     reduce using rule 39 (binop)
    TOK_GE     [reduce using rule 52 (unop)]
    '+'        [reduce using rule 39 (binop)]
    '+'        [reduce using rule 52 (unop)]
    '-'        [reduce using rule 39 (binop)]
    '-'        [reduce using rule 52 (unop)]
    '*'        reduce using rule 39 (binop)
    '*'        [reduce using rule 52 (unop)]
    '/'        reduce using rule 39 (binop)
    '/'        [reduce using rule 52 (unop)]
    '%'        reduce using rule 39 (binop)
    '%'        [reduce using rule 52 (unop)]
    ')'        reduce using rule 39 (binop)
    ')'        [reduce using rule 52 (unop)]
    ';'        reduce using rule 39 (binop)
    ';'        [reduce using rule 52 (unop)]
    ','        reduce using rule 39 (binop)
    ','        [reduce using rule 52 (unop)]
    '='        reduce using rule 39 (binop)
    '='        [reduce using rule 52 (unop)]
    '['        reduce using rule 39 (binop)
    '['        [reduce using rule 52 (unop)]
    ']'        reduce using rule 39 (binop)
    ']'        [reduce using rule 52 (unop)]
    $default   reduce using rule 39 (binop)

    expr      go to state 110
    binop     go to state 50
    unop      go to state 51
    call      go to state 56
    variable  go to state 57
    constant  go to state 58


State 84

   50 binop: expr TOK_GT . expr

    TOK_NULL       shift, and go to state 35
    TOK_NEW        shift, and go to state 36
    TOK_IDENT      shift, and go to state 73
    TOK_INTCON     shift, and go to state 38
    TOK_CHARCON    shift, and go to state 39
    TOK_STRINGCON  shift, and go to state 40
    '+'            shift, and go to state 41
    '-'            shift, and go to state 42
    '('            shift, and go to state 43

    TOK_ARROW  reduce using rule 39 (binop)
    TOK_ARROW  [reduce using rule 52 (unop)]
    TOK_EQ     reduce using rule 39 (binop)
    TOK_EQ     [reduce using rule 52 (unop)]
    TOK_NE     reduce using rule 39 (binop)
    TOK_NE     [reduce using rule 52 (unop)]
    TOK_LT     reduce using rule 39 (binop)
    TOK_LT     [reduce using rule 52 (unop)]
    TOK_LE     reduce using rule 39 (binop)
    TOK_LE     [reduce using rule 52 (unop)]
    TOK_GT     reduce using rule 39 (binop)
    TOK_GT     [reduce using rule 52 (unop)]
    TOK_GE     reduce using rule 39 (binop)
    TOK_GE     [reduce using rule 52 (unop)]
    '+'        [reduce using rule 39 (binop)]
    '+'        [reduce using rule 52 (unop)]
    '-'        [reduce using rule 39 (binop)]
    '-'        [reduce using rule 52 (unop)]
    '*'        reduce using rule 39 (binop)
    '*'        [reduce using rule 52 (unop)]
    '/'        reduce using rule 39 (binop)
    '/'        [reduce using rule 52 (unop)]
    '%'        reduce using rule 39 (binop)
    '%'        [reduce using rule 52 (unop)]
    ')'        reduce using rule 39 (binop)
    ')'        [reduce using rule 52 (unop)]
    ';'        reduce using rule 39 (binop)
    ';'        [reduce using rule 52 (unop)]
    ','        reduce using rule 39 (binop)
    ','        [reduce using rule 52 (unop)]
    '='        reduce using rule 39 (binop)
    '='        [reduce using rule 52 (unop)]
    '['        reduce using rule 39 (binop)
    '['        [reduce using rule 52 (unop)]
    ']'        reduce using rule 39 (binop)
    ']'        [reduce using rule 52 (unop)]
    $default   reduce using rule 39 (binop)

    expr      go to state 111
    binop     go to state 50
    unop      go to state 51
    call      go to state 56
    variable  go to state 57
    constant  go to state 58


State 85

   51 binop: expr TOK_GE . expr

    TOK_NULL       shift, and go to state 35
    TOK_NEW        shift, and go to state 36
    TOK_IDENT      shift, and go to state 73
    TOK_INTCON     shift, and go to state 38
    TOK_CHARCON    shift, and go to state 39
    TOK_STRINGCON  shift, and go to state 40
    '+'            shift, and go to state 41
    '-'            shift, and go to state 42
    '('            shift, and go to state 43

    TOK_ARROW  reduce using rule 39 (binop)
    TOK_ARROW  [reduce using rule 52 (unop)]
    TOK_EQ     reduce using rule 39 (binop)
    TOK_EQ     [reduce using rule 52 (unop)]
    TOK_NE     reduce using rule 39 (binop)
    TOK_NE     [reduce using rule 52 (unop)]
    TOK_LT     reduce using rule 39 (binop)
    TOK_LT     [reduce using rule 52 (unop)]
    TOK_LE     reduce using rule 39 (binop)
    TOK_LE     [reduce using rule 52 (unop)]
    TOK_GT     reduce using rule 39 (binop)
    TOK_GT     [reduce using rule 52 (unop)]
    TOK_GE     reduce using rule 39 (binop)
    TOK_GE     [reduce using rule 52 (unop)]
    '+'        [reduce using rule 39 (binop)]
    '+'        [reduce using rule 52 (unop)]
    '-'        [reduce using rule 39 (binop)]
    '-'        [reduce using rule 52 (unop)]
    '*'        reduce using rule 39 (binop)
    '*'        [reduce using rule 52 (unop)]
    '/'        reduce using rule 39 (binop)
    '/'        [reduce using rule 52 (unop)]
    '%'        reduce using rule 39 (binop)
    '%'        [reduce using rule 52 (unop)]
    ')'        reduce using rule 39 (binop)
    ')'        [reduce using rule 52 (unop)]
    ';'        reduce using rule 39 (binop)
    ';'        [reduce using rule 52 (unop)]
    ','        reduce using rule 39 (binop)
    ','        [reduce using rule 52 (unop)]
    '='        reduce using rule 39 (binop)
    '='        [reduce using rule 52 (unop)]
    '['        reduce using rule 39 (binop)
    '['        [reduce using rule 52 (unop)]
    ']'        reduce using rule 39 (binop)
    ']'        [reduce using rule 52 (unop)]
    $default   reduce using rule 39 (binop)

    expr      go to state 112
    binop     go to state 50
    unop      go to state 51
    call      go to state 56
    variable  go to state 57
    constant  go to state 58


State 86

   41 binop: expr '+' . expr

    TOK_NULL       shift, and go to state 35
    TOK_NEW        shift, and go to state 36
    TOK_IDENT      shift, and go to state 73
    TOK_INTCON     shift, and go to state 38
    TOK_CHARCON    shift, and go to state 39
    TOK_STRINGCON  shift, and go to state 40
    '+'            shift, and go to state 41
    '-'            shift, and go to state 42
    '('            shift, and go to state 43

    TOK_ARROW  reduce using rule 39 (binop)
    TOK_ARROW  [reduce using rule 52 (unop)]
    TOK_EQ     reduce using rule 39 (binop)
    TOK_EQ     [reduce using rule 52 (unop)]
    TOK_NE     reduce using rule 39 (binop)
    TOK_NE     [reduce using rule 52 (unop)]
    TOK_LT     reduce using rule 39 (binop)
    TOK_LT     [reduce using rule 52 (unop)]
    TOK_LE     reduce using rule 39 (binop)
    TOK_LE     [reduce using rule 52 (unop)]
    TOK_GT     reduce using rule 39 (binop)
    TOK_GT     [reduce using rule 52 (unop)]
    TOK_GE     reduce using rule 39 (binop)
    TOK_GE     [reduce using rule 52 (unop)]
    '+'        [reduce using rule 39 (binop)]
    '+'        [reduce using rule 52 (unop)]
    '-'        [reduce using rule 39 (binop)]
    '-'        [reduce using rule 52 (unop)]
    '*'        reduce using rule 39 (binop)
    '*'        [reduce using rule 52 (unop)]
    '/'        reduce using rule 39 (binop)
    '/'        [reduce using rule 52 (unop)]
    '%'        reduce using rule 39 (binop)
    '%'        [reduce using rule 52 (unop)]
    ')'        reduce using rule 39 (binop)
    ')'        [reduce using rule 52 (unop)]
    ';'        reduce using rule 39 (binop)
    ';'        [reduce using rule 52 (unop)]
    ','        reduce using rule 39 (binop)
    ','        [reduce using rule 52 (unop)]
    '='        reduce using rule 39 (binop)
    '='        [reduce using rule 52 (unop)]
    '['        reduce using rule 39 (binop)
    '['        [reduce using rule 52 (unop)]
    ']'        reduce using rule 39 (binop)
    ']'        [reduce using rule 52 (unop)]
    $default   reduce using rule 39 (binop)

    expr      go to state 113
    binop     go to state 50
    unop      go to state 51
    call      go to state 56
    variable  go to state 57
    constant  go to state 58


State 87

   42 binop: expr '-' . expr

    TOK_NULL       shift, and go to state 35
    TOK_NEW        shift, and go to state 36
    TOK_IDENT      shift, and go to state 73
    TOK_INTCON     shift, and go to state 38
    TOK_CHARCON    shift, and go to state 39
    TOK_STRINGCON  shift, and go to state 40
    '+'            shift, and go to state 41
    '-'            shift, and go to state 42
    '('            shift, and go to state 43

    TOK_ARROW  reduce using rule 39 (binop)
    TOK_ARROW  [reduce using rule 52 (unop)]
    TOK_EQ     reduce using rule 39 (binop)
    TOK_EQ     [reduce using rule 52 (unop)]
    TOK_NE     reduce using rule 39 (binop)
    TOK_NE     [reduce using rule 52 (unop)]
    TOK_LT     reduce using rule 39 (binop)
    TOK_LT     [reduce using rule 52 (unop)]
    TOK_LE     reduce using rule 39 (binop)
    TOK_LE     [reduce using rule 52 (unop)]
    TOK_GT     reduce using rule 39 (binop)
    TOK_GT     [reduce using rule 52 (unop)]
    TOK_GE     reduce using rule 39 (binop)
    TOK_GE     [reduce using rule 52 (unop)]
    '+'        [reduce using rule 39 (binop)]
    '+'        [reduce using rule 52 (unop)]
    '-'        [reduce using rule 39 (binop)]
    '-'        [reduce using rule 52 (unop)]
    '*'        reduce using rule 39 (binop)
    '*'        [reduce using rule 52 (unop)]
    '/'        reduce using rule 39 (binop)
    '/'        [reduce using rule 52 (unop)]
    '%'        reduce using rule 39 (binop)
    '%'        [reduce using rule 52 (unop)]
    ')'        reduce using rule 39 (binop)
    ')'        [reduce using rule 52 (unop)]
    ';'        reduce using rule 39 (binop)
    ';'        [reduce using rule 52 (unop)]
    ','        reduce using rule 39 (binop)
    ','        [reduce using rule 52 (unop)]
    '='        reduce using rule 39 (binop)
    '='        [reduce using rule 52 (unop)]
    '['        reduce using rule 39 (binop)
    '['        [reduce using rule 52 (unop)]
    ']'        reduce using rule 39 (binop)
    ']'        [reduce using rule 52 (unop)]
    $default   reduce using rule 39 (binop)

    expr      go to state 114
    binop     go to state 50
    unop      go to state 51
    call      go to state 56
    variable  go to state 57
    constant  go to state 58


State 88

   43 binop: expr '*' . expr

    TOK_NULL       shift, and go to state 35
    TOK_NEW        shift, and go to state 36
    TOK_IDENT      shift, and go to state 73
    TOK_INTCON     shift, and go to state 38
    TOK_CHARCON    shift, and go to state 39
    TOK_STRINGCON  shift, and go to state 40
    '+'            shift, and go to state 41
    '-'            shift, and go to state 42
    '('            shift, and go to state 43

    TOK_ARROW  reduce using rule 39 (binop)
    TOK_ARROW  [reduce using rule 52 (unop)]
    TOK_EQ     reduce using rule 39 (binop)
    TOK_EQ     [reduce using rule 52 (unop)]
    TOK_NE     reduce using rule 39 (binop)
    TOK_NE     [reduce using rule 52 (unop)]
    TOK_LT     reduce using rule 39 (binop)
    TOK_LT     [reduce using rule 52 (unop)]
    TOK_LE     reduce using rule 39 (binop)
    TOK_LE     [reduce using rule 52 (unop)]
    TOK_GT     reduce using rule 39 (binop)
    TOK_GT     [reduce using rule 52 (unop)]
    TOK_GE     reduce using rule 39 (binop)
    TOK_GE     [reduce using rule 52 (unop)]
    '+'        [reduce using rule 39 (binop)]
    '+'        [reduce using rule 52 (unop)]
    '-'        [reduce using rule 39 (binop)]
    '-'        [reduce using rule 52 (unop)]
    '*'        reduce using rule 39 (binop)
    '*'        [reduce using rule 52 (unop)]
    '/'        reduce using rule 39 (binop)
    '/'        [reduce using rule 52 (unop)]
    '%'        reduce using rule 39 (binop)
    '%'        [reduce using rule 52 (unop)]
    ')'        reduce using rule 39 (binop)
    ')'        [reduce using rule 52 (unop)]
    ';'        reduce using rule 39 (binop)
    ';'        [reduce using rule 52 (unop)]
    ','        reduce using rule 39 (binop)
    ','        [reduce using rule 52 (unop)]
    '='        reduce using rule 39 (binop)
    '='        [reduce using rule 52 (unop)]
    '['        reduce using rule 39 (binop)
    '['        [reduce using rule 52 (unop)]
    ']'        reduce using rule 39 (binop)
    ']'        [reduce using rule 52 (unop)]
    $default   reduce using rule 39 (binop)

    expr      go to state 115
    binop     go to state 50
    unop      go to state 51
    call      go to state 56
    variable  go to state 57
    constant  go to state 58


State 89

   44 binop: expr '/' . expr

    TOK_NULL       shift, and go to state 35
    TOK_NEW        shift, and go to state 36
    TOK_IDENT      shift, and go to state 73
    TOK_INTCON     shift, and go to state 38
    TOK_CHARCON    shift, and go to state 39
    TOK_STRINGCON  shift, and go to state 40
    '+'            shift, and go to state 41
    '-'            shift, and go to state 42
    '('            shift, and go to state 43

    TOK_ARROW  reduce using rule 39 (binop)
    TOK_ARROW  [reduce using rule 52 (unop)]
    TOK_EQ     reduce using rule 39 (binop)
    TOK_EQ     [reduce using rule 52 (unop)]
    TOK_NE     reduce using rule 39 (binop)
    TOK_NE     [reduce using rule 52 (unop)]
    TOK_LT     reduce using rule 39 (binop)
    TOK_LT     [reduce using rule 52 (unop)]
    TOK_LE     reduce using rule 39 (binop)
    TOK_LE     [reduce using rule 52 (unop)]
    TOK_GT     reduce using rule 39 (binop)
    TOK_GT     [reduce using rule 52 (unop)]
    TOK_GE     reduce using rule 39 (binop)
    TOK_GE     [reduce using rule 52 (unop)]
    '+'        [reduce using rule 39 (binop)]
    '+'        [reduce using rule 52 (unop)]
    '-'        [reduce using rule 39 (binop)]
    '-'        [reduce using rule 52 (unop)]
    '*'        reduce using rule 39 (binop)
    '*'        [reduce using rule 52 (unop)]
    '/'        reduce using rule 39 (binop)
    '/'        [reduce using rule 52 (unop)]
    '%'        reduce using rule 39 (binop)
    '%'        [reduce using rule 52 (unop)]
    ')'        reduce using rule 39 (binop)
    ')'        [reduce using rule 52 (unop)]
    ';'        reduce using rule 39 (binop)
    ';'        [reduce using rule 52 (unop)]
    ','        reduce using rule 39 (binop)
    ','        [reduce using rule 52 (unop)]
    '='        reduce using rule 39 (binop)
    '='        [reduce using rule 52 (unop)]
    '['        reduce using rule 39 (binop)
    '['        [reduce using rule 52 (unop)]
    ']'        reduce using rule 39 (binop)
    ']'        [reduce using rule 52 (unop)]
    $default   reduce using rule 39 (binop)

    expr      go to state 116
    binop     go to state 50
    unop      go to state 51
    call      go to state 56
    variable  go to state 57
    constant  go to state 58


State 90

   45 binop: expr '%' . expr

    TOK_NULL       shift, and go to state 35
    TOK_NEW        shift, and go to state 36
    TOK_IDENT      shift, and go to state 73
    TOK_INTCON     shift, and go to state 38
    TOK_CHARCON    shift, and go to state 39
    TOK_STRINGCON  shift, and go to state 40
    '+'            shift, and go to state 41
    '-'            shift, and go to state 42
    '('            shift, and go to state 43

    TOK_ARROW  reduce using rule 39 (binop)
    TOK_ARROW  [reduce using rule 52 (unop)]
    TOK_EQ     reduce using rule 39 (binop)
    TOK_EQ     [reduce using rule 52 (unop)]
    TOK_NE     reduce using rule 39 (binop)
    TOK_NE     [reduce using rule 52 (unop)]
    TOK_LT     reduce using rule 39 (binop)
    TOK_LT     [reduce using rule 52 (unop)]
    TOK_LE     reduce using rule 39 (binop)
    TOK_LE     [reduce using rule 52 (unop)]
    TOK_GT     reduce using rule 39 (binop)
    TOK_GT     [reduce using rule 52 (unop)]
    TOK_GE     reduce using rule 39 (binop)
    TOK_GE     [reduce using rule 52 (unop)]
    '+'        [reduce using rule 39 (binop)]
    '+'        [reduce using rule 52 (unop)]
    '-'        [reduce using rule 39 (binop)]
    '-'        [reduce using rule 52 (unop)]
    '*'        reduce using rule 39 (binop)
    '*'        [reduce using rule 52 (unop)]
    '/'        reduce using rule 39 (binop)
    '/'        [reduce using rule 52 (unop)]
    '%'        reduce using rule 39 (binop)
    '%'        [reduce using rule 52 (unop)]
    ')'        reduce using rule 39 (binop)
    ')'        [reduce using rule 52 (unop)]
    ';'        reduce using rule 39 (binop)
    ';'        [reduce using rule 52 (unop)]
    ','        reduce using rule 39 (binop)
    ','        [reduce using rule 52 (unop)]
    '='        reduce using rule 39 (binop)
    '='        [reduce using rule 52 (unop)]
    '['        reduce using rule 39 (binop)
    '['        [reduce using rule 52 (unop)]
    ']'        reduce using rule 39 (binop)
    ']'        [reduce using rule 52 (unop)]
    $default   reduce using rule 39 (binop)

    expr      go to state 117
    binop     go to state 50
    unop      go to state 51
    call      go to state 56
    variable  go to state 57
    constant  go to state 58


State 91

   58 statement: expr ';' .

    $default  reduce using rule 58 (statement)


State 92

   40 binop: expr '=' . expr

    TOK_NULL       shift, and go to state 35
    TOK_NEW        shift, and go to state 36
    TOK_IDENT      shift, and go to state 73
    TOK_INTCON     shift, and go to state 38
    TOK_CHARCON    shift, and go to state 39
    TOK_STRINGCON  shift, and go to state 40
    '+'            shift, and go to state 41
    '-'            shift, and go to state 42
    '('            shift, and go to state 43

    TOK_ARROW  reduce using rule 39 (binop)
    TOK_ARROW  [reduce using rule 52 (unop)]
    TOK_EQ     reduce using rule 39 (binop)
    TOK_EQ     [reduce using rule 52 (unop)]
    TOK_NE     reduce using rule 39 (binop)
    TOK_NE     [reduce using rule 52 (unop)]
    TOK_LT     reduce using rule 39 (binop)
    TOK_LT     [reduce using rule 52 (unop)]
    TOK_LE     reduce using rule 39 (binop)
    TOK_LE     [reduce using rule 52 (unop)]
    TOK_GT     reduce using rule 39 (binop)
    TOK_GT     [reduce using rule 52 (unop)]
    TOK_GE     reduce using rule 39 (binop)
    TOK_GE     [reduce using rule 52 (unop)]
    '+'        [reduce using rule 39 (binop)]
    '+'        [reduce using rule 52 (unop)]
    '-'        [reduce using rule 39 (binop)]
    '-'        [reduce using rule 52 (unop)]
    '*'        reduce using rule 39 (binop)
    '*'        [reduce using rule 52 (unop)]
    '/'        reduce using rule 39 (binop)
    '/'        [reduce using rule 52 (unop)]
    '%'        reduce using rule 39 (binop)
    '%'        [reduce using rule 52 (unop)]
    ')'        reduce using rule 39 (binop)
    ')'        [reduce using rule 52 (unop)]
    ';'        reduce using rule 39 (binop)
    ';'        [reduce using rule 52 (unop)]
    ','        reduce using rule 39 (binop)
    ','        [reduce using rule 52 (unop)]
    '='        reduce using rule 39 (binop)
    '='        [reduce using rule 52 (unop)]
    '['        reduce using rule 39 (binop)
    '['        [reduce using rule 52 (unop)]
    ']'        reduce using rule 39 (binop)
    ']'        [reduce using rule 52 (unop)]
    $default   reduce using rule 39 (binop)

    expr      go to state 118
    binop     go to state 50
    unop      go to state 51
    call      go to state 56
    variable  go to state 57
    constant  go to state 58


State 93

   71 variable: expr '[' . expr ']'

    TOK_NULL       shift, and go to state 35
    TOK_NEW        shift, and go to state 36
    TOK_IDENT      shift, and go to state 73
    TOK_INTCON     shift, and go to state 38
    TOK_CHARCON    shift, and go to state 39
    TOK_STRINGCON  shift, and go to state 40
    '+'            shift, and go to state 41
    '-'            shift, and go to state 42
    '('            shift, and go to state 43

    TOK_ARROW  reduce using rule 39 (binop)
    TOK_ARROW  [reduce using rule 52 (unop)]
    TOK_EQ     reduce using rule 39 (binop)
    TOK_EQ     [reduce using rule 52 (unop)]
    TOK_NE     reduce using rule 39 (binop)
    TOK_NE     [reduce using rule 52 (unop)]
    TOK_LT     reduce using rule 39 (binop)
    TOK_LT     [reduce using rule 52 (unop)]
    TOK_LE     reduce using rule 39 (binop)
    TOK_LE     [reduce using rule 52 (unop)]
    TOK_GT     reduce using rule 39 (binop)
    TOK_GT     [reduce using rule 52 (unop)]
    TOK_GE     reduce using rule 39 (binop)
    TOK_GE     [reduce using rule 52 (unop)]
    '+'        [reduce using rule 39 (binop)]
    '+'        [reduce using rule 52 (unop)]
    '-'        [reduce using rule 39 (binop)]
    '-'        [reduce using rule 52 (unop)]
    '*'        reduce using rule 39 (binop)
    '*'        [reduce using rule 52 (unop)]
    '/'        reduce using rule 39 (binop)
    '/'        [reduce using rule 52 (unop)]
    '%'        reduce using rule 39 (binop)
    '%'        [reduce using rule 52 (unop)]
    '='        reduce using rule 39 (binop)
    '='        [reduce using rule 52 (unop)]
    '['        reduce using rule 39 (binop)
    '['        [reduce using rule 52 (unop)]
    ']'        reduce using rule 39 (binop)
    ']'        [reduce using rule 52 (unop)]
    $default   reduce using rule 39 (binop)

    expr      go to state 119
    binop     go to state 50
    unop      go to state 51
    call      go to state 56
    variable  go to state 57
    constant  go to state 58


State 94

   60 block: blockHelp '}' .

    $default  reduce using rule 60 (block)


State 95

   61 blockHelp: blockHelp statement .

    $default  reduce using rule 61 (blockHelp)


State 96

   16 param: param ',' identdec .

    $default  reduce using rule 16 (param)


State 97

   11 globaldecl: identdec TOK_VARDECL constant ';' .

    $default  reduce using rule 11 (globaldecl)


State 98

   30 ifelse: TOK_IF '(' expr . ')' statement TOK_ELSE statement
   31       | TOK_IF '(' expr . ')' statement
   40 binop: expr . '=' expr
   41      | expr . '+' expr
   42      | expr . '-' expr
   43      | expr . '*' expr
   44      | expr . '/' expr
   45      | expr . '%' expr
   46      | expr . TOK_EQ expr
   47      | expr . TOK_NE expr
   48      | expr . TOK_LT expr
   49      | expr . TOK_LE expr
   50      | expr . TOK_GT expr
   51      | expr . TOK_GE expr
   71 variable: expr . '[' expr ']'
   72         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 79
    TOK_EQ     shift, and go to state 80
    TOK_NE     shift, and go to state 81
    TOK_LT     shift, and go to state 82
    TOK_LE     shift, and go to state 83
    TOK_GT     shift, and go to state 84
    TOK_GE     shift, and go to state 85
    '+'        shift, and go to state 86
    '-'        shift, and go to state 87
    '*'        shift, and go to state 88
    '/'        shift, and go to state 89
    '%'        shift, and go to state 90
    ')'        shift, and go to state 120
    '='        shift, and go to state 92
    '['        shift, and go to state 93


State 99

   40 binop: expr . '=' expr
   41      | expr . '+' expr
   42      | expr . '-' expr
   43      | expr . '*' expr
   44      | expr . '/' expr
   45      | expr . '%' expr
   46      | expr . TOK_EQ expr
   47      | expr . TOK_NE expr
   48      | expr . TOK_LT expr
   49      | expr . TOK_LE expr
   50      | expr . TOK_GT expr
   51      | expr . TOK_GE expr
   63 while: TOK_WHILE '(' expr . ')' statement
   71 variable: expr . '[' expr ']'
   72         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 79
    TOK_EQ     shift, and go to state 80
    TOK_NE     shift, and go to state 81
    TOK_LT     shift, and go to state 82
    TOK_LE     shift, and go to state 83
    TOK_GT     shift, and go to state 84
    TOK_GE     shift, and go to state 85
    '+'        shift, and go to state 86
    '-'        shift, and go to state 87
    '*'        shift, and go to state 88
    '/'        shift, and go to state 89
    '%'        shift, and go to state 90
    ')'        shift, and go to state 121
    '='        shift, and go to state 92
    '['        shift, and go to state 93


State 100

   65 allocation: TOK_STRING '(' . expr ')'

    TOK_NULL       shift, and go to state 35
    TOK_NEW        shift, and go to state 36
    TOK_IDENT      shift, and go to state 73
    TOK_INTCON     shift, and go to state 38
    TOK_CHARCON    shift, and go to state 39
    TOK_STRINGCON  shift, and go to state 40
    '+'            shift, and go to state 41
    '-'            shift, and go to state 42
    '('            shift, and go to state 43

    TOK_ARROW  reduce using rule 39 (binop)
    TOK_ARROW  [reduce using rule 52 (unop)]
    TOK_EQ     reduce using rule 39 (binop)
    TOK_EQ     [reduce using rule 52 (unop)]
    TOK_NE     reduce using rule 39 (binop)
    TOK_NE     [reduce using rule 52 (unop)]
    TOK_LT     reduce using rule 39 (binop)
    TOK_LT     [reduce using rule 52 (unop)]
    TOK_LE     reduce using rule 39 (binop)
    TOK_LE     [reduce using rule 52 (unop)]
    TOK_GT     reduce using rule 39 (binop)
    TOK_GT     [reduce using rule 52 (unop)]
    TOK_GE     reduce using rule 39 (binop)
    TOK_GE     [reduce using rule 52 (unop)]
    '+'        [reduce using rule 39 (binop)]
    '+'        [reduce using rule 52 (unop)]
    '-'        [reduce using rule 39 (binop)]
    '-'        [reduce using rule 52 (unop)]
    '*'        reduce using rule 39 (binop)
    '*'        [reduce using rule 52 (unop)]
    '/'        reduce using rule 39 (binop)
    '/'        [reduce using rule 52 (unop)]
    '%'        reduce using rule 39 (binop)
    '%'        [reduce using rule 52 (unop)]
    ')'        reduce using rule 39 (binop)
    ')'        [reduce using rule 52 (unop)]
    '='        reduce using rule 39 (binop)
    '='        [reduce using rule 52 (unop)]
    '['        reduce using rule 39 (binop)
    '['        [reduce using rule 52 (unop)]
    $default   reduce using rule 39 (binop)

    expr      go to state 122
    binop     go to state 50
    unop      go to state 51
    call      go to state 56
    variable  go to state 57
    constant  go to state 58


State 101

   66 allocation: basetype '[' . expr ']'

    TOK_NULL       shift, and go to state 35
    TOK_NEW        shift, and go to state 36
    TOK_IDENT      shift, and go to state 73
    TOK_INTCON     shift, and go to state 38
    TOK_CHARCON    shift, and go to state 39
    TOK_STRINGCON  shift, and go to state 40
    '+'            shift, and go to state 41
    '-'            shift, and go to state 42
    '('            shift, and go to state 43

    TOK_ARROW  reduce using rule 39 (binop)
    TOK_ARROW  [reduce using rule 52 (unop)]
    TOK_EQ     reduce using rule 39 (binop)
    TOK_EQ     [reduce using rule 52 (unop)]
    TOK_NE     reduce using rule 39 (binop)
    TOK_NE     [reduce using rule 52 (unop)]
    TOK_LT     reduce using rule 39 (binop)
    TOK_LT     [reduce using rule 52 (unop)]
    TOK_LE     reduce using rule 39 (binop)
    TOK_LE     [reduce using rule 52 (unop)]
    TOK_GT     reduce using rule 39 (binop)
    TOK_GT     [reduce using rule 52 (unop)]
    TOK_GE     reduce using rule 39 (binop)
    TOK_GE     [reduce using rule 52 (unop)]
    '+'        [reduce using rule 39 (binop)]
    '+'        [reduce using rule 52 (unop)]
    '-'        [reduce using rule 39 (binop)]
    '-'        [reduce using rule 52 (unop)]
    '*'        reduce using rule 39 (binop)
    '*'        [reduce using rule 52 (unop)]
    '/'        reduce using rule 39 (binop)
    '/'        [reduce using rule 52 (unop)]
    '%'        reduce using rule 39 (binop)
    '%'        [reduce using rule 52 (unop)]
    '='        reduce using rule 39 (binop)
    '='        [reduce using rule 52 (unop)]
    '['        reduce using rule 39 (binop)
    '['        [reduce using rule 52 (unop)]
    ']'        reduce using rule 39 (binop)
    ']'        [reduce using rule 52 (unop)]
    $default   reduce using rule 39 (binop)

    expr      go to state 123
    binop     go to state 50
    unop      go to state 51
    call      go to state 56
    variable  go to state 57
    constant  go to state 58


State 102

   40 binop: expr . '=' expr
   41      | expr . '+' expr
   42      | expr . '-' expr
   43      | expr . '*' expr
   44      | expr . '/' expr
   45      | expr . '%' expr
   46      | expr . TOK_EQ expr
   47      | expr . TOK_NE expr
   48      | expr . TOK_LT expr
   49      | expr . TOK_LE expr
   50      | expr . TOK_GT expr
   51      | expr . TOK_GE expr
   68 exprList: expr .
   71 variable: expr . '[' expr ']'
   72         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 79
    TOK_EQ     shift, and go to state 80
    TOK_NE     shift, and go to state 81
    TOK_LT     shift, and go to state 82
    TOK_LE     shift, and go to state 83
    TOK_GT     shift, and go to state 84
    TOK_GE     shift, and go to state 85
    '+'        shift, and go to state 86
    '-'        shift, and go to state 87
    '*'        shift, and go to state 88
    '/'        shift, and go to state 89
    '%'        shift, and go to state 90
    '='        shift, and go to state 92
    '['        shift, and go to state 93

    $default  reduce using rule 68 (exprList)


State 103

   67 exprList: exprList . ',' expr
   69 call: TOK_IDENT '(' exprList . ')'

    ')'  shift, and go to state 124
    ','  shift, and go to state 125


State 104

   36 expr: '(' expr ')' .

    $default  reduce using rule 36 (expr)


State 105

   29 localdecl: identdec TOK_VARDECL expr . ';'
   40 binop: expr . '=' expr
   41      | expr . '+' expr
   42      | expr . '-' expr
   43      | expr . '*' expr
   44      | expr . '/' expr
   45      | expr . '%' expr
   46      | expr . TOK_EQ expr
   47      | expr . TOK_NE expr
   48      | expr . TOK_LT expr
   49      | expr . TOK_LE expr
   50      | expr . TOK_GT expr
   51      | expr . TOK_GE expr
   71 variable: expr . '[' expr ']'
   72         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 79
    TOK_EQ     shift, and go to state 80
    TOK_NE     shift, and go to state 81
    TOK_LT     shift, and go to state 82
    TOK_LE     shift, and go to state 83
    TOK_GT     shift, and go to state 84
    TOK_GE     shift, and go to state 85
    '+'        shift, and go to state 86
    '-'        shift, and go to state 87
    '*'        shift, and go to state 88
    '/'        shift, and go to state 89
    '%'        shift, and go to state 90
    ';'        shift, and go to state 126
    '='        shift, and go to state 92
    '['        shift, and go to state 93


State 106

   72 variable: expr TOK_ARROW TOK_IDENT .

    $default  reduce using rule 72 (variable)


State 107

   40 binop: expr . '=' expr
   41      | expr . '+' expr
   42      | expr . '-' expr
   43      | expr . '*' expr
   44      | expr . '/' expr
   45      | expr . '%' expr
   46      | expr . TOK_EQ expr
   46      | expr TOK_EQ expr .
   47      | expr . TOK_NE expr
   48      | expr . TOK_LT expr
   49      | expr . TOK_LE expr
   50      | expr . TOK_GT expr
   51      | expr . TOK_GE expr
   71 variable: expr . '[' expr ']'
   72         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 79
    '+'        shift, and go to state 86
    '-'        shift, and go to state 87
    '*'        shift, and go to state 88
    '/'        shift, and go to state 89
    '%'        shift, and go to state 90
    '='        shift, and go to state 92
    '['        shift, and go to state 93

    '='       [reduce using rule 46 (binop)]
    '['       [reduce using rule 46 (binop)]
    $default  reduce using rule 46 (binop)


State 108

   40 binop: expr . '=' expr
   41      | expr . '+' expr
   42      | expr . '-' expr
   43      | expr . '*' expr
   44      | expr . '/' expr
   45      | expr . '%' expr
   46      | expr . TOK_EQ expr
   47      | expr . TOK_NE expr
   47      | expr TOK_NE expr .
   48      | expr . TOK_LT expr
   49      | expr . TOK_LE expr
   50      | expr . TOK_GT expr
   51      | expr . TOK_GE expr
   71 variable: expr . '[' expr ']'
   72         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 79
    '+'        shift, and go to state 86
    '-'        shift, and go to state 87
    '*'        shift, and go to state 88
    '/'        shift, and go to state 89
    '%'        shift, and go to state 90
    '='        shift, and go to state 92
    '['        shift, and go to state 93

    '='       [reduce using rule 47 (binop)]
    '['       [reduce using rule 47 (binop)]
    $default  reduce using rule 47 (binop)


State 109

   40 binop: expr . '=' expr
   41      | expr . '+' expr
   42      | expr . '-' expr
   43      | expr . '*' expr
   44      | expr . '/' expr
   45      | expr . '%' expr
   46      | expr . TOK_EQ expr
   47      | expr . TOK_NE expr
   48      | expr . TOK_LT expr
   48      | expr TOK_LT expr .
   49      | expr . TOK_LE expr
   50      | expr . TOK_GT expr
   51      | expr . TOK_GE expr
   71 variable: expr . '[' expr ']'
   72         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 79
    '+'        shift, and go to state 86
    '-'        shift, and go to state 87
    '*'        shift, and go to state 88
    '/'        shift, and go to state 89
    '%'        shift, and go to state 90
    '='        shift, and go to state 92
    '['        shift, and go to state 93

    '='       [reduce using rule 48 (binop)]
    '['       [reduce using rule 48 (binop)]
    $default  reduce using rule 48 (binop)


State 110

   40 binop: expr . '=' expr
   41      | expr . '+' expr
   42      | expr . '-' expr
   43      | expr . '*' expr
   44      | expr . '/' expr
   45      | expr . '%' expr
   46      | expr . TOK_EQ expr
   47      | expr . TOK_NE expr
   48      | expr . TOK_LT expr
   49      | expr . TOK_LE expr
   49      | expr TOK_LE expr .
   50      | expr . TOK_GT expr
   51      | expr . TOK_GE expr
   71 variable: expr . '[' expr ']'
   72         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 79
    '+'        shift, and go to state 86
    '-'        shift, and go to state 87
    '*'        shift, and go to state 88
    '/'        shift, and go to state 89
    '%'        shift, and go to state 90
    '='        shift, and go to state 92
    '['        shift, and go to state 93

    '='       [reduce using rule 49 (binop)]
    '['       [reduce using rule 49 (binop)]
    $default  reduce using rule 49 (binop)


State 111

   40 binop: expr . '=' expr
   41      | expr . '+' expr
   42      | expr . '-' expr
   43      | expr . '*' expr
   44      | expr . '/' expr
   45      | expr . '%' expr
   46      | expr . TOK_EQ expr
   47      | expr . TOK_NE expr
   48      | expr . TOK_LT expr
   49      | expr . TOK_LE expr
   50      | expr . TOK_GT expr
   50      | expr TOK_GT expr .
   51      | expr . TOK_GE expr
   71 variable: expr . '[' expr ']'
   72         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 79
    '+'        shift, and go to state 86
    '-'        shift, and go to state 87
    '*'        shift, and go to state 88
    '/'        shift, and go to state 89
    '%'        shift, and go to state 90
    '='        shift, and go to state 92
    '['        shift, and go to state 93

    '='       [reduce using rule 50 (binop)]
    '['       [reduce using rule 50 (binop)]
    $default  reduce using rule 50 (binop)


State 112

   40 binop: expr . '=' expr
   41      | expr . '+' expr
   42      | expr . '-' expr
   43      | expr . '*' expr
   44      | expr . '/' expr
   45      | expr . '%' expr
   46      | expr . TOK_EQ expr
   47      | expr . TOK_NE expr
   48      | expr . TOK_LT expr
   49      | expr . TOK_LE expr
   50      | expr . TOK_GT expr
   51      | expr . TOK_GE expr
   51      | expr TOK_GE expr .
   71 variable: expr . '[' expr ']'
   72         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 79
    '+'        shift, and go to state 86
    '-'        shift, and go to state 87
    '*'        shift, and go to state 88
    '/'        shift, and go to state 89
    '%'        shift, and go to state 90
    '='        shift, and go to state 92
    '['        shift, and go to state 93

    '='       [reduce using rule 51 (binop)]
    '['       [reduce using rule 51 (binop)]
    $default  reduce using rule 51 (binop)


State 113

   40 binop: expr . '=' expr
   41      | expr . '+' expr
   41      | expr '+' expr .
   42      | expr . '-' expr
   43      | expr . '*' expr
   44      | expr . '/' expr
   45      | expr . '%' expr
   46      | expr . TOK_EQ expr
   47      | expr . TOK_NE expr
   48      | expr . TOK_LT expr
   49      | expr . TOK_LE expr
   50      | expr . TOK_GT expr
   51      | expr . TOK_GE expr
   71 variable: expr . '[' expr ']'
   72         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 79
    '*'        shift, and go to state 88
    '/'        shift, and go to state 89
    '%'        shift, and go to state 90
    '='        shift, and go to state 92
    '['        shift, and go to state 93

    '='       [reduce using rule 41 (binop)]
    '['       [reduce using rule 41 (binop)]
    $default  reduce using rule 41 (binop)


State 114

   40 binop: expr . '=' expr
   41      | expr . '+' expr
   42      | expr . '-' expr
   42      | expr '-' expr .
   43      | expr . '*' expr
   44      | expr . '/' expr
   45      | expr . '%' expr
   46      | expr . TOK_EQ expr
   47      | expr . TOK_NE expr
   48      | expr . TOK_LT expr
   49      | expr . TOK_LE expr
   50      | expr . TOK_GT expr
   51      | expr . TOK_GE expr
   71 variable: expr . '[' expr ']'
   72         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 79
    '*'        shift, and go to state 88
    '/'        shift, and go to state 89
    '%'        shift, and go to state 90
    '='        shift, and go to state 92
    '['        shift, and go to state 93

    '='       [reduce using rule 42 (binop)]
    '['       [reduce using rule 42 (binop)]
    $default  reduce using rule 42 (binop)


State 115

   40 binop: expr . '=' expr
   41      | expr . '+' expr
   42      | expr . '-' expr
   43      | expr . '*' expr
   43      | expr '*' expr .
   44      | expr . '/' expr
   45      | expr . '%' expr
   46      | expr . TOK_EQ expr
   47      | expr . TOK_NE expr
   48      | expr . TOK_LT expr
   49      | expr . TOK_LE expr
   50      | expr . TOK_GT expr
   51      | expr . TOK_GE expr
   71 variable: expr . '[' expr ']'
   72         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 79
    '='        shift, and go to state 92
    '['        shift, and go to state 93

    '='       [reduce using rule 43 (binop)]
    '['       [reduce using rule 43 (binop)]
    $default  reduce using rule 43 (binop)


State 116

   40 binop: expr . '=' expr
   41      | expr . '+' expr
   42      | expr . '-' expr
   43      | expr . '*' expr
   44      | expr . '/' expr
   44      | expr '/' expr .
   45      | expr . '%' expr
   46      | expr . TOK_EQ expr
   47      | expr . TOK_NE expr
   48      | expr . TOK_LT expr
   49      | expr . TOK_LE expr
   50      | expr . TOK_GT expr
   51      | expr . TOK_GE expr
   71 variable: expr . '[' expr ']'
   72         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 79
    '='        shift, and go to state 92
    '['        shift, and go to state 93

    '='       [reduce using rule 44 (binop)]
    '['       [reduce using rule 44 (binop)]
    $default  reduce using rule 44 (binop)


State 117

   40 binop: expr . '=' expr
   41      | expr . '+' expr
   42      | expr . '-' expr
   43      | expr . '*' expr
   44      | expr . '/' expr
   45      | expr . '%' expr
   45      | expr '%' expr .
   46      | expr . TOK_EQ expr
   47      | expr . TOK_NE expr
   48      | expr . TOK_LT expr
   49      | expr . TOK_LE expr
   50      | expr . TOK_GT expr
   51      | expr . TOK_GE expr
   71 variable: expr . '[' expr ']'
   72         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 79
    '='        shift, and go to state 92
    '['        shift, and go to state 93

    '='       [reduce using rule 45 (binop)]
    '['       [reduce using rule 45 (binop)]
    $default  reduce using rule 45 (binop)


State 118

   40 binop: expr . '=' expr
   40      | expr '=' expr .
   41      | expr . '+' expr
   42      | expr . '-' expr
   43      | expr . '*' expr
   44      | expr . '/' expr
   45      | expr . '%' expr
   46      | expr . TOK_EQ expr
   47      | expr . TOK_NE expr
   48      | expr . TOK_LT expr
   49      | expr . TOK_LE expr
   50      | expr . TOK_GT expr
   51      | expr . TOK_GE expr
   71 variable: expr . '[' expr ']'
   72         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 79
    TOK_EQ     shift, and go to state 80
    TOK_NE     shift, and go to state 81
    TOK_LT     shift, and go to state 82
    TOK_LE     shift, and go to state 83
    TOK_GT     shift, and go to state 84
    TOK_GE     shift, and go to state 85
    '+'        shift, and go to state 86
    '-'        shift, and go to state 87
    '*'        shift, and go to state 88
    '/'        shift, and go to state 89
    '%'        shift, and go to state 90
    '='        shift, and go to state 92
    '['        shift, and go to state 93

    TOK_ARROW  [reduce using rule 40 (binop)]
    TOK_EQ     [reduce using rule 40 (binop)]
    TOK_NE     [reduce using rule 40 (binop)]
    TOK_LT     [reduce using rule 40 (binop)]
    TOK_LE     [reduce using rule 40 (binop)]
    TOK_GT     [reduce using rule 40 (binop)]
    TOK_GE     [reduce using rule 40 (binop)]
    '+'        [reduce using rule 40 (binop)]
    '-'        [reduce using rule 40 (binop)]
    '*'        [reduce using rule 40 (binop)]
    '/'        [reduce using rule 40 (binop)]
    '%'        [reduce using rule 40 (binop)]
    '='        [reduce using rule 40 (binop)]
    '['        [reduce using rule 40 (binop)]
    $default   reduce using rule 40 (binop)


State 119

   40 binop: expr . '=' expr
   41      | expr . '+' expr
   42      | expr . '-' expr
   43      | expr . '*' expr
   44      | expr . '/' expr
   45      | expr . '%' expr
   46      | expr . TOK_EQ expr
   47      | expr . TOK_NE expr
   48      | expr . TOK_LT expr
   49      | expr . TOK_LE expr
   50      | expr . TOK_GT expr
   51      | expr . TOK_GE expr
   71 variable: expr . '[' expr ']'
   71         | expr '[' expr . ']'
   72         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 79
    TOK_EQ     shift, and go to state 80
    TOK_NE     shift, and go to state 81
    TOK_LT     shift, and go to state 82
    TOK_LE     shift, and go to state 83
    TOK_GT     shift, and go to state 84
    TOK_GE     shift, and go to state 85
    '+'        shift, and go to state 86
    '-'        shift, and go to state 87
    '*'        shift, and go to state 88
    '/'        shift, and go to state 89
    '%'        shift, and go to state 90
    '='        shift, and go to state 92
    '['        shift, and go to state 93
    ']'        shift, and go to state 127


State 120

   30 ifelse: TOK_IF '(' expr ')' . statement TOK_ELSE statement
   31       | TOK_IF '(' expr ')' . statement

    TOK_IF         shift, and go to state 33
    TOK_WHILE      shift, and go to state 34
    TOK_NULL       shift, and go to state 35
    TOK_NEW        shift, and go to state 36
    TOK_IDENT      shift, and go to state 73
    TOK_INTCON     shift, and go to state 38
    TOK_CHARCON    shift, and go to state 39
    TOK_STRINGCON  shift, and go to state 40
    '+'            shift, and go to state 41
    '-'            shift, and go to state 42
    '('            shift, and go to state 43
    ';'            shift, and go to state 44
    '{'            shift, and go to state 45

    TOK_ARROW  reduce using rule 39 (binop)
    TOK_ARROW  [reduce using rule 52 (unop)]
    TOK_EQ     reduce using rule 39 (binop)
    TOK_EQ     [reduce using rule 52 (unop)]
    TOK_NE     reduce using rule 39 (binop)
    TOK_NE     [reduce using rule 52 (unop)]
    TOK_LT     reduce using rule 39 (binop)
    TOK_LT     [reduce using rule 52 (unop)]
    TOK_LE     reduce using rule 39 (binop)
    TOK_LE     [reduce using rule 52 (unop)]
    TOK_GT     reduce using rule 39 (binop)
    TOK_GT     [reduce using rule 52 (unop)]
    TOK_GE     reduce using rule 39 (binop)
    TOK_GE     [reduce using rule 52 (unop)]
    '+'        [reduce using rule 39 (binop)]
    '+'        [reduce using rule 52 (unop)]
    '-'        [reduce using rule 39 (binop)]
    '-'        [reduce using rule 52 (unop)]
    '*'        reduce using rule 39 (binop)
    '*'        [reduce using rule 52 (unop)]
    '/'        reduce using rule 39 (binop)
    '/'        [reduce using rule 52 (unop)]
    '%'        reduce using rule 39 (binop)
    '%'        [reduce using rule 52 (unop)]
    ';'        [reduce using rule 39 (binop)]
    ';'        [reduce using rule 52 (unop)]
    '='        reduce using rule 39 (binop)
    '='        [reduce using rule 52 (unop)]
    '['        reduce using rule 39 (binop)
    '['        [reduce using rule 52 (unop)]
    $default   reduce using rule 39 (binop)

    ifelse     go to state 48
    expr       go to state 49
    binop      go to state 50
    unop       go to state 51
    statement  go to state 128
    block      go to state 53
    blockHelp  go to state 54
    while      go to state 55
    call       go to state 56
    variable   go to state 57
    constant   go to state 58


State 121

   63 while: TOK_WHILE '(' expr ')' . statement

    TOK_IF         shift, and go to state 33
    TOK_WHILE      shift, and go to state 34
    TOK_NULL       shift, and go to state 35
    TOK_NEW        shift, and go to state 36
    TOK_IDENT      shift, and go to state 73
    TOK_INTCON     shift, and go to state 38
    TOK_CHARCON    shift, and go to state 39
    TOK_STRINGCON  shift, and go to state 40
    '+'            shift, and go to state 41
    '-'            shift, and go to state 42
    '('            shift, and go to state 43
    ';'            shift, and go to state 44
    '{'            shift, and go to state 45

    TOK_ARROW  reduce using rule 39 (binop)
    TOK_ARROW  [reduce using rule 52 (unop)]
    TOK_EQ     reduce using rule 39 (binop)
    TOK_EQ     [reduce using rule 52 (unop)]
    TOK_NE     reduce using rule 39 (binop)
    TOK_NE     [reduce using rule 52 (unop)]
    TOK_LT     reduce using rule 39 (binop)
    TOK_LT     [reduce using rule 52 (unop)]
    TOK_LE     reduce using rule 39 (binop)
    TOK_LE     [reduce using rule 52 (unop)]
    TOK_GT     reduce using rule 39 (binop)
    TOK_GT     [reduce using rule 52 (unop)]
    TOK_GE     reduce using rule 39 (binop)
    TOK_GE     [reduce using rule 52 (unop)]
    '+'        [reduce using rule 39 (binop)]
    '+'        [reduce using rule 52 (unop)]
    '-'        [reduce using rule 39 (binop)]
    '-'        [reduce using rule 52 (unop)]
    '*'        reduce using rule 39 (binop)
    '*'        [reduce using rule 52 (unop)]
    '/'        reduce using rule 39 (binop)
    '/'        [reduce using rule 52 (unop)]
    '%'        reduce using rule 39 (binop)
    '%'        [reduce using rule 52 (unop)]
    ';'        [reduce using rule 39 (binop)]
    ';'        [reduce using rule 52 (unop)]
    '='        reduce using rule 39 (binop)
    '='        [reduce using rule 52 (unop)]
    '['        reduce using rule 39 (binop)
    '['        [reduce using rule 52 (unop)]
    $default   reduce using rule 39 (binop)

    ifelse     go to state 48
    expr       go to state 49
    binop      go to state 50
    unop       go to state 51
    statement  go to state 129
    block      go to state 53
    blockHelp  go to state 54
    while      go to state 55
    call       go to state 56
    variable   go to state 57
    constant   go to state 58


State 122

   40 binop: expr . '=' expr
   41      | expr . '+' expr
   42      | expr . '-' expr
   43      | expr . '*' expr
   44      | expr . '/' expr
   45      | expr . '%' expr
   46      | expr . TOK_EQ expr
   47      | expr . TOK_NE expr
   48      | expr . TOK_LT expr
   49      | expr . TOK_LE expr
   50      | expr . TOK_GT expr
   51      | expr . TOK_GE expr
   65 allocation: TOK_STRING '(' expr . ')'
   71 variable: expr . '[' expr ']'
   72         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 79
    TOK_EQ     shift, and go to state 80
    TOK_NE     shift, and go to state 81
    TOK_LT     shift, and go to state 82
    TOK_LE     shift, and go to state 83
    TOK_GT     shift, and go to state 84
    TOK_GE     shift, and go to state 85
    '+'        shift, and go to state 86
    '-'        shift, and go to state 87
    '*'        shift, and go to state 88
    '/'        shift, and go to state 89
    '%'        shift, and go to state 90
    ')'        shift, and go to state 130
    '='        shift, and go to state 92
    '['        shift, and go to state 93


State 123

   40 binop: expr . '=' expr
   41      | expr . '+' expr
   42      | expr . '-' expr
   43      | expr . '*' expr
   44      | expr . '/' expr
   45      | expr . '%' expr
   46      | expr . TOK_EQ expr
   47      | expr . TOK_NE expr
   48      | expr . TOK_LT expr
   49      | expr . TOK_LE expr
   50      | expr . TOK_GT expr
   51      | expr . TOK_GE expr
   66 allocation: basetype '[' expr . ']'
   71 variable: expr . '[' expr ']'
   72         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 79
    TOK_EQ     shift, and go to state 80
    TOK_NE     shift, and go to state 81
    TOK_LT     shift, and go to state 82
    TOK_LE     shift, and go to state 83
    TOK_GT     shift, and go to state 84
    TOK_GE     shift, and go to state 85
    '+'        shift, and go to state 86
    '-'        shift, and go to state 87
    '*'        shift, and go to state 88
    '/'        shift, and go to state 89
    '%'        shift, and go to state 90
    '='        shift, and go to state 92
    '['        shift, and go to state 93
    ']'        shift, and go to state 131


State 124

   69 call: TOK_IDENT '(' exprList ')' .

    $default  reduce using rule 69 (call)


State 125

   67 exprList: exprList ',' . expr

    TOK_NULL       shift, and go to state 35
    TOK_NEW        shift, and go to state 36
    TOK_IDENT      shift, and go to state 73
    TOK_INTCON     shift, and go to state 38
    TOK_CHARCON    shift, and go to state 39
    TOK_STRINGCON  shift, and go to state 40
    '+'            shift, and go to state 41
    '-'            shift, and go to state 42
    '('            shift, and go to state 43

    TOK_ARROW  reduce using rule 39 (binop)
    TOK_ARROW  [reduce using rule 52 (unop)]
    TOK_EQ     reduce using rule 39 (binop)
    TOK_EQ     [reduce using rule 52 (unop)]
    TOK_NE     reduce using rule 39 (binop)
    TOK_NE     [reduce using rule 52 (unop)]
    TOK_LT     reduce using rule 39 (binop)
    TOK_LT     [reduce using rule 52 (unop)]
    TOK_LE     reduce using rule 39 (binop)
    TOK_LE     [reduce using rule 52 (unop)]
    TOK_GT     reduce using rule 39 (binop)
    TOK_GT     [reduce using rule 52 (unop)]
    TOK_GE     reduce using rule 39 (binop)
    TOK_GE     [reduce using rule 52 (unop)]
    '+'        [reduce using rule 39 (binop)]
    '+'        [reduce using rule 52 (unop)]
    '-'        [reduce using rule 39 (binop)]
    '-'        [reduce using rule 52 (unop)]
    '*'        reduce using rule 39 (binop)
    '*'        [reduce using rule 52 (unop)]
    '/'        reduce using rule 39 (binop)
    '/'        [reduce using rule 52 (unop)]
    '%'        reduce using rule 39 (binop)
    '%'        [reduce using rule 52 (unop)]
    ')'        reduce using rule 39 (binop)
    ')'        [reduce using rule 52 (unop)]
    ','        reduce using rule 39 (binop)
    ','        [reduce using rule 52 (unop)]
    '='        reduce using rule 39 (binop)
    '='        [reduce using rule 52 (unop)]
    '['        reduce using rule 39 (binop)
    '['        [reduce using rule 52 (unop)]
    $default   reduce using rule 39 (binop)

    expr      go to state 132
    binop     go to state 50
    unop      go to state 51
    call      go to state 56
    variable  go to state 57
    constant  go to state 58


State 126

   29 localdecl: identdec TOK_VARDECL expr ';' .

    $default  reduce using rule 29 (localdecl)


State 127

   71 variable: expr '[' expr ']' .

    $default  reduce using rule 71 (variable)


State 128

   30 ifelse: TOK_IF '(' expr ')' statement . TOK_ELSE statement
   31       | TOK_IF '(' expr ')' statement .

    $default  reduce using rule 31 (ifelse)


State 129

   63 while: TOK_WHILE '(' expr ')' statement .

    $default  reduce using rule 63 (while)


State 130

   65 allocation: TOK_STRING '(' expr ')' .

    $default  reduce using rule 65 (allocation)


State 131

   66 allocation: basetype '[' expr ']' .

    $default  reduce using rule 66 (allocation)


State 132

   40 binop: expr . '=' expr
   41      | expr . '+' expr
   42      | expr . '-' expr
   43      | expr . '*' expr
   44      | expr . '/' expr
   45      | expr . '%' expr
   46      | expr . TOK_EQ expr
   47      | expr . TOK_NE expr
   48      | expr . TOK_LT expr
   49      | expr . TOK_LE expr
   50      | expr . TOK_GT expr
   51      | expr . TOK_GE expr
   67 exprList: exprList ',' expr .
   71 variable: expr . '[' expr ']'
   72         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 79
    TOK_EQ     shift, and go to state 80
    TOK_NE     shift, and go to state 81
    TOK_LT     shift, and go to state 82
    TOK_LE     shift, and go to state 83
    TOK_GT     shift, and go to state 84
    TOK_GE     shift, and go to state 85
    '+'        shift, and go to state 86
    '-'        shift, and go to state 87
    '*'        shift, and go to state 88
    '/'        shift, and go to state 89
    '%'        shift, and go to state 90
    '='        shift, and go to state 92
    '['        shift, and go to state 93

    $default  reduce using rule 67 (exprList)

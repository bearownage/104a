Nonterminals useless in grammar

   hfunc
   identList
   ifhelper


Terminals unused in grammar

   TOK_CHAR
   TOK_BR
   TOK_ROOT
   TOK_BLOCK
   TOK_CALL
   TOK_IFELSE
   TOK_INITDECL
   TOK_NEWARRAY
   TOK_TYPEID
   TOK_FIELD
   TOK_NEWSTR
   TOK_FUNCTION
   TOK_PROTOTYPE
   TOK_DECLID
   '('


Rules useless in grammar

   93 hfunc: hfunc ')'
   94      | hfunc param
   95      | identdec

   96 identList: identList ',' identdec
   97          | identdec

   98 ifhelper: ifhelper statement
   99         | ifhelper '{'
  100         | TOK_IF TOK_PARAM expr ')'


State 2 conflicts: 3 shift/reduce
State 11 conflicts: 3 shift/reduce
State 15 conflicts: 10 shift/reduce
State 20 conflicts: 2 shift/reduce
State 21 conflicts: 10 shift/reduce
State 22 conflicts: 10 shift/reduce
State 23 conflicts: 3 shift/reduce
State 38 conflicts: 3 shift/reduce
State 42 conflicts: 12 shift/reduce
State 47 conflicts: 2 shift/reduce
State 49 conflicts: 2 shift/reduce
State 50 conflicts: 1 shift/reduce
State 55 conflicts: 1 reduce/reduce
State 58 conflicts: 2 shift/reduce
State 61 conflicts: 2 shift/reduce
State 62 conflicts: 2 shift/reduce
State 70 conflicts: 19 shift/reduce, 16 reduce/reduce
State 73 conflicts: 3 shift/reduce
State 77 conflicts: 10 shift/reduce
State 79 conflicts: 10 shift/reduce
State 80 conflicts: 10 shift/reduce
State 81 conflicts: 10 shift/reduce
State 82 conflicts: 10 shift/reduce
State 83 conflicts: 10 shift/reduce
State 84 conflicts: 10 shift/reduce
State 85 conflicts: 10 shift/reduce
State 86 conflicts: 10 shift/reduce
State 87 conflicts: 10 shift/reduce
State 88 conflicts: 10 shift/reduce
State 89 conflicts: 10 shift/reduce
State 91 conflicts: 10 shift/reduce
State 92 conflicts: 2 shift/reduce
State 93 conflicts: 1 shift/reduce
State 97 conflicts: 15 shift/reduce
State 99 conflicts: 2 shift/reduce
State 103 conflicts: 2 shift/reduce
State 104 conflicts: 2 shift/reduce
State 114 conflicts: 1 shift/reduce
State 119 conflicts: 2 shift/reduce
State 121 conflicts: 2 shift/reduce
State 122 conflicts: 2 shift/reduce
State 123 conflicts: 2 shift/reduce
State 124 conflicts: 2 shift/reduce
State 125 conflicts: 2 shift/reduce
State 126 conflicts: 2 shift/reduce
State 127 conflicts: 2 shift/reduce
State 128 conflicts: 2 shift/reduce
State 129 conflicts: 2 shift/reduce
State 130 conflicts: 2 shift/reduce
State 131 conflicts: 2 shift/reduce
State 132 conflicts: 15 shift/reduce
State 135 conflicts: 3 shift/reduce
State 137 conflicts: 3 shift/reduce
State 141 conflicts: 2 shift/reduce
State 147 conflicts: 1 shift/reduce, 35 reduce/reduce
State 148 conflicts: 3 shift/reduce
State 153 conflicts: 3 shift/reduce
State 156 conflicts: 36 reduce/reduce


Grammar

    0 $accept: start $end

    1 start: program

    2 program: program structdef
    3        | program globaldecl
    4        | program function
    5        | program statement
    6        | program error '{'
    7        | program error ';'
    8        | %empty

    9 structdef: struc '}'

   10 struc: struc fielddecl ';'
   11      | TOK_STRUCT TOK_IDENT '{'

   12 fielddecl: basetype TOK_IDENT
   13          | basetype TOK_ARRAY TOK_IDENT

   14 globaldecl: identdec TOK_VARDECL constant ';'

   15 function: func fnbody '}' ';'
   16         | func fnbody '}'
   17         | func ';'

   18 func: func ')'
   19     | func param
   20     | identdec

   21 param: param ',' identdec
   22      | TOK_PARAM identdec
   23      | TOK_PARAM

   24 identdec: basetype TOK_ARRAY TOK_IDENT
   25         | basetype TOK_IDENT

   26 fnbody: fnbody statement
   27       | fnbody localdecl
   28       | '{' statement
   29       | '{' localdecl
   30       | '{'

   31 basetype: TOK_VOID
   32         | TOK_INT
   33         | TOK_STRING
   34         | TOK_IDENT

   35 localdecl: identdec TOK_VARDECL expr ';'

   36 ifelse: TOK_IF TOK_PARAM expr ')' statement TOK_ELSE statement
   37       | TOK_IF TOK_PARAM expr ')' statement
   38       | TOK_ELSE TOK_IF TOK_PARAM expr ')' statement
   39       | TOK_ELSE TOK_IF TOK_PARAM expr ')' block
   40       | TOK_IF TOK_PARAM expr ')' block
   41       | TOK_IF TOK_PARAM expr ')' block TOK_ELSE block

   42 expr: TOK_NEW allocation
   43     | binop
   44     | unop
   45     | call
   46     | TOK_PARAM expr ')'
   47     | variable
   48     | constant

   49 binop: %empty
   50      | expr '=' expr
   51      | expr TOK_VARDECL expr
   52      | expr '+' expr
   53      | expr '-' expr
   54      | expr '*' expr
   55      | expr '/' expr
   56      | expr '%' expr
   57      | expr TOK_EQ expr
   58      | expr TOK_NE expr
   59      | expr TOK_LT expr
   60      | expr TOK_LE expr
   61      | expr TOK_GT expr
   62      | expr TOK_GE expr

   63 unop: '+' expr
   64     | '-' expr
   65     | TOK_NOT expr

   66 statement: block
   67          | while
   68          | ifelse
   69          | return
   70          | expr ';'
   71          | ';'

   72 block: blockHelp '}'
   73      | blockHelp '}' ';'

   74 blockHelp: blockHelp statement
   75          | '{' statement

   76 while: TOK_WHILE TOK_PARAM expr ')' statement

   77 return: TOK_RETURN ';'
   78       | TOK_RETURN expr ';'

   79 allocation: TOK_IDENT
   80           | TOK_STRING TOK_PARAM expr ')'
   81           | basetype '[' expr ']'

   82 call: funCall ')'

   83 funCall: funCall ','
   84        | funCall expr
   85        | TOK_IDENT TOK_PARAM

   86 variable: TOK_IDENT
   87         | expr '[' expr ']'
   88         | expr TOK_ARROW TOK_IDENT

   89 constant: TOK_INTCON
   90         | TOK_STRINGCON
   91         | TOK_CHARCON
   92         | TOK_NULL


Terminals, with rules where they appear

$end (0) 0
'%' (37) 56
'(' (40)
')' (41) 18 36 37 38 39 40 41 46 76 80 82
'*' (42) 54
'+' (43) 52 63
',' (44) 21 83
'-' (45) 53 64
'/' (47) 55
';' (59) 7 10 14 15 17 35 70 71 73 77 78
'=' (61) 50
'[' (91) 81 87
']' (93) 81 87
'{' (123) 6 11 28 29 30 75
'}' (125) 9 15 16 72 73
error (256) 6 7
TOK_VOID (258) 31
TOK_CHAR (259)
TOK_INT (260) 32
TOK_STRING (261) 33 80
TOK_IF (262) 36 37 38 39 40 41
TOK_ELSE (263) 36 38 39 41
TOK_WHILE (264) 76
TOK_RETURN (265) 77 78
TOK_STRUCT (266) 11
TOK_NULL (267) 92
TOK_NEW (268) 42
TOK_VARDECL (269) 14 35 51
TOK_ARRAY (270) 13 24
TOK_ARROW (271) 88
TOK_BR (272)
TOK_EQ (273) 57
TOK_NE (274) 58
TOK_LT (275) 59
TOK_LE (276) 60
TOK_GT (277) 61
TOK_GE (278) 62
TOK_NOT (279) 65
TOK_IDENT (280) 11 12 13 24 25 34 79 85 86 88
TOK_INTCON (281) 89
TOK_CHARCON (282) 91
TOK_STRINGCON (283) 90
TOK_ROOT (284)
TOK_BLOCK (285)
TOK_CALL (286)
TOK_IFELSE (287)
TOK_INITDECL (288)
TOK_POS (289)
TOK_NEG (290)
TOK_NEWARRAY (291)
TOK_TYPEID (292)
TOK_FIELD (293)
TOK_NEWSTR (294)
TOK_PARAM (295) 22 23 36 37 38 39 40 41 46 76 80 85
TOK_FUNCTION (296)
TOK_PROTOTYPE (297)
TOK_DECLID (298)


Nonterminals, with rules where they appear

$accept (58)
    on left: 0
start (59)
    on left: 1, on right: 0
program (60)
    on left: 2 3 4 5 6 7 8, on right: 1 2 3 4 5 6 7
structdef (61)
    on left: 9, on right: 2
struc (62)
    on left: 10 11, on right: 9 10
fielddecl (63)
    on left: 12 13, on right: 10
globaldecl (64)
    on left: 14, on right: 3
function (65)
    on left: 15 16 17, on right: 4
func (66)
    on left: 18 19 20, on right: 15 16 17 18 19
param (67)
    on left: 21 22 23, on right: 19 21
identdec (68)
    on left: 24 25, on right: 14 20 21 22 35
fnbody (69)
    on left: 26 27 28 29 30, on right: 15 16 26 27
basetype (70)
    on left: 31 32 33 34, on right: 12 13 24 25 81
localdecl (71)
    on left: 35, on right: 27 29
ifelse (72)
    on left: 36 37 38 39 40 41, on right: 68
expr (73)
    on left: 42 43 44 45 46 47 48, on right: 35 36 37 38 39 40 41 46
    50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 70 76 78 80 81
    84 87 88
binop (74)
    on left: 49 50 51 52 53 54 55 56 57 58 59 60 61 62, on right: 43
unop (75)
    on left: 63 64 65, on right: 44
statement (76)
    on left: 66 67 68 69 70 71, on right: 5 26 28 36 37 38 74 75 76
block (77)
    on left: 72 73, on right: 39 40 41 66
blockHelp (78)
    on left: 74 75, on right: 72 73 74
while (79)
    on left: 76, on right: 67
return (80)
    on left: 77 78, on right: 69
allocation (81)
    on left: 79 80 81, on right: 42
call (82)
    on left: 82, on right: 45
funCall (83)
    on left: 83 84 85, on right: 82 83 84
variable (84)
    on left: 86 87 88, on right: 47
constant (85)
    on left: 89 90 91 92, on right: 14 48


State 0

    0 $accept: . start $end

    $default  reduce using rule 8 (program)

    start    go to state 1
    program  go to state 2


State 1

    0 $accept: start . $end

    $end  shift, and go to state 3


State 2

    1 start: program .
    2 program: program . structdef
    3        | program . globaldecl
    4        | program . function
    5        | program . statement
    6        | program . error '{'
    7        | program . error ';'

    error          shift, and go to state 4
    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_IF         shift, and go to state 8
    TOK_ELSE       shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_STRUCT     shift, and go to state 12
    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_NOT        shift, and go to state 15
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    TOK_PARAM      shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '{'            shift, and go to state 23
    ';'            shift, and go to state 24

    $end         reduce using rule 1 (start)
    TOK_VARDECL  reduce using rule 49 (binop)
    TOK_ARROW    reduce using rule 49 (binop)
    TOK_EQ       reduce using rule 49 (binop)
    TOK_NE       reduce using rule 49 (binop)
    TOK_LT       reduce using rule 49 (binop)
    TOK_LE       reduce using rule 49 (binop)
    TOK_GT       reduce using rule 49 (binop)
    TOK_GE       reduce using rule 49 (binop)
    '+'          [reduce using rule 49 (binop)]
    '-'          [reduce using rule 49 (binop)]
    '*'          reduce using rule 49 (binop)
    '/'          reduce using rule 49 (binop)
    '%'          reduce using rule 49 (binop)
    ';'          [reduce using rule 49 (binop)]
    '='          reduce using rule 49 (binop)
    '['          reduce using rule 49 (binop)

    structdef   go to state 25
    struc       go to state 26
    globaldecl  go to state 27
    function    go to state 28
    func        go to state 29
    identdec    go to state 30
    basetype    go to state 31
    ifelse      go to state 32
    expr        go to state 33
    binop       go to state 34
    unop        go to state 35
    statement   go to state 36
    block       go to state 37
    blockHelp   go to state 38
    while       go to state 39
    return      go to state 40
    call        go to state 41
    funCall     go to state 42
    variable    go to state 43
    constant    go to state 44


State 3

    0 $accept: start $end .

    $default  accept


State 4

    6 program: program error . '{'
    7        | program error . ';'

    '{'  shift, and go to state 45
    ';'  shift, and go to state 46


State 5

   31 basetype: TOK_VOID .

    $default  reduce using rule 31 (basetype)


State 6

   32 basetype: TOK_INT .

    $default  reduce using rule 32 (basetype)


State 7

   33 basetype: TOK_STRING .

    $default  reduce using rule 33 (basetype)


State 8

   36 ifelse: TOK_IF . TOK_PARAM expr ')' statement TOK_ELSE statement
   37       | TOK_IF . TOK_PARAM expr ')' statement
   40       | TOK_IF . TOK_PARAM expr ')' block
   41       | TOK_IF . TOK_PARAM expr ')' block TOK_ELSE block

    TOK_PARAM  shift, and go to state 47


State 9

   38 ifelse: TOK_ELSE . TOK_IF TOK_PARAM expr ')' statement
   39       | TOK_ELSE . TOK_IF TOK_PARAM expr ')' block

    TOK_IF  shift, and go to state 48


State 10

   76 while: TOK_WHILE . TOK_PARAM expr ')' statement

    TOK_PARAM  shift, and go to state 49


State 11

   77 return: TOK_RETURN . ';'
   78       | TOK_RETURN . expr ';'

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_NOT        shift, and go to state 15
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    TOK_PARAM      shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    ';'            shift, and go to state 51

    '+'       [reduce using rule 49 (binop)]
    '-'       [reduce using rule 49 (binop)]
    ';'       [reduce using rule 49 (binop)]
    $default  reduce using rule 49 (binop)

    expr      go to state 52
    binop     go to state 34
    unop      go to state 35
    call      go to state 41
    funCall   go to state 42
    variable  go to state 43
    constant  go to state 44


State 12

   11 struc: TOK_STRUCT . TOK_IDENT '{'

    TOK_IDENT  shift, and go to state 53


State 13

   92 constant: TOK_NULL .

    $default  reduce using rule 92 (constant)


State 14

   42 expr: TOK_NEW . allocation

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 54
    TOK_IDENT   shift, and go to state 55

    basetype    go to state 56
    allocation  go to state 57


State 15

   65 unop: TOK_NOT . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_NOT        shift, and go to state 15
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    TOK_PARAM      shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22

    TOK_NULL       [reduce using rule 49 (binop)]
    TOK_NEW        [reduce using rule 49 (binop)]
    TOK_NOT        [reduce using rule 49 (binop)]
    TOK_IDENT      [reduce using rule 49 (binop)]
    TOK_INTCON     [reduce using rule 49 (binop)]
    TOK_CHARCON    [reduce using rule 49 (binop)]
    TOK_STRINGCON  [reduce using rule 49 (binop)]
    TOK_PARAM      [reduce using rule 49 (binop)]
    '+'            [reduce using rule 49 (binop)]
    '-'            [reduce using rule 49 (binop)]
    $default       reduce using rule 49 (binop)

    expr      go to state 58
    binop     go to state 34
    unop      go to state 35
    call      go to state 41
    funCall   go to state 42
    variable  go to state 43
    constant  go to state 44


State 16

   34 basetype: TOK_IDENT .
   85 funCall: TOK_IDENT . TOK_PARAM
   86 variable: TOK_IDENT .

    TOK_PARAM  shift, and go to state 59

    TOK_ARRAY  reduce using rule 34 (basetype)
    TOK_IDENT  reduce using rule 34 (basetype)
    $default   reduce using rule 86 (variable)


State 17

   89 constant: TOK_INTCON .

    $default  reduce using rule 89 (constant)


State 18

   91 constant: TOK_CHARCON .

    $default  reduce using rule 91 (constant)


State 19

   90 constant: TOK_STRINGCON .

    $default  reduce using rule 90 (constant)


State 20

   46 expr: TOK_PARAM . expr ')'

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_NOT        shift, and go to state 15
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    TOK_PARAM      shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22

    '+'       [reduce using rule 49 (binop)]
    '-'       [reduce using rule 49 (binop)]
    $default  reduce using rule 49 (binop)

    expr      go to state 60
    binop     go to state 34
    unop      go to state 35
    call      go to state 41
    funCall   go to state 42
    variable  go to state 43
    constant  go to state 44


State 21

   63 unop: '+' . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_NOT        shift, and go to state 15
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    TOK_PARAM      shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22

    TOK_NULL       [reduce using rule 49 (binop)]
    TOK_NEW        [reduce using rule 49 (binop)]
    TOK_NOT        [reduce using rule 49 (binop)]
    TOK_IDENT      [reduce using rule 49 (binop)]
    TOK_INTCON     [reduce using rule 49 (binop)]
    TOK_CHARCON    [reduce using rule 49 (binop)]
    TOK_STRINGCON  [reduce using rule 49 (binop)]
    TOK_PARAM      [reduce using rule 49 (binop)]
    '+'            [reduce using rule 49 (binop)]
    '-'            [reduce using rule 49 (binop)]
    $default       reduce using rule 49 (binop)

    expr      go to state 61
    binop     go to state 34
    unop      go to state 35
    call      go to state 41
    funCall   go to state 42
    variable  go to state 43
    constant  go to state 44


State 22

   64 unop: '-' . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_NOT        shift, and go to state 15
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    TOK_PARAM      shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22

    TOK_NULL       [reduce using rule 49 (binop)]
    TOK_NEW        [reduce using rule 49 (binop)]
    TOK_NOT        [reduce using rule 49 (binop)]
    TOK_IDENT      [reduce using rule 49 (binop)]
    TOK_INTCON     [reduce using rule 49 (binop)]
    TOK_CHARCON    [reduce using rule 49 (binop)]
    TOK_STRINGCON  [reduce using rule 49 (binop)]
    TOK_PARAM      [reduce using rule 49 (binop)]
    '+'            [reduce using rule 49 (binop)]
    '-'            [reduce using rule 49 (binop)]
    $default       reduce using rule 49 (binop)

    expr      go to state 62
    binop     go to state 34
    unop      go to state 35
    call      go to state 41
    funCall   go to state 42
    variable  go to state 43
    constant  go to state 44


State 23

   75 blockHelp: '{' . statement

    TOK_IF         shift, and go to state 8
    TOK_ELSE       shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_NOT        shift, and go to state 15
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    TOK_PARAM      shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '{'            shift, and go to state 23
    ';'            shift, and go to state 24

    '+'       [reduce using rule 49 (binop)]
    '-'       [reduce using rule 49 (binop)]
    ';'       [reduce using rule 49 (binop)]
    $default  reduce using rule 49 (binop)

    ifelse     go to state 32
    expr       go to state 33
    binop      go to state 34
    unop       go to state 35
    statement  go to state 63
    block      go to state 37
    blockHelp  go to state 38
    while      go to state 39
    return     go to state 40
    call       go to state 41
    funCall    go to state 42
    variable   go to state 43
    constant   go to state 44


State 24

   71 statement: ';' .

    $default  reduce using rule 71 (statement)


State 25

    2 program: program structdef .

    $default  reduce using rule 2 (program)


State 26

    9 structdef: struc . '}'
   10 struc: struc . fielddecl ';'

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_IDENT   shift, and go to state 64
    '}'         shift, and go to state 65

    fielddecl  go to state 66
    basetype   go to state 67


State 27

    3 program: program globaldecl .

    $default  reduce using rule 3 (program)


State 28

    4 program: program function .

    $default  reduce using rule 4 (program)


State 29

   15 function: func . fnbody '}' ';'
   16         | func . fnbody '}'
   17         | func . ';'
   18 func: func . ')'
   19     | func . param

    TOK_PARAM  shift, and go to state 68
    ')'        shift, and go to state 69
    '{'        shift, and go to state 70
    ';'        shift, and go to state 71

    param   go to state 72
    fnbody  go to state 73


State 30

   14 globaldecl: identdec . TOK_VARDECL constant ';'
   20 func: identdec .

    TOK_VARDECL  shift, and go to state 74

    $default  reduce using rule 20 (func)


State 31

   24 identdec: basetype . TOK_ARRAY TOK_IDENT
   25         | basetype . TOK_IDENT

    TOK_ARRAY  shift, and go to state 75
    TOK_IDENT  shift, and go to state 76


State 32

   68 statement: ifelse .

    $default  reduce using rule 68 (statement)


State 33

   50 binop: expr . '=' expr
   51      | expr . TOK_VARDECL expr
   52      | expr . '+' expr
   53      | expr . '-' expr
   54      | expr . '*' expr
   55      | expr . '/' expr
   56      | expr . '%' expr
   57      | expr . TOK_EQ expr
   58      | expr . TOK_NE expr
   59      | expr . TOK_LT expr
   60      | expr . TOK_LE expr
   61      | expr . TOK_GT expr
   62      | expr . TOK_GE expr
   70 statement: expr . ';'
   87 variable: expr . '[' expr ']'
   88         | expr . TOK_ARROW TOK_IDENT

    TOK_VARDECL  shift, and go to state 77
    TOK_ARROW    shift, and go to state 78
    TOK_EQ       shift, and go to state 79
    TOK_NE       shift, and go to state 80
    TOK_LT       shift, and go to state 81
    TOK_LE       shift, and go to state 82
    TOK_GT       shift, and go to state 83
    TOK_GE       shift, and go to state 84
    '+'          shift, and go to state 85
    '-'          shift, and go to state 86
    '*'          shift, and go to state 87
    '/'          shift, and go to state 88
    '%'          shift, and go to state 89
    ';'          shift, and go to state 90
    '='          shift, and go to state 91
    '['          shift, and go to state 92


State 34

   43 expr: binop .

    $default  reduce using rule 43 (expr)


State 35

   44 expr: unop .

    $default  reduce using rule 44 (expr)


State 36

    5 program: program statement .

    $default  reduce using rule 5 (program)


State 37

   66 statement: block .

    $default  reduce using rule 66 (statement)


State 38

   72 block: blockHelp . '}'
   73      | blockHelp . '}' ';'
   74 blockHelp: blockHelp . statement

    TOK_IF         shift, and go to state 8
    TOK_ELSE       shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_NOT        shift, and go to state 15
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    TOK_PARAM      shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '{'            shift, and go to state 23
    ';'            shift, and go to state 24
    '}'            shift, and go to state 93

    '+'       [reduce using rule 49 (binop)]
    '-'       [reduce using rule 49 (binop)]
    ';'       [reduce using rule 49 (binop)]
    $default  reduce using rule 49 (binop)

    ifelse     go to state 32
    expr       go to state 33
    binop      go to state 34
    unop       go to state 35
    statement  go to state 94
    block      go to state 37
    blockHelp  go to state 38
    while      go to state 39
    return     go to state 40
    call       go to state 41
    funCall    go to state 42
    variable   go to state 43
    constant   go to state 44


State 39

   67 statement: while .

    $default  reduce using rule 67 (statement)


State 40

   69 statement: return .

    $default  reduce using rule 69 (statement)


State 41

   45 expr: call .

    $default  reduce using rule 45 (expr)


State 42

   82 call: funCall . ')'
   83 funCall: funCall . ','
   84        | funCall . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_NOT        shift, and go to state 15
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    TOK_PARAM      shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    ')'            shift, and go to state 95
    ','            shift, and go to state 96

    TOK_NULL       [reduce using rule 49 (binop)]
    TOK_NEW        [reduce using rule 49 (binop)]
    TOK_NOT        [reduce using rule 49 (binop)]
    TOK_IDENT      [reduce using rule 49 (binop)]
    TOK_INTCON     [reduce using rule 49 (binop)]
    TOK_CHARCON    [reduce using rule 49 (binop)]
    TOK_STRINGCON  [reduce using rule 49 (binop)]
    TOK_PARAM      [reduce using rule 49 (binop)]
    '+'            [reduce using rule 49 (binop)]
    '-'            [reduce using rule 49 (binop)]
    ')'            [reduce using rule 49 (binop)]
    ','            [reduce using rule 49 (binop)]
    $default       reduce using rule 49 (binop)

    expr      go to state 97
    binop     go to state 34
    unop      go to state 35
    call      go to state 41
    funCall   go to state 42
    variable  go to state 43
    constant  go to state 44


State 43

   47 expr: variable .

    $default  reduce using rule 47 (expr)


State 44

   48 expr: constant .

    $default  reduce using rule 48 (expr)


State 45

    6 program: program error '{' .

    $default  reduce using rule 6 (program)


State 46

    7 program: program error ';' .

    $default  reduce using rule 7 (program)


State 47

   36 ifelse: TOK_IF TOK_PARAM . expr ')' statement TOK_ELSE statement
   37       | TOK_IF TOK_PARAM . expr ')' statement
   40       | TOK_IF TOK_PARAM . expr ')' block
   41       | TOK_IF TOK_PARAM . expr ')' block TOK_ELSE block

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_NOT        shift, and go to state 15
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    TOK_PARAM      shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22

    '+'       [reduce using rule 49 (binop)]
    '-'       [reduce using rule 49 (binop)]
    $default  reduce using rule 49 (binop)

    expr      go to state 98
    binop     go to state 34
    unop      go to state 35
    call      go to state 41
    funCall   go to state 42
    variable  go to state 43
    constant  go to state 44


State 48

   38 ifelse: TOK_ELSE TOK_IF . TOK_PARAM expr ')' statement
   39       | TOK_ELSE TOK_IF . TOK_PARAM expr ')' block

    TOK_PARAM  shift, and go to state 99


State 49

   76 while: TOK_WHILE TOK_PARAM . expr ')' statement

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_NOT        shift, and go to state 15
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    TOK_PARAM      shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22

    '+'       [reduce using rule 49 (binop)]
    '-'       [reduce using rule 49 (binop)]
    $default  reduce using rule 49 (binop)

    expr      go to state 100
    binop     go to state 34
    unop      go to state 35
    call      go to state 41
    funCall   go to state 42
    variable  go to state 43
    constant  go to state 44


State 50

   85 funCall: TOK_IDENT . TOK_PARAM
   86 variable: TOK_IDENT .

    TOK_PARAM  shift, and go to state 59

    TOK_PARAM  [reduce using rule 86 (variable)]
    $default   reduce using rule 86 (variable)


State 51

   77 return: TOK_RETURN ';' .

    $default  reduce using rule 77 (return)


State 52

   50 binop: expr . '=' expr
   51      | expr . TOK_VARDECL expr
   52      | expr . '+' expr
   53      | expr . '-' expr
   54      | expr . '*' expr
   55      | expr . '/' expr
   56      | expr . '%' expr
   57      | expr . TOK_EQ expr
   58      | expr . TOK_NE expr
   59      | expr . TOK_LT expr
   60      | expr . TOK_LE expr
   61      | expr . TOK_GT expr
   62      | expr . TOK_GE expr
   78 return: TOK_RETURN expr . ';'
   87 variable: expr . '[' expr ']'
   88         | expr . TOK_ARROW TOK_IDENT

    TOK_VARDECL  shift, and go to state 77
    TOK_ARROW    shift, and go to state 78
    TOK_EQ       shift, and go to state 79
    TOK_NE       shift, and go to state 80
    TOK_LT       shift, and go to state 81
    TOK_LE       shift, and go to state 82
    TOK_GT       shift, and go to state 83
    TOK_GE       shift, and go to state 84
    '+'          shift, and go to state 85
    '-'          shift, and go to state 86
    '*'          shift, and go to state 87
    '/'          shift, and go to state 88
    '%'          shift, and go to state 89
    ';'          shift, and go to state 101
    '='          shift, and go to state 91
    '['          shift, and go to state 92


State 53

   11 struc: TOK_STRUCT TOK_IDENT . '{'

    '{'  shift, and go to state 102


State 54

   33 basetype: TOK_STRING .
   80 allocation: TOK_STRING . TOK_PARAM expr ')'

    TOK_PARAM  shift, and go to state 103

    $default  reduce using rule 33 (basetype)


State 55

   34 basetype: TOK_IDENT .
   79 allocation: TOK_IDENT .

    '['       reduce using rule 34 (basetype)
    '['       [reduce using rule 79 (allocation)]
    $default  reduce using rule 79 (allocation)


State 56

   81 allocation: basetype . '[' expr ']'

    '['  shift, and go to state 104


State 57

   42 expr: TOK_NEW allocation .

    $default  reduce using rule 42 (expr)


State 58

   50 binop: expr . '=' expr
   51      | expr . TOK_VARDECL expr
   52      | expr . '+' expr
   53      | expr . '-' expr
   54      | expr . '*' expr
   55      | expr . '/' expr
   56      | expr . '%' expr
   57      | expr . TOK_EQ expr
   58      | expr . TOK_NE expr
   59      | expr . TOK_LT expr
   60      | expr . TOK_LE expr
   61      | expr . TOK_GT expr
   62      | expr . TOK_GE expr
   65 unop: TOK_NOT expr .
   87 variable: expr . '[' expr ']'
   88         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 78
    '='        shift, and go to state 91
    '['        shift, and go to state 92

    '='       [reduce using rule 65 (unop)]
    '['       [reduce using rule 65 (unop)]
    $default  reduce using rule 65 (unop)


State 59

   85 funCall: TOK_IDENT TOK_PARAM .

    $default  reduce using rule 85 (funCall)


State 60

   46 expr: TOK_PARAM expr . ')'
   50 binop: expr . '=' expr
   51      | expr . TOK_VARDECL expr
   52      | expr . '+' expr
   53      | expr . '-' expr
   54      | expr . '*' expr
   55      | expr . '/' expr
   56      | expr . '%' expr
   57      | expr . TOK_EQ expr
   58      | expr . TOK_NE expr
   59      | expr . TOK_LT expr
   60      | expr . TOK_LE expr
   61      | expr . TOK_GT expr
   62      | expr . TOK_GE expr
   87 variable: expr . '[' expr ']'
   88         | expr . TOK_ARROW TOK_IDENT

    TOK_VARDECL  shift, and go to state 77
    TOK_ARROW    shift, and go to state 78
    TOK_EQ       shift, and go to state 79
    TOK_NE       shift, and go to state 80
    TOK_LT       shift, and go to state 81
    TOK_LE       shift, and go to state 82
    TOK_GT       shift, and go to state 83
    TOK_GE       shift, and go to state 84
    '+'          shift, and go to state 85
    '-'          shift, and go to state 86
    '*'          shift, and go to state 87
    '/'          shift, and go to state 88
    '%'          shift, and go to state 89
    ')'          shift, and go to state 105
    '='          shift, and go to state 91
    '['          shift, and go to state 92


State 61

   50 binop: expr . '=' expr
   51      | expr . TOK_VARDECL expr
   52      | expr . '+' expr
   53      | expr . '-' expr
   54      | expr . '*' expr
   55      | expr . '/' expr
   56      | expr . '%' expr
   57      | expr . TOK_EQ expr
   58      | expr . TOK_NE expr
   59      | expr . TOK_LT expr
   60      | expr . TOK_LE expr
   61      | expr . TOK_GT expr
   62      | expr . TOK_GE expr
   63 unop: '+' expr .
   87 variable: expr . '[' expr ']'
   88         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 78
    '='        shift, and go to state 91
    '['        shift, and go to state 92

    '='       [reduce using rule 63 (unop)]
    '['       [reduce using rule 63 (unop)]
    $default  reduce using rule 63 (unop)


State 62

   50 binop: expr . '=' expr
   51      | expr . TOK_VARDECL expr
   52      | expr . '+' expr
   53      | expr . '-' expr
   54      | expr . '*' expr
   55      | expr . '/' expr
   56      | expr . '%' expr
   57      | expr . TOK_EQ expr
   58      | expr . TOK_NE expr
   59      | expr . TOK_LT expr
   60      | expr . TOK_LE expr
   61      | expr . TOK_GT expr
   62      | expr . TOK_GE expr
   64 unop: '-' expr .
   87 variable: expr . '[' expr ']'
   88         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 78
    '='        shift, and go to state 91
    '['        shift, and go to state 92

    '='       [reduce using rule 64 (unop)]
    '['       [reduce using rule 64 (unop)]
    $default  reduce using rule 64 (unop)


State 63

   75 blockHelp: '{' statement .

    $default  reduce using rule 75 (blockHelp)


State 64

   34 basetype: TOK_IDENT .

    $default  reduce using rule 34 (basetype)


State 65

    9 structdef: struc '}' .

    $default  reduce using rule 9 (structdef)


State 66

   10 struc: struc fielddecl . ';'

    ';'  shift, and go to state 106


State 67

   12 fielddecl: basetype . TOK_IDENT
   13          | basetype . TOK_ARRAY TOK_IDENT

    TOK_ARRAY  shift, and go to state 107
    TOK_IDENT  shift, and go to state 108


State 68

   22 param: TOK_PARAM . identdec
   23      | TOK_PARAM .

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_IDENT   shift, and go to state 64

    $default  reduce using rule 23 (param)

    identdec  go to state 109
    basetype  go to state 31


State 69

   18 func: func ')' .

    $default  reduce using rule 18 (func)


State 70

   28 fnbody: '{' . statement
   29       | '{' . localdecl
   30       | '{' .

    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_IF         shift, and go to state 8
    TOK_ELSE       shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_NOT        shift, and go to state 15
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    TOK_PARAM      shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '{'            shift, and go to state 23
    ';'            shift, and go to state 24

    TOK_VOID       [reduce using rule 30 (fnbody)]
    TOK_INT        [reduce using rule 30 (fnbody)]
    TOK_STRING     [reduce using rule 30 (fnbody)]
    TOK_IF         [reduce using rule 30 (fnbody)]
    TOK_ELSE       [reduce using rule 30 (fnbody)]
    TOK_WHILE      [reduce using rule 30 (fnbody)]
    TOK_RETURN     [reduce using rule 30 (fnbody)]
    TOK_NULL       [reduce using rule 30 (fnbody)]
    TOK_NEW        [reduce using rule 30 (fnbody)]
    TOK_VARDECL    reduce using rule 30 (fnbody)
    TOK_VARDECL    [reduce using rule 49 (binop)]
    TOK_ARROW      reduce using rule 30 (fnbody)
    TOK_ARROW      [reduce using rule 49 (binop)]
    TOK_EQ         reduce using rule 30 (fnbody)
    TOK_EQ         [reduce using rule 49 (binop)]
    TOK_NE         reduce using rule 30 (fnbody)
    TOK_NE         [reduce using rule 49 (binop)]
    TOK_LT         reduce using rule 30 (fnbody)
    TOK_LT         [reduce using rule 49 (binop)]
    TOK_LE         reduce using rule 30 (fnbody)
    TOK_LE         [reduce using rule 49 (binop)]
    TOK_GT         reduce using rule 30 (fnbody)
    TOK_GT         [reduce using rule 49 (binop)]
    TOK_GE         reduce using rule 30 (fnbody)
    TOK_GE         [reduce using rule 49 (binop)]
    TOK_NOT        [reduce using rule 30 (fnbody)]
    TOK_IDENT      [reduce using rule 30 (fnbody)]
    TOK_INTCON     [reduce using rule 30 (fnbody)]
    TOK_CHARCON    [reduce using rule 30 (fnbody)]
    TOK_STRINGCON  [reduce using rule 30 (fnbody)]
    TOK_PARAM      [reduce using rule 30 (fnbody)]
    '+'            [reduce using rule 30 (fnbody)]
    '+'            [reduce using rule 49 (binop)]
    '-'            [reduce using rule 30 (fnbody)]
    '-'            [reduce using rule 49 (binop)]
    '*'            reduce using rule 30 (fnbody)
    '*'            [reduce using rule 49 (binop)]
    '/'            reduce using rule 30 (fnbody)
    '/'            [reduce using rule 49 (binop)]
    '%'            reduce using rule 30 (fnbody)
    '%'            [reduce using rule 49 (binop)]
    '{'            [reduce using rule 30 (fnbody)]
    ';'            [reduce using rule 30 (fnbody)]
    ';'            [reduce using rule 49 (binop)]
    '='            reduce using rule 30 (fnbody)
    '='            [reduce using rule 49 (binop)]
    '['            reduce using rule 30 (fnbody)
    '['            [reduce using rule 49 (binop)]
    $default       reduce using rule 30 (fnbody)

    identdec   go to state 110
    basetype   go to state 31
    localdecl  go to state 111
    ifelse     go to state 32
    expr       go to state 33
    binop      go to state 34
    unop       go to state 35
    statement  go to state 112
    block      go to state 37
    blockHelp  go to state 38
    while      go to state 39
    return     go to state 40
    call       go to state 41
    funCall    go to state 42
    variable   go to state 43
    constant   go to state 44


State 71

   17 function: func ';' .

    $default  reduce using rule 17 (function)


State 72

   19 func: func param .
   21 param: param . ',' identdec

    ','  shift, and go to state 113

    $default  reduce using rule 19 (func)


State 73

   15 function: func fnbody . '}' ';'
   16         | func fnbody . '}'
   26 fnbody: fnbody . statement
   27       | fnbody . localdecl

    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_IF         shift, and go to state 8
    TOK_ELSE       shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_NOT        shift, and go to state 15
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    TOK_PARAM      shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '{'            shift, and go to state 23
    ';'            shift, and go to state 24
    '}'            shift, and go to state 114

    '+'       [reduce using rule 49 (binop)]
    '-'       [reduce using rule 49 (binop)]
    ';'       [reduce using rule 49 (binop)]
    $default  reduce using rule 49 (binop)

    identdec   go to state 110
    basetype   go to state 31
    localdecl  go to state 115
    ifelse     go to state 32
    expr       go to state 33
    binop      go to state 34
    unop       go to state 35
    statement  go to state 116
    block      go to state 37
    blockHelp  go to state 38
    while      go to state 39
    return     go to state 40
    call       go to state 41
    funCall    go to state 42
    variable   go to state 43
    constant   go to state 44


State 74

   14 globaldecl: identdec TOK_VARDECL . constant ';'

    TOK_NULL       shift, and go to state 13
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19

    constant  go to state 117


State 75

   24 identdec: basetype TOK_ARRAY . TOK_IDENT

    TOK_IDENT  shift, and go to state 118


State 76

   25 identdec: basetype TOK_IDENT .

    $default  reduce using rule 25 (identdec)


State 77

   51 binop: expr TOK_VARDECL . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_NOT        shift, and go to state 15
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    TOK_PARAM      shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22

    TOK_NULL       [reduce using rule 49 (binop)]
    TOK_NEW        [reduce using rule 49 (binop)]
    TOK_NOT        [reduce using rule 49 (binop)]
    TOK_IDENT      [reduce using rule 49 (binop)]
    TOK_INTCON     [reduce using rule 49 (binop)]
    TOK_CHARCON    [reduce using rule 49 (binop)]
    TOK_STRINGCON  [reduce using rule 49 (binop)]
    TOK_PARAM      [reduce using rule 49 (binop)]
    '+'            [reduce using rule 49 (binop)]
    '-'            [reduce using rule 49 (binop)]
    $default       reduce using rule 49 (binop)

    expr      go to state 119
    binop     go to state 34
    unop      go to state 35
    call      go to state 41
    funCall   go to state 42
    variable  go to state 43
    constant  go to state 44


State 78

   88 variable: expr TOK_ARROW . TOK_IDENT

    TOK_IDENT  shift, and go to state 120


State 79

   57 binop: expr TOK_EQ . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_NOT        shift, and go to state 15
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    TOK_PARAM      shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22

    TOK_NULL       [reduce using rule 49 (binop)]
    TOK_NEW        [reduce using rule 49 (binop)]
    TOK_NOT        [reduce using rule 49 (binop)]
    TOK_IDENT      [reduce using rule 49 (binop)]
    TOK_INTCON     [reduce using rule 49 (binop)]
    TOK_CHARCON    [reduce using rule 49 (binop)]
    TOK_STRINGCON  [reduce using rule 49 (binop)]
    TOK_PARAM      [reduce using rule 49 (binop)]
    '+'            [reduce using rule 49 (binop)]
    '-'            [reduce using rule 49 (binop)]
    $default       reduce using rule 49 (binop)

    expr      go to state 121
    binop     go to state 34
    unop      go to state 35
    call      go to state 41
    funCall   go to state 42
    variable  go to state 43
    constant  go to state 44


State 80

   58 binop: expr TOK_NE . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_NOT        shift, and go to state 15
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    TOK_PARAM      shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22

    TOK_NULL       [reduce using rule 49 (binop)]
    TOK_NEW        [reduce using rule 49 (binop)]
    TOK_NOT        [reduce using rule 49 (binop)]
    TOK_IDENT      [reduce using rule 49 (binop)]
    TOK_INTCON     [reduce using rule 49 (binop)]
    TOK_CHARCON    [reduce using rule 49 (binop)]
    TOK_STRINGCON  [reduce using rule 49 (binop)]
    TOK_PARAM      [reduce using rule 49 (binop)]
    '+'            [reduce using rule 49 (binop)]
    '-'            [reduce using rule 49 (binop)]
    $default       reduce using rule 49 (binop)

    expr      go to state 122
    binop     go to state 34
    unop      go to state 35
    call      go to state 41
    funCall   go to state 42
    variable  go to state 43
    constant  go to state 44


State 81

   59 binop: expr TOK_LT . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_NOT        shift, and go to state 15
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    TOK_PARAM      shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22

    TOK_NULL       [reduce using rule 49 (binop)]
    TOK_NEW        [reduce using rule 49 (binop)]
    TOK_NOT        [reduce using rule 49 (binop)]
    TOK_IDENT      [reduce using rule 49 (binop)]
    TOK_INTCON     [reduce using rule 49 (binop)]
    TOK_CHARCON    [reduce using rule 49 (binop)]
    TOK_STRINGCON  [reduce using rule 49 (binop)]
    TOK_PARAM      [reduce using rule 49 (binop)]
    '+'            [reduce using rule 49 (binop)]
    '-'            [reduce using rule 49 (binop)]
    $default       reduce using rule 49 (binop)

    expr      go to state 123
    binop     go to state 34
    unop      go to state 35
    call      go to state 41
    funCall   go to state 42
    variable  go to state 43
    constant  go to state 44


State 82

   60 binop: expr TOK_LE . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_NOT        shift, and go to state 15
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    TOK_PARAM      shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22

    TOK_NULL       [reduce using rule 49 (binop)]
    TOK_NEW        [reduce using rule 49 (binop)]
    TOK_NOT        [reduce using rule 49 (binop)]
    TOK_IDENT      [reduce using rule 49 (binop)]
    TOK_INTCON     [reduce using rule 49 (binop)]
    TOK_CHARCON    [reduce using rule 49 (binop)]
    TOK_STRINGCON  [reduce using rule 49 (binop)]
    TOK_PARAM      [reduce using rule 49 (binop)]
    '+'            [reduce using rule 49 (binop)]
    '-'            [reduce using rule 49 (binop)]
    $default       reduce using rule 49 (binop)

    expr      go to state 124
    binop     go to state 34
    unop      go to state 35
    call      go to state 41
    funCall   go to state 42
    variable  go to state 43
    constant  go to state 44


State 83

   61 binop: expr TOK_GT . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_NOT        shift, and go to state 15
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    TOK_PARAM      shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22

    TOK_NULL       [reduce using rule 49 (binop)]
    TOK_NEW        [reduce using rule 49 (binop)]
    TOK_NOT        [reduce using rule 49 (binop)]
    TOK_IDENT      [reduce using rule 49 (binop)]
    TOK_INTCON     [reduce using rule 49 (binop)]
    TOK_CHARCON    [reduce using rule 49 (binop)]
    TOK_STRINGCON  [reduce using rule 49 (binop)]
    TOK_PARAM      [reduce using rule 49 (binop)]
    '+'            [reduce using rule 49 (binop)]
    '-'            [reduce using rule 49 (binop)]
    $default       reduce using rule 49 (binop)

    expr      go to state 125
    binop     go to state 34
    unop      go to state 35
    call      go to state 41
    funCall   go to state 42
    variable  go to state 43
    constant  go to state 44


State 84

   62 binop: expr TOK_GE . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_NOT        shift, and go to state 15
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    TOK_PARAM      shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22

    TOK_NULL       [reduce using rule 49 (binop)]
    TOK_NEW        [reduce using rule 49 (binop)]
    TOK_NOT        [reduce using rule 49 (binop)]
    TOK_IDENT      [reduce using rule 49 (binop)]
    TOK_INTCON     [reduce using rule 49 (binop)]
    TOK_CHARCON    [reduce using rule 49 (binop)]
    TOK_STRINGCON  [reduce using rule 49 (binop)]
    TOK_PARAM      [reduce using rule 49 (binop)]
    '+'            [reduce using rule 49 (binop)]
    '-'            [reduce using rule 49 (binop)]
    $default       reduce using rule 49 (binop)

    expr      go to state 126
    binop     go to state 34
    unop      go to state 35
    call      go to state 41
    funCall   go to state 42
    variable  go to state 43
    constant  go to state 44


State 85

   52 binop: expr '+' . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_NOT        shift, and go to state 15
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    TOK_PARAM      shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22

    TOK_NULL       [reduce using rule 49 (binop)]
    TOK_NEW        [reduce using rule 49 (binop)]
    TOK_NOT        [reduce using rule 49 (binop)]
    TOK_IDENT      [reduce using rule 49 (binop)]
    TOK_INTCON     [reduce using rule 49 (binop)]
    TOK_CHARCON    [reduce using rule 49 (binop)]
    TOK_STRINGCON  [reduce using rule 49 (binop)]
    TOK_PARAM      [reduce using rule 49 (binop)]
    '+'            [reduce using rule 49 (binop)]
    '-'            [reduce using rule 49 (binop)]
    $default       reduce using rule 49 (binop)

    expr      go to state 127
    binop     go to state 34
    unop      go to state 35
    call      go to state 41
    funCall   go to state 42
    variable  go to state 43
    constant  go to state 44


State 86

   53 binop: expr '-' . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_NOT        shift, and go to state 15
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    TOK_PARAM      shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22

    TOK_NULL       [reduce using rule 49 (binop)]
    TOK_NEW        [reduce using rule 49 (binop)]
    TOK_NOT        [reduce using rule 49 (binop)]
    TOK_IDENT      [reduce using rule 49 (binop)]
    TOK_INTCON     [reduce using rule 49 (binop)]
    TOK_CHARCON    [reduce using rule 49 (binop)]
    TOK_STRINGCON  [reduce using rule 49 (binop)]
    TOK_PARAM      [reduce using rule 49 (binop)]
    '+'            [reduce using rule 49 (binop)]
    '-'            [reduce using rule 49 (binop)]
    $default       reduce using rule 49 (binop)

    expr      go to state 128
    binop     go to state 34
    unop      go to state 35
    call      go to state 41
    funCall   go to state 42
    variable  go to state 43
    constant  go to state 44


State 87

   54 binop: expr '*' . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_NOT        shift, and go to state 15
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    TOK_PARAM      shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22

    TOK_NULL       [reduce using rule 49 (binop)]
    TOK_NEW        [reduce using rule 49 (binop)]
    TOK_NOT        [reduce using rule 49 (binop)]
    TOK_IDENT      [reduce using rule 49 (binop)]
    TOK_INTCON     [reduce using rule 49 (binop)]
    TOK_CHARCON    [reduce using rule 49 (binop)]
    TOK_STRINGCON  [reduce using rule 49 (binop)]
    TOK_PARAM      [reduce using rule 49 (binop)]
    '+'            [reduce using rule 49 (binop)]
    '-'            [reduce using rule 49 (binop)]
    $default       reduce using rule 49 (binop)

    expr      go to state 129
    binop     go to state 34
    unop      go to state 35
    call      go to state 41
    funCall   go to state 42
    variable  go to state 43
    constant  go to state 44


State 88

   55 binop: expr '/' . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_NOT        shift, and go to state 15
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    TOK_PARAM      shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22

    TOK_NULL       [reduce using rule 49 (binop)]
    TOK_NEW        [reduce using rule 49 (binop)]
    TOK_NOT        [reduce using rule 49 (binop)]
    TOK_IDENT      [reduce using rule 49 (binop)]
    TOK_INTCON     [reduce using rule 49 (binop)]
    TOK_CHARCON    [reduce using rule 49 (binop)]
    TOK_STRINGCON  [reduce using rule 49 (binop)]
    TOK_PARAM      [reduce using rule 49 (binop)]
    '+'            [reduce using rule 49 (binop)]
    '-'            [reduce using rule 49 (binop)]
    $default       reduce using rule 49 (binop)

    expr      go to state 130
    binop     go to state 34
    unop      go to state 35
    call      go to state 41
    funCall   go to state 42
    variable  go to state 43
    constant  go to state 44


State 89

   56 binop: expr '%' . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_NOT        shift, and go to state 15
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    TOK_PARAM      shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22

    TOK_NULL       [reduce using rule 49 (binop)]
    TOK_NEW        [reduce using rule 49 (binop)]
    TOK_NOT        [reduce using rule 49 (binop)]
    TOK_IDENT      [reduce using rule 49 (binop)]
    TOK_INTCON     [reduce using rule 49 (binop)]
    TOK_CHARCON    [reduce using rule 49 (binop)]
    TOK_STRINGCON  [reduce using rule 49 (binop)]
    TOK_PARAM      [reduce using rule 49 (binop)]
    '+'            [reduce using rule 49 (binop)]
    '-'            [reduce using rule 49 (binop)]
    $default       reduce using rule 49 (binop)

    expr      go to state 131
    binop     go to state 34
    unop      go to state 35
    call      go to state 41
    funCall   go to state 42
    variable  go to state 43
    constant  go to state 44


State 90

   70 statement: expr ';' .

    $default  reduce using rule 70 (statement)


State 91

   50 binop: expr '=' . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_NOT        shift, and go to state 15
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    TOK_PARAM      shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22

    TOK_NULL       [reduce using rule 49 (binop)]
    TOK_NEW        [reduce using rule 49 (binop)]
    TOK_NOT        [reduce using rule 49 (binop)]
    TOK_IDENT      [reduce using rule 49 (binop)]
    TOK_INTCON     [reduce using rule 49 (binop)]
    TOK_CHARCON    [reduce using rule 49 (binop)]
    TOK_STRINGCON  [reduce using rule 49 (binop)]
    TOK_PARAM      [reduce using rule 49 (binop)]
    '+'            [reduce using rule 49 (binop)]
    '-'            [reduce using rule 49 (binop)]
    $default       reduce using rule 49 (binop)

    expr      go to state 132
    binop     go to state 34
    unop      go to state 35
    call      go to state 41
    funCall   go to state 42
    variable  go to state 43
    constant  go to state 44


State 92

   87 variable: expr '[' . expr ']'

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_NOT        shift, and go to state 15
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    TOK_PARAM      shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22

    '+'       [reduce using rule 49 (binop)]
    '-'       [reduce using rule 49 (binop)]
    $default  reduce using rule 49 (binop)

    expr      go to state 133
    binop     go to state 34
    unop      go to state 35
    call      go to state 41
    funCall   go to state 42
    variable  go to state 43
    constant  go to state 44


State 93

   72 block: blockHelp '}' .
   73      | blockHelp '}' . ';'

    ';'  shift, and go to state 134

    ';'       [reduce using rule 72 (block)]
    $default  reduce using rule 72 (block)


State 94

   74 blockHelp: blockHelp statement .

    $default  reduce using rule 74 (blockHelp)


State 95

   82 call: funCall ')' .

    $default  reduce using rule 82 (call)


State 96

   83 funCall: funCall ',' .

    $default  reduce using rule 83 (funCall)


State 97

   50 binop: expr . '=' expr
   51      | expr . TOK_VARDECL expr
   52      | expr . '+' expr
   53      | expr . '-' expr
   54      | expr . '*' expr
   55      | expr . '/' expr
   56      | expr . '%' expr
   57      | expr . TOK_EQ expr
   58      | expr . TOK_NE expr
   59      | expr . TOK_LT expr
   60      | expr . TOK_LE expr
   61      | expr . TOK_GT expr
   62      | expr . TOK_GE expr
   84 funCall: funCall expr .
   87 variable: expr . '[' expr ']'
   88         | expr . TOK_ARROW TOK_IDENT

    TOK_VARDECL  shift, and go to state 77
    TOK_ARROW    shift, and go to state 78
    TOK_EQ       shift, and go to state 79
    TOK_NE       shift, and go to state 80
    TOK_LT       shift, and go to state 81
    TOK_LE       shift, and go to state 82
    TOK_GT       shift, and go to state 83
    TOK_GE       shift, and go to state 84
    '+'          shift, and go to state 85
    '-'          shift, and go to state 86
    '*'          shift, and go to state 87
    '/'          shift, and go to state 88
    '%'          shift, and go to state 89
    '='          shift, and go to state 91
    '['          shift, and go to state 92

    TOK_VARDECL  [reduce using rule 84 (funCall)]
    TOK_ARROW    [reduce using rule 84 (funCall)]
    TOK_EQ       [reduce using rule 84 (funCall)]
    TOK_NE       [reduce using rule 84 (funCall)]
    TOK_LT       [reduce using rule 84 (funCall)]
    TOK_LE       [reduce using rule 84 (funCall)]
    TOK_GT       [reduce using rule 84 (funCall)]
    TOK_GE       [reduce using rule 84 (funCall)]
    '+'          [reduce using rule 84 (funCall)]
    '-'          [reduce using rule 84 (funCall)]
    '*'          [reduce using rule 84 (funCall)]
    '/'          [reduce using rule 84 (funCall)]
    '%'          [reduce using rule 84 (funCall)]
    '='          [reduce using rule 84 (funCall)]
    '['          [reduce using rule 84 (funCall)]
    $default     reduce using rule 84 (funCall)


State 98

   36 ifelse: TOK_IF TOK_PARAM expr . ')' statement TOK_ELSE statement
   37       | TOK_IF TOK_PARAM expr . ')' statement
   40       | TOK_IF TOK_PARAM expr . ')' block
   41       | TOK_IF TOK_PARAM expr . ')' block TOK_ELSE block
   50 binop: expr . '=' expr
   51      | expr . TOK_VARDECL expr
   52      | expr . '+' expr
   53      | expr . '-' expr
   54      | expr . '*' expr
   55      | expr . '/' expr
   56      | expr . '%' expr
   57      | expr . TOK_EQ expr
   58      | expr . TOK_NE expr
   59      | expr . TOK_LT expr
   60      | expr . TOK_LE expr
   61      | expr . TOK_GT expr
   62      | expr . TOK_GE expr
   87 variable: expr . '[' expr ']'
   88         | expr . TOK_ARROW TOK_IDENT

    TOK_VARDECL  shift, and go to state 77
    TOK_ARROW    shift, and go to state 78
    TOK_EQ       shift, and go to state 79
    TOK_NE       shift, and go to state 80
    TOK_LT       shift, and go to state 81
    TOK_LE       shift, and go to state 82
    TOK_GT       shift, and go to state 83
    TOK_GE       shift, and go to state 84
    '+'          shift, and go to state 85
    '-'          shift, and go to state 86
    '*'          shift, and go to state 87
    '/'          shift, and go to state 88
    '%'          shift, and go to state 89
    ')'          shift, and go to state 135
    '='          shift, and go to state 91
    '['          shift, and go to state 92


State 99

   38 ifelse: TOK_ELSE TOK_IF TOK_PARAM . expr ')' statement
   39       | TOK_ELSE TOK_IF TOK_PARAM . expr ')' block

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_NOT        shift, and go to state 15
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    TOK_PARAM      shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22

    '+'       [reduce using rule 49 (binop)]
    '-'       [reduce using rule 49 (binop)]
    $default  reduce using rule 49 (binop)

    expr      go to state 136
    binop     go to state 34
    unop      go to state 35
    call      go to state 41
    funCall   go to state 42
    variable  go to state 43
    constant  go to state 44


State 100

   50 binop: expr . '=' expr
   51      | expr . TOK_VARDECL expr
   52      | expr . '+' expr
   53      | expr . '-' expr
   54      | expr . '*' expr
   55      | expr . '/' expr
   56      | expr . '%' expr
   57      | expr . TOK_EQ expr
   58      | expr . TOK_NE expr
   59      | expr . TOK_LT expr
   60      | expr . TOK_LE expr
   61      | expr . TOK_GT expr
   62      | expr . TOK_GE expr
   76 while: TOK_WHILE TOK_PARAM expr . ')' statement
   87 variable: expr . '[' expr ']'
   88         | expr . TOK_ARROW TOK_IDENT

    TOK_VARDECL  shift, and go to state 77
    TOK_ARROW    shift, and go to state 78
    TOK_EQ       shift, and go to state 79
    TOK_NE       shift, and go to state 80
    TOK_LT       shift, and go to state 81
    TOK_LE       shift, and go to state 82
    TOK_GT       shift, and go to state 83
    TOK_GE       shift, and go to state 84
    '+'          shift, and go to state 85
    '-'          shift, and go to state 86
    '*'          shift, and go to state 87
    '/'          shift, and go to state 88
    '%'          shift, and go to state 89
    ')'          shift, and go to state 137
    '='          shift, and go to state 91
    '['          shift, and go to state 92


State 101

   78 return: TOK_RETURN expr ';' .

    $default  reduce using rule 78 (return)


State 102

   11 struc: TOK_STRUCT TOK_IDENT '{' .

    $default  reduce using rule 11 (struc)


State 103

   80 allocation: TOK_STRING TOK_PARAM . expr ')'

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_NOT        shift, and go to state 15
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    TOK_PARAM      shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22

    '+'       [reduce using rule 49 (binop)]
    '-'       [reduce using rule 49 (binop)]
    $default  reduce using rule 49 (binop)

    expr      go to state 138
    binop     go to state 34
    unop      go to state 35
    call      go to state 41
    funCall   go to state 42
    variable  go to state 43
    constant  go to state 44


State 104

   81 allocation: basetype '[' . expr ']'

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_NOT        shift, and go to state 15
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    TOK_PARAM      shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22

    '+'       [reduce using rule 49 (binop)]
    '-'       [reduce using rule 49 (binop)]
    $default  reduce using rule 49 (binop)

    expr      go to state 139
    binop     go to state 34
    unop      go to state 35
    call      go to state 41
    funCall   go to state 42
    variable  go to state 43
    constant  go to state 44


State 105

   46 expr: TOK_PARAM expr ')' .

    $default  reduce using rule 46 (expr)


State 106

   10 struc: struc fielddecl ';' .

    $default  reduce using rule 10 (struc)


State 107

   13 fielddecl: basetype TOK_ARRAY . TOK_IDENT

    TOK_IDENT  shift, and go to state 140


State 108

   12 fielddecl: basetype TOK_IDENT .

    $default  reduce using rule 12 (fielddecl)


State 109

   22 param: TOK_PARAM identdec .

    $default  reduce using rule 22 (param)


State 110

   35 localdecl: identdec . TOK_VARDECL expr ';'

    TOK_VARDECL  shift, and go to state 141


State 111

   29 fnbody: '{' localdecl .

    $default  reduce using rule 29 (fnbody)


State 112

   28 fnbody: '{' statement .

    $default  reduce using rule 28 (fnbody)


State 113

   21 param: param ',' . identdec

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_IDENT   shift, and go to state 64

    identdec  go to state 142
    basetype  go to state 31


State 114

   15 function: func fnbody '}' . ';'
   16         | func fnbody '}' .

    ';'  shift, and go to state 143

    ';'       [reduce using rule 16 (function)]
    $default  reduce using rule 16 (function)


State 115

   27 fnbody: fnbody localdecl .

    $default  reduce using rule 27 (fnbody)


State 116

   26 fnbody: fnbody statement .

    $default  reduce using rule 26 (fnbody)


State 117

   14 globaldecl: identdec TOK_VARDECL constant . ';'

    ';'  shift, and go to state 144


State 118

   24 identdec: basetype TOK_ARRAY TOK_IDENT .

    $default  reduce using rule 24 (identdec)


State 119

   50 binop: expr . '=' expr
   51      | expr . TOK_VARDECL expr
   51      | expr TOK_VARDECL expr .
   52      | expr . '+' expr
   53      | expr . '-' expr
   54      | expr . '*' expr
   55      | expr . '/' expr
   56      | expr . '%' expr
   57      | expr . TOK_EQ expr
   58      | expr . TOK_NE expr
   59      | expr . TOK_LT expr
   60      | expr . TOK_LE expr
   61      | expr . TOK_GT expr
   62      | expr . TOK_GE expr
   87 variable: expr . '[' expr ']'
   88         | expr . TOK_ARROW TOK_IDENT

    TOK_VARDECL  shift, and go to state 77
    TOK_ARROW    shift, and go to state 78
    TOK_EQ       shift, and go to state 79
    TOK_NE       shift, and go to state 80
    TOK_LT       shift, and go to state 81
    TOK_LE       shift, and go to state 82
    TOK_GT       shift, and go to state 83
    TOK_GE       shift, and go to state 84
    '+'          shift, and go to state 85
    '-'          shift, and go to state 86
    '*'          shift, and go to state 87
    '/'          shift, and go to state 88
    '%'          shift, and go to state 89
    '='          shift, and go to state 91
    '['          shift, and go to state 92

    '='       [reduce using rule 51 (binop)]
    '['       [reduce using rule 51 (binop)]
    $default  reduce using rule 51 (binop)


State 120

   88 variable: expr TOK_ARROW TOK_IDENT .

    $default  reduce using rule 88 (variable)


State 121

   50 binop: expr . '=' expr
   51      | expr . TOK_VARDECL expr
   52      | expr . '+' expr
   53      | expr . '-' expr
   54      | expr . '*' expr
   55      | expr . '/' expr
   56      | expr . '%' expr
   57      | expr . TOK_EQ expr
   57      | expr TOK_EQ expr .
   58      | expr . TOK_NE expr
   59      | expr . TOK_LT expr
   60      | expr . TOK_LE expr
   61      | expr . TOK_GT expr
   62      | expr . TOK_GE expr
   87 variable: expr . '[' expr ']'
   88         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 78
    '+'        shift, and go to state 85
    '-'        shift, and go to state 86
    '*'        shift, and go to state 87
    '/'        shift, and go to state 88
    '%'        shift, and go to state 89
    '='        shift, and go to state 91
    '['        shift, and go to state 92

    '='       [reduce using rule 57 (binop)]
    '['       [reduce using rule 57 (binop)]
    $default  reduce using rule 57 (binop)


State 122

   50 binop: expr . '=' expr
   51      | expr . TOK_VARDECL expr
   52      | expr . '+' expr
   53      | expr . '-' expr
   54      | expr . '*' expr
   55      | expr . '/' expr
   56      | expr . '%' expr
   57      | expr . TOK_EQ expr
   58      | expr . TOK_NE expr
   58      | expr TOK_NE expr .
   59      | expr . TOK_LT expr
   60      | expr . TOK_LE expr
   61      | expr . TOK_GT expr
   62      | expr . TOK_GE expr
   87 variable: expr . '[' expr ']'
   88         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 78
    '+'        shift, and go to state 85
    '-'        shift, and go to state 86
    '*'        shift, and go to state 87
    '/'        shift, and go to state 88
    '%'        shift, and go to state 89
    '='        shift, and go to state 91
    '['        shift, and go to state 92

    '='       [reduce using rule 58 (binop)]
    '['       [reduce using rule 58 (binop)]
    $default  reduce using rule 58 (binop)


State 123

   50 binop: expr . '=' expr
   51      | expr . TOK_VARDECL expr
   52      | expr . '+' expr
   53      | expr . '-' expr
   54      | expr . '*' expr
   55      | expr . '/' expr
   56      | expr . '%' expr
   57      | expr . TOK_EQ expr
   58      | expr . TOK_NE expr
   59      | expr . TOK_LT expr
   59      | expr TOK_LT expr .
   60      | expr . TOK_LE expr
   61      | expr . TOK_GT expr
   62      | expr . TOK_GE expr
   87 variable: expr . '[' expr ']'
   88         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 78
    '+'        shift, and go to state 85
    '-'        shift, and go to state 86
    '*'        shift, and go to state 87
    '/'        shift, and go to state 88
    '%'        shift, and go to state 89
    '='        shift, and go to state 91
    '['        shift, and go to state 92

    '='       [reduce using rule 59 (binop)]
    '['       [reduce using rule 59 (binop)]
    $default  reduce using rule 59 (binop)


State 124

   50 binop: expr . '=' expr
   51      | expr . TOK_VARDECL expr
   52      | expr . '+' expr
   53      | expr . '-' expr
   54      | expr . '*' expr
   55      | expr . '/' expr
   56      | expr . '%' expr
   57      | expr . TOK_EQ expr
   58      | expr . TOK_NE expr
   59      | expr . TOK_LT expr
   60      | expr . TOK_LE expr
   60      | expr TOK_LE expr .
   61      | expr . TOK_GT expr
   62      | expr . TOK_GE expr
   87 variable: expr . '[' expr ']'
   88         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 78
    '+'        shift, and go to state 85
    '-'        shift, and go to state 86
    '*'        shift, and go to state 87
    '/'        shift, and go to state 88
    '%'        shift, and go to state 89
    '='        shift, and go to state 91
    '['        shift, and go to state 92

    '='       [reduce using rule 60 (binop)]
    '['       [reduce using rule 60 (binop)]
    $default  reduce using rule 60 (binop)


State 125

   50 binop: expr . '=' expr
   51      | expr . TOK_VARDECL expr
   52      | expr . '+' expr
   53      | expr . '-' expr
   54      | expr . '*' expr
   55      | expr . '/' expr
   56      | expr . '%' expr
   57      | expr . TOK_EQ expr
   58      | expr . TOK_NE expr
   59      | expr . TOK_LT expr
   60      | expr . TOK_LE expr
   61      | expr . TOK_GT expr
   61      | expr TOK_GT expr .
   62      | expr . TOK_GE expr
   87 variable: expr . '[' expr ']'
   88         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 78
    '+'        shift, and go to state 85
    '-'        shift, and go to state 86
    '*'        shift, and go to state 87
    '/'        shift, and go to state 88
    '%'        shift, and go to state 89
    '='        shift, and go to state 91
    '['        shift, and go to state 92

    '='       [reduce using rule 61 (binop)]
    '['       [reduce using rule 61 (binop)]
    $default  reduce using rule 61 (binop)


State 126

   50 binop: expr . '=' expr
   51      | expr . TOK_VARDECL expr
   52      | expr . '+' expr
   53      | expr . '-' expr
   54      | expr . '*' expr
   55      | expr . '/' expr
   56      | expr . '%' expr
   57      | expr . TOK_EQ expr
   58      | expr . TOK_NE expr
   59      | expr . TOK_LT expr
   60      | expr . TOK_LE expr
   61      | expr . TOK_GT expr
   62      | expr . TOK_GE expr
   62      | expr TOK_GE expr .
   87 variable: expr . '[' expr ']'
   88         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 78
    '+'        shift, and go to state 85
    '-'        shift, and go to state 86
    '*'        shift, and go to state 87
    '/'        shift, and go to state 88
    '%'        shift, and go to state 89
    '='        shift, and go to state 91
    '['        shift, and go to state 92

    '='       [reduce using rule 62 (binop)]
    '['       [reduce using rule 62 (binop)]
    $default  reduce using rule 62 (binop)


State 127

   50 binop: expr . '=' expr
   51      | expr . TOK_VARDECL expr
   52      | expr . '+' expr
   52      | expr '+' expr .
   53      | expr . '-' expr
   54      | expr . '*' expr
   55      | expr . '/' expr
   56      | expr . '%' expr
   57      | expr . TOK_EQ expr
   58      | expr . TOK_NE expr
   59      | expr . TOK_LT expr
   60      | expr . TOK_LE expr
   61      | expr . TOK_GT expr
   62      | expr . TOK_GE expr
   87 variable: expr . '[' expr ']'
   88         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 78
    '*'        shift, and go to state 87
    '/'        shift, and go to state 88
    '%'        shift, and go to state 89
    '='        shift, and go to state 91
    '['        shift, and go to state 92

    '='       [reduce using rule 52 (binop)]
    '['       [reduce using rule 52 (binop)]
    $default  reduce using rule 52 (binop)


State 128

   50 binop: expr . '=' expr
   51      | expr . TOK_VARDECL expr
   52      | expr . '+' expr
   53      | expr . '-' expr
   53      | expr '-' expr .
   54      | expr . '*' expr
   55      | expr . '/' expr
   56      | expr . '%' expr
   57      | expr . TOK_EQ expr
   58      | expr . TOK_NE expr
   59      | expr . TOK_LT expr
   60      | expr . TOK_LE expr
   61      | expr . TOK_GT expr
   62      | expr . TOK_GE expr
   87 variable: expr . '[' expr ']'
   88         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 78
    '*'        shift, and go to state 87
    '/'        shift, and go to state 88
    '%'        shift, and go to state 89
    '='        shift, and go to state 91
    '['        shift, and go to state 92

    '='       [reduce using rule 53 (binop)]
    '['       [reduce using rule 53 (binop)]
    $default  reduce using rule 53 (binop)


State 129

   50 binop: expr . '=' expr
   51      | expr . TOK_VARDECL expr
   52      | expr . '+' expr
   53      | expr . '-' expr
   54      | expr . '*' expr
   54      | expr '*' expr .
   55      | expr . '/' expr
   56      | expr . '%' expr
   57      | expr . TOK_EQ expr
   58      | expr . TOK_NE expr
   59      | expr . TOK_LT expr
   60      | expr . TOK_LE expr
   61      | expr . TOK_GT expr
   62      | expr . TOK_GE expr
   87 variable: expr . '[' expr ']'
   88         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 78
    '='        shift, and go to state 91
    '['        shift, and go to state 92

    '='       [reduce using rule 54 (binop)]
    '['       [reduce using rule 54 (binop)]
    $default  reduce using rule 54 (binop)


State 130

   50 binop: expr . '=' expr
   51      | expr . TOK_VARDECL expr
   52      | expr . '+' expr
   53      | expr . '-' expr
   54      | expr . '*' expr
   55      | expr . '/' expr
   55      | expr '/' expr .
   56      | expr . '%' expr
   57      | expr . TOK_EQ expr
   58      | expr . TOK_NE expr
   59      | expr . TOK_LT expr
   60      | expr . TOK_LE expr
   61      | expr . TOK_GT expr
   62      | expr . TOK_GE expr
   87 variable: expr . '[' expr ']'
   88         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 78
    '='        shift, and go to state 91
    '['        shift, and go to state 92

    '='       [reduce using rule 55 (binop)]
    '['       [reduce using rule 55 (binop)]
    $default  reduce using rule 55 (binop)


State 131

   50 binop: expr . '=' expr
   51      | expr . TOK_VARDECL expr
   52      | expr . '+' expr
   53      | expr . '-' expr
   54      | expr . '*' expr
   55      | expr . '/' expr
   56      | expr . '%' expr
   56      | expr '%' expr .
   57      | expr . TOK_EQ expr
   58      | expr . TOK_NE expr
   59      | expr . TOK_LT expr
   60      | expr . TOK_LE expr
   61      | expr . TOK_GT expr
   62      | expr . TOK_GE expr
   87 variable: expr . '[' expr ']'
   88         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 78
    '='        shift, and go to state 91
    '['        shift, and go to state 92

    '='       [reduce using rule 56 (binop)]
    '['       [reduce using rule 56 (binop)]
    $default  reduce using rule 56 (binop)


State 132

   50 binop: expr . '=' expr
   50      | expr '=' expr .
   51      | expr . TOK_VARDECL expr
   52      | expr . '+' expr
   53      | expr . '-' expr
   54      | expr . '*' expr
   55      | expr . '/' expr
   56      | expr . '%' expr
   57      | expr . TOK_EQ expr
   58      | expr . TOK_NE expr
   59      | expr . TOK_LT expr
   60      | expr . TOK_LE expr
   61      | expr . TOK_GT expr
   62      | expr . TOK_GE expr
   87 variable: expr . '[' expr ']'
   88         | expr . TOK_ARROW TOK_IDENT

    TOK_VARDECL  shift, and go to state 77
    TOK_ARROW    shift, and go to state 78
    TOK_EQ       shift, and go to state 79
    TOK_NE       shift, and go to state 80
    TOK_LT       shift, and go to state 81
    TOK_LE       shift, and go to state 82
    TOK_GT       shift, and go to state 83
    TOK_GE       shift, and go to state 84
    '+'          shift, and go to state 85
    '-'          shift, and go to state 86
    '*'          shift, and go to state 87
    '/'          shift, and go to state 88
    '%'          shift, and go to state 89
    '='          shift, and go to state 91
    '['          shift, and go to state 92

    TOK_VARDECL  [reduce using rule 50 (binop)]
    TOK_ARROW    [reduce using rule 50 (binop)]
    TOK_EQ       [reduce using rule 50 (binop)]
    TOK_NE       [reduce using rule 50 (binop)]
    TOK_LT       [reduce using rule 50 (binop)]
    TOK_LE       [reduce using rule 50 (binop)]
    TOK_GT       [reduce using rule 50 (binop)]
    TOK_GE       [reduce using rule 50 (binop)]
    '+'          [reduce using rule 50 (binop)]
    '-'          [reduce using rule 50 (binop)]
    '*'          [reduce using rule 50 (binop)]
    '/'          [reduce using rule 50 (binop)]
    '%'          [reduce using rule 50 (binop)]
    '='          [reduce using rule 50 (binop)]
    '['          [reduce using rule 50 (binop)]
    $default     reduce using rule 50 (binop)


State 133

   50 binop: expr . '=' expr
   51      | expr . TOK_VARDECL expr
   52      | expr . '+' expr
   53      | expr . '-' expr
   54      | expr . '*' expr
   55      | expr . '/' expr
   56      | expr . '%' expr
   57      | expr . TOK_EQ expr
   58      | expr . TOK_NE expr
   59      | expr . TOK_LT expr
   60      | expr . TOK_LE expr
   61      | expr . TOK_GT expr
   62      | expr . TOK_GE expr
   87 variable: expr . '[' expr ']'
   87         | expr '[' expr . ']'
   88         | expr . TOK_ARROW TOK_IDENT

    TOK_VARDECL  shift, and go to state 77
    TOK_ARROW    shift, and go to state 78
    TOK_EQ       shift, and go to state 79
    TOK_NE       shift, and go to state 80
    TOK_LT       shift, and go to state 81
    TOK_LE       shift, and go to state 82
    TOK_GT       shift, and go to state 83
    TOK_GE       shift, and go to state 84
    '+'          shift, and go to state 85
    '-'          shift, and go to state 86
    '*'          shift, and go to state 87
    '/'          shift, and go to state 88
    '%'          shift, and go to state 89
    '='          shift, and go to state 91
    '['          shift, and go to state 92
    ']'          shift, and go to state 145


State 134

   73 block: blockHelp '}' ';' .

    $default  reduce using rule 73 (block)


State 135

   36 ifelse: TOK_IF TOK_PARAM expr ')' . statement TOK_ELSE statement
   37       | TOK_IF TOK_PARAM expr ')' . statement
   40       | TOK_IF TOK_PARAM expr ')' . block
   41       | TOK_IF TOK_PARAM expr ')' . block TOK_ELSE block

    TOK_IF         shift, and go to state 8
    TOK_ELSE       shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_NOT        shift, and go to state 15
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    TOK_PARAM      shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '{'            shift, and go to state 23
    ';'            shift, and go to state 24

    '+'       [reduce using rule 49 (binop)]
    '-'       [reduce using rule 49 (binop)]
    ';'       [reduce using rule 49 (binop)]
    $default  reduce using rule 49 (binop)

    ifelse     go to state 32
    expr       go to state 33
    binop      go to state 34
    unop       go to state 35
    statement  go to state 146
    block      go to state 147
    blockHelp  go to state 38
    while      go to state 39
    return     go to state 40
    call       go to state 41
    funCall    go to state 42
    variable   go to state 43
    constant   go to state 44


State 136

   38 ifelse: TOK_ELSE TOK_IF TOK_PARAM expr . ')' statement
   39       | TOK_ELSE TOK_IF TOK_PARAM expr . ')' block
   50 binop: expr . '=' expr
   51      | expr . TOK_VARDECL expr
   52      | expr . '+' expr
   53      | expr . '-' expr
   54      | expr . '*' expr
   55      | expr . '/' expr
   56      | expr . '%' expr
   57      | expr . TOK_EQ expr
   58      | expr . TOK_NE expr
   59      | expr . TOK_LT expr
   60      | expr . TOK_LE expr
   61      | expr . TOK_GT expr
   62      | expr . TOK_GE expr
   87 variable: expr . '[' expr ']'
   88         | expr . TOK_ARROW TOK_IDENT

    TOK_VARDECL  shift, and go to state 77
    TOK_ARROW    shift, and go to state 78
    TOK_EQ       shift, and go to state 79
    TOK_NE       shift, and go to state 80
    TOK_LT       shift, and go to state 81
    TOK_LE       shift, and go to state 82
    TOK_GT       shift, and go to state 83
    TOK_GE       shift, and go to state 84
    '+'          shift, and go to state 85
    '-'          shift, and go to state 86
    '*'          shift, and go to state 87
    '/'          shift, and go to state 88
    '%'          shift, and go to state 89
    ')'          shift, and go to state 148
    '='          shift, and go to state 91
    '['          shift, and go to state 92


State 137

   76 while: TOK_WHILE TOK_PARAM expr ')' . statement

    TOK_IF         shift, and go to state 8
    TOK_ELSE       shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_NOT        shift, and go to state 15
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    TOK_PARAM      shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '{'            shift, and go to state 23
    ';'            shift, and go to state 24

    '+'       [reduce using rule 49 (binop)]
    '-'       [reduce using rule 49 (binop)]
    ';'       [reduce using rule 49 (binop)]
    $default  reduce using rule 49 (binop)

    ifelse     go to state 32
    expr       go to state 33
    binop      go to state 34
    unop       go to state 35
    statement  go to state 149
    block      go to state 37
    blockHelp  go to state 38
    while      go to state 39
    return     go to state 40
    call       go to state 41
    funCall    go to state 42
    variable   go to state 43
    constant   go to state 44


State 138

   50 binop: expr . '=' expr
   51      | expr . TOK_VARDECL expr
   52      | expr . '+' expr
   53      | expr . '-' expr
   54      | expr . '*' expr
   55      | expr . '/' expr
   56      | expr . '%' expr
   57      | expr . TOK_EQ expr
   58      | expr . TOK_NE expr
   59      | expr . TOK_LT expr
   60      | expr . TOK_LE expr
   61      | expr . TOK_GT expr
   62      | expr . TOK_GE expr
   80 allocation: TOK_STRING TOK_PARAM expr . ')'
   87 variable: expr . '[' expr ']'
   88         | expr . TOK_ARROW TOK_IDENT

    TOK_VARDECL  shift, and go to state 77
    TOK_ARROW    shift, and go to state 78
    TOK_EQ       shift, and go to state 79
    TOK_NE       shift, and go to state 80
    TOK_LT       shift, and go to state 81
    TOK_LE       shift, and go to state 82
    TOK_GT       shift, and go to state 83
    TOK_GE       shift, and go to state 84
    '+'          shift, and go to state 85
    '-'          shift, and go to state 86
    '*'          shift, and go to state 87
    '/'          shift, and go to state 88
    '%'          shift, and go to state 89
    ')'          shift, and go to state 150
    '='          shift, and go to state 91
    '['          shift, and go to state 92


State 139

   50 binop: expr . '=' expr
   51      | expr . TOK_VARDECL expr
   52      | expr . '+' expr
   53      | expr . '-' expr
   54      | expr . '*' expr
   55      | expr . '/' expr
   56      | expr . '%' expr
   57      | expr . TOK_EQ expr
   58      | expr . TOK_NE expr
   59      | expr . TOK_LT expr
   60      | expr . TOK_LE expr
   61      | expr . TOK_GT expr
   62      | expr . TOK_GE expr
   81 allocation: basetype '[' expr . ']'
   87 variable: expr . '[' expr ']'
   88         | expr . TOK_ARROW TOK_IDENT

    TOK_VARDECL  shift, and go to state 77
    TOK_ARROW    shift, and go to state 78
    TOK_EQ       shift, and go to state 79
    TOK_NE       shift, and go to state 80
    TOK_LT       shift, and go to state 81
    TOK_LE       shift, and go to state 82
    TOK_GT       shift, and go to state 83
    TOK_GE       shift, and go to state 84
    '+'          shift, and go to state 85
    '-'          shift, and go to state 86
    '*'          shift, and go to state 87
    '/'          shift, and go to state 88
    '%'          shift, and go to state 89
    '='          shift, and go to state 91
    '['          shift, and go to state 92
    ']'          shift, and go to state 151


State 140

   13 fielddecl: basetype TOK_ARRAY TOK_IDENT .

    $default  reduce using rule 13 (fielddecl)


State 141

   35 localdecl: identdec TOK_VARDECL . expr ';'

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_NOT        shift, and go to state 15
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    TOK_PARAM      shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22

    '+'       [reduce using rule 49 (binop)]
    '-'       [reduce using rule 49 (binop)]
    $default  reduce using rule 49 (binop)

    expr      go to state 152
    binop     go to state 34
    unop      go to state 35
    call      go to state 41
    funCall   go to state 42
    variable  go to state 43
    constant  go to state 44


State 142

   21 param: param ',' identdec .

    $default  reduce using rule 21 (param)


State 143

   15 function: func fnbody '}' ';' .

    $default  reduce using rule 15 (function)


State 144

   14 globaldecl: identdec TOK_VARDECL constant ';' .

    $default  reduce using rule 14 (globaldecl)


State 145

   87 variable: expr '[' expr ']' .

    $default  reduce using rule 87 (variable)


State 146

   36 ifelse: TOK_IF TOK_PARAM expr ')' statement . TOK_ELSE statement
   37       | TOK_IF TOK_PARAM expr ')' statement .

    TOK_ELSE  shift, and go to state 153

    $default  reduce using rule 37 (ifelse)


State 147

   40 ifelse: TOK_IF TOK_PARAM expr ')' block .
   41       | TOK_IF TOK_PARAM expr ')' block . TOK_ELSE block
   66 statement: block .

    TOK_ELSE  shift, and go to state 154

    $end           reduce using rule 40 (ifelse)
    $end           [reduce using rule 66 (statement)]
    error          reduce using rule 40 (ifelse)
    error          [reduce using rule 66 (statement)]
    TOK_VOID       reduce using rule 40 (ifelse)
    TOK_VOID       [reduce using rule 66 (statement)]
    TOK_INT        reduce using rule 40 (ifelse)
    TOK_INT        [reduce using rule 66 (statement)]
    TOK_STRING     reduce using rule 40 (ifelse)
    TOK_STRING     [reduce using rule 66 (statement)]
    TOK_IF         reduce using rule 40 (ifelse)
    TOK_IF         [reduce using rule 66 (statement)]
    TOK_ELSE       [reduce using rule 66 (statement)]
    TOK_WHILE      reduce using rule 40 (ifelse)
    TOK_WHILE      [reduce using rule 66 (statement)]
    TOK_RETURN     reduce using rule 40 (ifelse)
    TOK_RETURN     [reduce using rule 66 (statement)]
    TOK_STRUCT     reduce using rule 40 (ifelse)
    TOK_STRUCT     [reduce using rule 66 (statement)]
    TOK_NULL       reduce using rule 40 (ifelse)
    TOK_NULL       [reduce using rule 66 (statement)]
    TOK_NEW        reduce using rule 40 (ifelse)
    TOK_NEW        [reduce using rule 66 (statement)]
    TOK_VARDECL    reduce using rule 40 (ifelse)
    TOK_VARDECL    [reduce using rule 66 (statement)]
    TOK_ARROW      reduce using rule 40 (ifelse)
    TOK_ARROW      [reduce using rule 66 (statement)]
    TOK_EQ         reduce using rule 40 (ifelse)
    TOK_EQ         [reduce using rule 66 (statement)]
    TOK_NE         reduce using rule 40 (ifelse)
    TOK_NE         [reduce using rule 66 (statement)]
    TOK_LT         reduce using rule 40 (ifelse)
    TOK_LT         [reduce using rule 66 (statement)]
    TOK_LE         reduce using rule 40 (ifelse)
    TOK_LE         [reduce using rule 66 (statement)]
    TOK_GT         reduce using rule 40 (ifelse)
    TOK_GT         [reduce using rule 66 (statement)]
    TOK_GE         reduce using rule 40 (ifelse)
    TOK_GE         [reduce using rule 66 (statement)]
    TOK_NOT        reduce using rule 40 (ifelse)
    TOK_NOT        [reduce using rule 66 (statement)]
    TOK_IDENT      reduce using rule 40 (ifelse)
    TOK_IDENT      [reduce using rule 66 (statement)]
    TOK_INTCON     reduce using rule 40 (ifelse)
    TOK_INTCON     [reduce using rule 66 (statement)]
    TOK_CHARCON    reduce using rule 40 (ifelse)
    TOK_CHARCON    [reduce using rule 66 (statement)]
    TOK_STRINGCON  reduce using rule 40 (ifelse)
    TOK_STRINGCON  [reduce using rule 66 (statement)]
    TOK_PARAM      reduce using rule 40 (ifelse)
    TOK_PARAM      [reduce using rule 66 (statement)]
    '+'            reduce using rule 40 (ifelse)
    '+'            [reduce using rule 66 (statement)]
    '-'            reduce using rule 40 (ifelse)
    '-'            [reduce using rule 66 (statement)]
    '*'            reduce using rule 40 (ifelse)
    '*'            [reduce using rule 66 (statement)]
    '/'            reduce using rule 40 (ifelse)
    '/'            [reduce using rule 66 (statement)]
    '%'            reduce using rule 40 (ifelse)
    '%'            [reduce using rule 66 (statement)]
    '{'            reduce using rule 40 (ifelse)
    '{'            [reduce using rule 66 (statement)]
    ';'            reduce using rule 40 (ifelse)
    ';'            [reduce using rule 66 (statement)]
    '}'            reduce using rule 40 (ifelse)
    '}'            [reduce using rule 66 (statement)]
    '='            reduce using rule 40 (ifelse)
    '='            [reduce using rule 66 (statement)]
    '['            reduce using rule 40 (ifelse)
    '['            [reduce using rule 66 (statement)]
    $default       reduce using rule 40 (ifelse)


State 148

   38 ifelse: TOK_ELSE TOK_IF TOK_PARAM expr ')' . statement
   39       | TOK_ELSE TOK_IF TOK_PARAM expr ')' . block

    TOK_IF         shift, and go to state 8
    TOK_ELSE       shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_NOT        shift, and go to state 15
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    TOK_PARAM      shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '{'            shift, and go to state 23
    ';'            shift, and go to state 24

    '+'       [reduce using rule 49 (binop)]
    '-'       [reduce using rule 49 (binop)]
    ';'       [reduce using rule 49 (binop)]
    $default  reduce using rule 49 (binop)

    ifelse     go to state 32
    expr       go to state 33
    binop      go to state 34
    unop       go to state 35
    statement  go to state 155
    block      go to state 156
    blockHelp  go to state 38
    while      go to state 39
    return     go to state 40
    call       go to state 41
    funCall    go to state 42
    variable   go to state 43
    constant   go to state 44


State 149

   76 while: TOK_WHILE TOK_PARAM expr ')' statement .

    $default  reduce using rule 76 (while)


State 150

   80 allocation: TOK_STRING TOK_PARAM expr ')' .

    $default  reduce using rule 80 (allocation)


State 151

   81 allocation: basetype '[' expr ']' .

    $default  reduce using rule 81 (allocation)


State 152

   35 localdecl: identdec TOK_VARDECL expr . ';'
   50 binop: expr . '=' expr
   51      | expr . TOK_VARDECL expr
   52      | expr . '+' expr
   53      | expr . '-' expr
   54      | expr . '*' expr
   55      | expr . '/' expr
   56      | expr . '%' expr
   57      | expr . TOK_EQ expr
   58      | expr . TOK_NE expr
   59      | expr . TOK_LT expr
   60      | expr . TOK_LE expr
   61      | expr . TOK_GT expr
   62      | expr . TOK_GE expr
   87 variable: expr . '[' expr ']'
   88         | expr . TOK_ARROW TOK_IDENT

    TOK_VARDECL  shift, and go to state 77
    TOK_ARROW    shift, and go to state 78
    TOK_EQ       shift, and go to state 79
    TOK_NE       shift, and go to state 80
    TOK_LT       shift, and go to state 81
    TOK_LE       shift, and go to state 82
    TOK_GT       shift, and go to state 83
    TOK_GE       shift, and go to state 84
    '+'          shift, and go to state 85
    '-'          shift, and go to state 86
    '*'          shift, and go to state 87
    '/'          shift, and go to state 88
    '%'          shift, and go to state 89
    ';'          shift, and go to state 157
    '='          shift, and go to state 91
    '['          shift, and go to state 92


State 153

   36 ifelse: TOK_IF TOK_PARAM expr ')' statement TOK_ELSE . statement

    TOK_IF         shift, and go to state 8
    TOK_ELSE       shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_NOT        shift, and go to state 15
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    TOK_PARAM      shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '{'            shift, and go to state 23
    ';'            shift, and go to state 24

    '+'       [reduce using rule 49 (binop)]
    '-'       [reduce using rule 49 (binop)]
    ';'       [reduce using rule 49 (binop)]
    $default  reduce using rule 49 (binop)

    ifelse     go to state 32
    expr       go to state 33
    binop      go to state 34
    unop       go to state 35
    statement  go to state 158
    block      go to state 37
    blockHelp  go to state 38
    while      go to state 39
    return     go to state 40
    call       go to state 41
    funCall    go to state 42
    variable   go to state 43
    constant   go to state 44


State 154

   41 ifelse: TOK_IF TOK_PARAM expr ')' block TOK_ELSE . block

    '{'  shift, and go to state 23

    block      go to state 159
    blockHelp  go to state 38


State 155

   38 ifelse: TOK_ELSE TOK_IF TOK_PARAM expr ')' statement .

    $default  reduce using rule 38 (ifelse)


State 156

   39 ifelse: TOK_ELSE TOK_IF TOK_PARAM expr ')' block .
   66 statement: block .

    $end           reduce using rule 39 (ifelse)
    $end           [reduce using rule 66 (statement)]
    error          reduce using rule 39 (ifelse)
    error          [reduce using rule 66 (statement)]
    TOK_VOID       reduce using rule 39 (ifelse)
    TOK_VOID       [reduce using rule 66 (statement)]
    TOK_INT        reduce using rule 39 (ifelse)
    TOK_INT        [reduce using rule 66 (statement)]
    TOK_STRING     reduce using rule 39 (ifelse)
    TOK_STRING     [reduce using rule 66 (statement)]
    TOK_IF         reduce using rule 39 (ifelse)
    TOK_IF         [reduce using rule 66 (statement)]
    TOK_ELSE       reduce using rule 39 (ifelse)
    TOK_ELSE       [reduce using rule 66 (statement)]
    TOK_WHILE      reduce using rule 39 (ifelse)
    TOK_WHILE      [reduce using rule 66 (statement)]
    TOK_RETURN     reduce using rule 39 (ifelse)
    TOK_RETURN     [reduce using rule 66 (statement)]
    TOK_STRUCT     reduce using rule 39 (ifelse)
    TOK_STRUCT     [reduce using rule 66 (statement)]
    TOK_NULL       reduce using rule 39 (ifelse)
    TOK_NULL       [reduce using rule 66 (statement)]
    TOK_NEW        reduce using rule 39 (ifelse)
    TOK_NEW        [reduce using rule 66 (statement)]
    TOK_VARDECL    reduce using rule 39 (ifelse)
    TOK_VARDECL    [reduce using rule 66 (statement)]
    TOK_ARROW      reduce using rule 39 (ifelse)
    TOK_ARROW      [reduce using rule 66 (statement)]
    TOK_EQ         reduce using rule 39 (ifelse)
    TOK_EQ         [reduce using rule 66 (statement)]
    TOK_NE         reduce using rule 39 (ifelse)
    TOK_NE         [reduce using rule 66 (statement)]
    TOK_LT         reduce using rule 39 (ifelse)
    TOK_LT         [reduce using rule 66 (statement)]
    TOK_LE         reduce using rule 39 (ifelse)
    TOK_LE         [reduce using rule 66 (statement)]
    TOK_GT         reduce using rule 39 (ifelse)
    TOK_GT         [reduce using rule 66 (statement)]
    TOK_GE         reduce using rule 39 (ifelse)
    TOK_GE         [reduce using rule 66 (statement)]
    TOK_NOT        reduce using rule 39 (ifelse)
    TOK_NOT        [reduce using rule 66 (statement)]
    TOK_IDENT      reduce using rule 39 (ifelse)
    TOK_IDENT      [reduce using rule 66 (statement)]
    TOK_INTCON     reduce using rule 39 (ifelse)
    TOK_INTCON     [reduce using rule 66 (statement)]
    TOK_CHARCON    reduce using rule 39 (ifelse)
    TOK_CHARCON    [reduce using rule 66 (statement)]
    TOK_STRINGCON  reduce using rule 39 (ifelse)
    TOK_STRINGCON  [reduce using rule 66 (statement)]
    TOK_PARAM      reduce using rule 39 (ifelse)
    TOK_PARAM      [reduce using rule 66 (statement)]
    '+'            reduce using rule 39 (ifelse)
    '+'            [reduce using rule 66 (statement)]
    '-'            reduce using rule 39 (ifelse)
    '-'            [reduce using rule 66 (statement)]
    '*'            reduce using rule 39 (ifelse)
    '*'            [reduce using rule 66 (statement)]
    '/'            reduce using rule 39 (ifelse)
    '/'            [reduce using rule 66 (statement)]
    '%'            reduce using rule 39 (ifelse)
    '%'            [reduce using rule 66 (statement)]
    '{'            reduce using rule 39 (ifelse)
    '{'            [reduce using rule 66 (statement)]
    ';'            reduce using rule 39 (ifelse)
    ';'            [reduce using rule 66 (statement)]
    '}'            reduce using rule 39 (ifelse)
    '}'            [reduce using rule 66 (statement)]
    '='            reduce using rule 39 (ifelse)
    '='            [reduce using rule 66 (statement)]
    '['            reduce using rule 39 (ifelse)
    '['            [reduce using rule 66 (statement)]
    $default       reduce using rule 39 (ifelse)


State 157

   35 localdecl: identdec TOK_VARDECL expr ';' .

    $default  reduce using rule 35 (localdecl)


State 158

   36 ifelse: TOK_IF TOK_PARAM expr ')' statement TOK_ELSE statement .

    $default  reduce using rule 36 (ifelse)


State 159

   41 ifelse: TOK_IF TOK_PARAM expr ')' block TOK_ELSE block .

    $default  reduce using rule 41 (ifelse)

Nonterminals useless in grammar

   allocation
   exprList
   call
   variable


Terminals unused in grammar

   TOK_CHAR
   TOK_ELSE
   TOK_NEW
   TOK_ARROW
   TOK_BR
   TOK_EQ
   TOK_NE
   TOK_LT
   TOK_LE
   TOK_GT
   TOK_GE
   TOK_NOT
   TOK_ROOT
   TOK_CALL
   TOK_IFELSE
   TOK_INITDECL
   TOK_POS
   TOK_NEG
   TOK_NEWARRAY
   TOK_TYPEID
   TOK_FIELD
   TOK_DECLID
   '+'
   '-'
   '*'
   '/'
   '%'
   '['
   ']'


Rules useless in grammar

   43 allocation: TOK_IF

   44 exprList: exprList ',' expr
   45         | expr

   46 call: TOK_IDENT '(' exprList ')'

   47 variable: TOK_IDENT
   48         | expr '[' expr ']'
   49         | expr TOK_ARROW TOK_IDENT


Grammar

    0 $accept: start $end

    1 start: program

    2 program: program structdef
    3        | program globaldecl
    4        | program function
    5        | %empty

    6 structdef: struc '}'

    7 struc: struc fielddecl ';'
    8      | TOK_STRUCT TOK_IDENT '{'

    9 fielddecl: basetype TOK_IDENT
   10          | basetype TOK_ARRAY TOK_IDENT

   11 globaldecl: identdec TOK_VARDECL constant ';'

   12 function: identdec TOK_PARAM identdeclist ')' fnbody
   13         | identdec '(' ')' fnbody
   14         | identdec '(' ')' '{' '}'

   15 identdeclist: identdeclist ',' identdec
   16             | identdec

   17 identdec: basetype TOK_ARRAY TOK_IDENT
   18         | basetype TOK_IDENT

   19 fnbody: '{' localdecl statement
   20       | '}'
   21       | ';'

   22 basetype: TOK_VOID
   23         | TOK_INT
   24         | TOK_STRING
   25         | TOK_IDENT

   26 localdecl: identdec TOK_VARDECL expr ';'

   27 ifelse: TOK_IF

   28 expr: TOK_NULL

   29 statement: block
   30          | while
   31          | ifelse
   32          | TOK_RETURN
   33          | expr ';'
   34          | ';'

   35 block: TOK_BLOCK stateList '}'

   36 stateList: stateList statement
   37          | statement

   38 while: TOK_WHILE '(' expr ')' statement

   39 constant: TOK_INTCON
   40         | TOK_STRINGCON
   41         | TOK_CHARCON
   42         | TOK_NULL


Terminals, with rules where they appear

$end (0) 0
'%' (37)
'(' (40) 13 14 38
')' (41) 12 13 14 38
'*' (42)
'+' (43)
',' (44) 15
'-' (45)
'/' (47)
';' (59) 7 11 21 26 33 34
'[' (91)
']' (93)
'{' (123) 8 14 19
'}' (125) 6 14 20 35
error (256)
TOK_VOID (258) 22
TOK_CHAR (259)
TOK_INT (260) 23
TOK_STRING (261) 24
TOK_IF (262) 27
TOK_ELSE (263)
TOK_WHILE (264) 38
TOK_RETURN (265) 32
TOK_STRUCT (266) 8
TOK_NULL (267) 28 42
TOK_NEW (268)
TOK_VARDECL (269) 11 26
TOK_ARRAY (270) 10 17
TOK_ARROW (271)
TOK_BR (272)
TOK_EQ (273)
TOK_NE (274)
TOK_LT (275)
TOK_LE (276)
TOK_GT (277)
TOK_GE (278)
TOK_NOT (279)
TOK_IDENT (280) 8 9 10 17 18 25
TOK_INTCON (281) 39
TOK_CHARCON (282) 41
TOK_STRINGCON (283) 40
TOK_ROOT (284)
TOK_BLOCK (285) 35
TOK_CALL (286)
TOK_IFELSE (287)
TOK_INITDECL (288)
TOK_POS (289)
TOK_NEG (290)
TOK_NEWARRAY (291)
TOK_TYPEID (292)
TOK_FIELD (293)
TOK_PARAM (294) 12
TOK_DECLID (295)


Nonterminals, with rules where they appear

$accept (54)
    on left: 0
start (55)
    on left: 1, on right: 0
program (56)
    on left: 2 3 4 5, on right: 1 2 3 4
structdef (57)
    on left: 6, on right: 2
struc (58)
    on left: 7 8, on right: 6 7
fielddecl (59)
    on left: 9 10, on right: 7
globaldecl (60)
    on left: 11, on right: 3
function (61)
    on left: 12 13 14, on right: 4
identdeclist (62)
    on left: 15 16, on right: 12 15
identdec (63)
    on left: 17 18, on right: 11 12 13 14 15 16 26
fnbody (64)
    on left: 19 20 21, on right: 12 13
basetype (65)
    on left: 22 23 24 25, on right: 9 10 17 18
localdecl (66)
    on left: 26, on right: 19
ifelse (67)
    on left: 27, on right: 31
expr (68)
    on left: 28, on right: 26 33 38
statement (69)
    on left: 29 30 31 32 33 34, on right: 19 36 37 38
block (70)
    on left: 35, on right: 29
stateList (71)
    on left: 36 37, on right: 35 36
while (72)
    on left: 38, on right: 30
constant (73)
    on left: 39 40 41 42, on right: 11


State 0

    0 $accept: . start $end

    $default  reduce using rule 5 (program)

    start    go to state 1
    program  go to state 2


State 1

    0 $accept: start . $end

    $end  shift, and go to state 3


State 2

    1 start: program .
    2 program: program . structdef
    3        | program . globaldecl
    4        | program . function

    TOK_VOID    shift, and go to state 4
    TOK_INT     shift, and go to state 5
    TOK_STRING  shift, and go to state 6
    TOK_STRUCT  shift, and go to state 7
    TOK_IDENT   shift, and go to state 8

    $default  reduce using rule 1 (start)

    structdef   go to state 9
    struc       go to state 10
    globaldecl  go to state 11
    function    go to state 12
    identdec    go to state 13
    basetype    go to state 14


State 3

    0 $accept: start $end .

    $default  accept


State 4

   22 basetype: TOK_VOID .

    $default  reduce using rule 22 (basetype)


State 5

   23 basetype: TOK_INT .

    $default  reduce using rule 23 (basetype)


State 6

   24 basetype: TOK_STRING .

    $default  reduce using rule 24 (basetype)


State 7

    8 struc: TOK_STRUCT . TOK_IDENT '{'

    TOK_IDENT  shift, and go to state 15


State 8

   25 basetype: TOK_IDENT .

    $default  reduce using rule 25 (basetype)


State 9

    2 program: program structdef .

    $default  reduce using rule 2 (program)


State 10

    6 structdef: struc . '}'
    7 struc: struc . fielddecl ';'

    TOK_VOID    shift, and go to state 4
    TOK_INT     shift, and go to state 5
    TOK_STRING  shift, and go to state 6
    TOK_IDENT   shift, and go to state 8
    '}'         shift, and go to state 16

    fielddecl  go to state 17
    basetype   go to state 18


State 11

    3 program: program globaldecl .

    $default  reduce using rule 3 (program)


State 12

    4 program: program function .

    $default  reduce using rule 4 (program)


State 13

   11 globaldecl: identdec . TOK_VARDECL constant ';'
   12 function: identdec . TOK_PARAM identdeclist ')' fnbody
   13         | identdec . '(' ')' fnbody
   14         | identdec . '(' ')' '{' '}'

    TOK_VARDECL  shift, and go to state 19
    TOK_PARAM    shift, and go to state 20
    '('          shift, and go to state 21


State 14

   17 identdec: basetype . TOK_ARRAY TOK_IDENT
   18         | basetype . TOK_IDENT

    TOK_ARRAY  shift, and go to state 22
    TOK_IDENT  shift, and go to state 23


State 15

    8 struc: TOK_STRUCT TOK_IDENT . '{'

    '{'  shift, and go to state 24


State 16

    6 structdef: struc '}' .

    $default  reduce using rule 6 (structdef)


State 17

    7 struc: struc fielddecl . ';'

    ';'  shift, and go to state 25


State 18

    9 fielddecl: basetype . TOK_IDENT
   10          | basetype . TOK_ARRAY TOK_IDENT

    TOK_ARRAY  shift, and go to state 26
    TOK_IDENT  shift, and go to state 27


State 19

   11 globaldecl: identdec TOK_VARDECL . constant ';'

    TOK_NULL       shift, and go to state 28
    TOK_INTCON     shift, and go to state 29
    TOK_CHARCON    shift, and go to state 30
    TOK_STRINGCON  shift, and go to state 31

    constant  go to state 32


State 20

   12 function: identdec TOK_PARAM . identdeclist ')' fnbody

    TOK_VOID    shift, and go to state 4
    TOK_INT     shift, and go to state 5
    TOK_STRING  shift, and go to state 6
    TOK_IDENT   shift, and go to state 8

    identdeclist  go to state 33
    identdec      go to state 34
    basetype      go to state 14


State 21

   13 function: identdec '(' . ')' fnbody
   14         | identdec '(' . ')' '{' '}'

    ')'  shift, and go to state 35


State 22

   17 identdec: basetype TOK_ARRAY . TOK_IDENT

    TOK_IDENT  shift, and go to state 36


State 23

   18 identdec: basetype TOK_IDENT .

    $default  reduce using rule 18 (identdec)


State 24

    8 struc: TOK_STRUCT TOK_IDENT '{' .

    $default  reduce using rule 8 (struc)


State 25

    7 struc: struc fielddecl ';' .

    $default  reduce using rule 7 (struc)


State 26

   10 fielddecl: basetype TOK_ARRAY . TOK_IDENT

    TOK_IDENT  shift, and go to state 37


State 27

    9 fielddecl: basetype TOK_IDENT .

    $default  reduce using rule 9 (fielddecl)


State 28

   42 constant: TOK_NULL .

    $default  reduce using rule 42 (constant)


State 29

   39 constant: TOK_INTCON .

    $default  reduce using rule 39 (constant)


State 30

   41 constant: TOK_CHARCON .

    $default  reduce using rule 41 (constant)


State 31

   40 constant: TOK_STRINGCON .

    $default  reduce using rule 40 (constant)


State 32

   11 globaldecl: identdec TOK_VARDECL constant . ';'

    ';'  shift, and go to state 38


State 33

   12 function: identdec TOK_PARAM identdeclist . ')' fnbody
   15 identdeclist: identdeclist . ',' identdec

    ')'  shift, and go to state 39
    ','  shift, and go to state 40


State 34

   16 identdeclist: identdec .

    $default  reduce using rule 16 (identdeclist)


State 35

   13 function: identdec '(' ')' . fnbody
   14         | identdec '(' ')' . '{' '}'

    '}'  shift, and go to state 41
    ';'  shift, and go to state 42
    '{'  shift, and go to state 43

    fnbody  go to state 44


State 36

   17 identdec: basetype TOK_ARRAY TOK_IDENT .

    $default  reduce using rule 17 (identdec)


State 37

   10 fielddecl: basetype TOK_ARRAY TOK_IDENT .

    $default  reduce using rule 10 (fielddecl)


State 38

   11 globaldecl: identdec TOK_VARDECL constant ';' .

    $default  reduce using rule 11 (globaldecl)


State 39

   12 function: identdec TOK_PARAM identdeclist ')' . fnbody

    '}'  shift, and go to state 41
    ';'  shift, and go to state 42
    '{'  shift, and go to state 45

    fnbody  go to state 46


State 40

   15 identdeclist: identdeclist ',' . identdec

    TOK_VOID    shift, and go to state 4
    TOK_INT     shift, and go to state 5
    TOK_STRING  shift, and go to state 6
    TOK_IDENT   shift, and go to state 8

    identdec  go to state 47
    basetype  go to state 14


State 41

   20 fnbody: '}' .

    $default  reduce using rule 20 (fnbody)


State 42

   21 fnbody: ';' .

    $default  reduce using rule 21 (fnbody)


State 43

   14 function: identdec '(' ')' '{' . '}'
   19 fnbody: '{' . localdecl statement

    TOK_VOID    shift, and go to state 4
    TOK_INT     shift, and go to state 5
    TOK_STRING  shift, and go to state 6
    TOK_IDENT   shift, and go to state 8
    '}'         shift, and go to state 48

    identdec   go to state 49
    basetype   go to state 14
    localdecl  go to state 50


State 44

   13 function: identdec '(' ')' fnbody .

    $default  reduce using rule 13 (function)


State 45

   19 fnbody: '{' . localdecl statement

    TOK_VOID    shift, and go to state 4
    TOK_INT     shift, and go to state 5
    TOK_STRING  shift, and go to state 6
    TOK_IDENT   shift, and go to state 8

    identdec   go to state 49
    basetype   go to state 14
    localdecl  go to state 50


State 46

   12 function: identdec TOK_PARAM identdeclist ')' fnbody .

    $default  reduce using rule 12 (function)


State 47

   15 identdeclist: identdeclist ',' identdec .

    $default  reduce using rule 15 (identdeclist)


State 48

   14 function: identdec '(' ')' '{' '}' .

    $default  reduce using rule 14 (function)


State 49

   26 localdecl: identdec . TOK_VARDECL expr ';'

    TOK_VARDECL  shift, and go to state 51


State 50

   19 fnbody: '{' localdecl . statement

    TOK_IF      shift, and go to state 52
    TOK_WHILE   shift, and go to state 53
    TOK_RETURN  shift, and go to state 54
    TOK_NULL    shift, and go to state 55
    TOK_BLOCK   shift, and go to state 56
    ';'         shift, and go to state 57

    ifelse     go to state 58
    expr       go to state 59
    statement  go to state 60
    block      go to state 61
    while      go to state 62


State 51

   26 localdecl: identdec TOK_VARDECL . expr ';'

    TOK_NULL  shift, and go to state 55

    expr  go to state 63


State 52

   27 ifelse: TOK_IF .

    $default  reduce using rule 27 (ifelse)


State 53

   38 while: TOK_WHILE . '(' expr ')' statement

    '('  shift, and go to state 64


State 54

   32 statement: TOK_RETURN .

    $default  reduce using rule 32 (statement)


State 55

   28 expr: TOK_NULL .

    $default  reduce using rule 28 (expr)


State 56

   35 block: TOK_BLOCK . stateList '}'

    TOK_IF      shift, and go to state 52
    TOK_WHILE   shift, and go to state 53
    TOK_RETURN  shift, and go to state 54
    TOK_NULL    shift, and go to state 55
    TOK_BLOCK   shift, and go to state 56
    ';'         shift, and go to state 57

    ifelse     go to state 58
    expr       go to state 59
    statement  go to state 65
    block      go to state 61
    stateList  go to state 66
    while      go to state 62


State 57

   34 statement: ';' .

    $default  reduce using rule 34 (statement)


State 58

   31 statement: ifelse .

    $default  reduce using rule 31 (statement)


State 59

   33 statement: expr . ';'

    ';'  shift, and go to state 67


State 60

   19 fnbody: '{' localdecl statement .

    $default  reduce using rule 19 (fnbody)


State 61

   29 statement: block .

    $default  reduce using rule 29 (statement)


State 62

   30 statement: while .

    $default  reduce using rule 30 (statement)


State 63

   26 localdecl: identdec TOK_VARDECL expr . ';'

    ';'  shift, and go to state 68


State 64

   38 while: TOK_WHILE '(' . expr ')' statement

    TOK_NULL  shift, and go to state 55

    expr  go to state 69


State 65

   37 stateList: statement .

    $default  reduce using rule 37 (stateList)


State 66

   35 block: TOK_BLOCK stateList . '}'
   36 stateList: stateList . statement

    TOK_IF      shift, and go to state 52
    TOK_WHILE   shift, and go to state 53
    TOK_RETURN  shift, and go to state 54
    TOK_NULL    shift, and go to state 55
    TOK_BLOCK   shift, and go to state 56
    '}'         shift, and go to state 70
    ';'         shift, and go to state 57

    ifelse     go to state 58
    expr       go to state 59
    statement  go to state 71
    block      go to state 61
    while      go to state 62


State 67

   33 statement: expr ';' .

    $default  reduce using rule 33 (statement)


State 68

   26 localdecl: identdec TOK_VARDECL expr ';' .

    $default  reduce using rule 26 (localdecl)


State 69

   38 while: TOK_WHILE '(' expr . ')' statement

    ')'  shift, and go to state 72


State 70

   35 block: TOK_BLOCK stateList '}' .

    $default  reduce using rule 35 (block)


State 71

   36 stateList: stateList statement .

    $default  reduce using rule 36 (stateList)


State 72

   38 while: TOK_WHILE '(' expr ')' . statement

    TOK_IF      shift, and go to state 52
    TOK_WHILE   shift, and go to state 53
    TOK_RETURN  shift, and go to state 54
    TOK_NULL    shift, and go to state 55
    TOK_BLOCK   shift, and go to state 56
    ';'         shift, and go to state 57

    ifelse     go to state 58
    expr       go to state 59
    statement  go to state 73
    block      go to state 61
    while      go to state 62


State 73

   38 while: TOK_WHILE '(' expr ')' statement .

    $default  reduce using rule 38 (while)

Nonterminals useless in grammar

   hfunc
   identList


Terminals unused in grammar

   TOK_CHAR
   TOK_BR
   TOK_ROOT
   TOK_BLOCK
   TOK_CALL
   TOK_IFELSE
   TOK_INITDECL
   TOK_NEWARRAY
   TOK_TYPEID
   TOK_FIELD
   TOK_NEWSTR
   TOK_FUNCTION
   TOK_PROTOTYPE
   TOK_DECLID


Rules useless in grammar

   88 hfunc: hfunc ')'
   89      | hfunc param
   90      | identdec

   91 identList: identList ',' identdec
   92          | identdec


State 2 conflicts: 3 shift/reduce
State 11 conflicts: 3 shift/reduce
State 14 conflicts: 10 shift/reduce
State 15 conflicts: 10 shift/reduce
State 20 conflicts: 10 shift/reduce
State 21 conflicts: 10 shift/reduce
State 22 conflicts: 2 shift/reduce
State 23 conflicts: 3 shift/reduce
State 38 conflicts: 3 shift/reduce
State 42 conflicts: 12 shift/reduce
State 47 conflicts: 2 shift/reduce
State 49 conflicts: 2 shift/reduce
State 55 conflicts: 26 reduce/reduce
State 57 conflicts: 2 shift/reduce
State 59 conflicts: 2 shift/reduce
State 61 conflicts: 2 shift/reduce
State 62 conflicts: 2 shift/reduce
State 71 conflicts: 19 shift/reduce, 15 reduce/reduce
State 74 conflicts: 3 shift/reduce
State 79 conflicts: 10 shift/reduce
State 80 conflicts: 10 shift/reduce
State 81 conflicts: 10 shift/reduce
State 82 conflicts: 10 shift/reduce
State 83 conflicts: 10 shift/reduce
State 84 conflicts: 10 shift/reduce
State 85 conflicts: 10 shift/reduce
State 86 conflicts: 10 shift/reduce
State 87 conflicts: 10 shift/reduce
State 88 conflicts: 10 shift/reduce
State 89 conflicts: 10 shift/reduce
State 91 conflicts: 10 shift/reduce
State 92 conflicts: 2 shift/reduce
State 97 conflicts: 14 shift/reduce
State 99 conflicts: 2 shift/reduce
State 103 conflicts: 2 shift/reduce
State 104 conflicts: 2 shift/reduce
State 120 conflicts: 2 shift/reduce
State 121 conflicts: 2 shift/reduce
State 122 conflicts: 2 shift/reduce
State 123 conflicts: 2 shift/reduce
State 124 conflicts: 2 shift/reduce
State 125 conflicts: 2 shift/reduce
State 126 conflicts: 2 shift/reduce
State 127 conflicts: 2 shift/reduce
State 128 conflicts: 2 shift/reduce
State 129 conflicts: 2 shift/reduce
State 130 conflicts: 2 shift/reduce
State 131 conflicts: 14 shift/reduce
State 133 conflicts: 3 shift/reduce
State 135 conflicts: 3 shift/reduce
State 139 conflicts: 2 shift/reduce
State 144 conflicts: 3 shift/reduce
State 149 conflicts: 3 shift/reduce


Grammar

    0 $accept: start $end

    1 start: program

    2 program: program structdef
    3        | program globaldecl
    4        | program function
    5        | program statement
    6        | program error '{'
    7        | program error ';'
    8        | %empty

    9 structdef: struc '}'

   10 struc: struc fielddecl ';'
   11      | TOK_STRUCT TOK_IDENT '{'

   12 fielddecl: basetype TOK_IDENT
   13          | basetype TOK_ARRAY TOK_IDENT

   14 globaldecl: identdec TOK_VARDECL constant ';'

   15 function: func fnbody '}'
   16         | func ';'

   17 func: func ')'
   18     | func param
   19     | identdec

   20 param: param ',' identdec
   21      | TOK_PARAM identdec
   22      | TOK_PARAM

   23 identdec: basetype TOK_ARRAY TOK_IDENT
   24         | basetype TOK_IDENT

   25 fnbody: fnbody statement
   26       | fnbody localdecl
   27       | '{' statement
   28       | '{' localdecl
   29       | '{'

   30 basetype: TOK_VOID
   31         | TOK_INT
   32         | TOK_STRING
   33         | TOK_IDENT

   34 localdecl: identdec TOK_VARDECL expr ';'

   35 ifelse: TOK_IF TOK_PARAM expr ')' statement TOK_ELSE statement
   36       | TOK_IF TOK_PARAM expr ')' statement
   37       | TOK_ELSE TOK_IF TOK_PARAM expr ')' statement

   38 expr: TOK_NEW allocation
   39     | binop
   40     | unop
   41     | call
   42     | '(' expr ')'
   43     | variable
   44     | constant

   45 binop: %empty
   46      | expr '=' expr
   47      | expr '+' expr
   48      | expr '-' expr
   49      | expr '*' expr
   50      | expr '/' expr
   51      | expr '%' expr
   52      | expr TOK_EQ expr
   53      | expr TOK_NE expr
   54      | expr TOK_LT expr
   55      | expr TOK_LE expr
   56      | expr TOK_GT expr
   57      | expr TOK_GE expr

   58 unop: '+' expr
   59     | '-' expr
   60     | TOK_NEW expr
   61     | TOK_NOT expr

   62 statement: block
   63          | while
   64          | ifelse
   65          | return
   66          | expr ';'
   67          | ';'

   68 block: blockHelp '}'

   69 blockHelp: blockHelp statement
   70          | '{' statement

   71 while: TOK_WHILE TOK_PARAM expr ')' statement

   72 return: TOK_RETURN ';'
   73       | TOK_RETURN expr ';'

   74 allocation: TOK_IDENT
   75           | TOK_STRING TOK_PARAM expr ')'
   76           | basetype '[' expr ']'

   77 call: funCall ')'

   78 funCall: funCall ','
   79        | funCall expr
   80        | TOK_IDENT TOK_PARAM

   81 variable: TOK_IDENT
   82         | expr '[' expr ']'
   83         | expr TOK_ARROW TOK_IDENT

   84 constant: TOK_INTCON
   85         | TOK_STRINGCON
   86         | TOK_CHARCON
   87         | TOK_NULL


Terminals, with rules where they appear

$end (0) 0
'%' (37) 51
'(' (40) 42
')' (41) 17 35 36 37 42 71 75 77
'*' (42) 49
'+' (43) 47 58
',' (44) 20 78
'-' (45) 48 59
'/' (47) 50
';' (59) 7 10 14 16 34 66 67 72 73
'=' (61) 46
'[' (91) 76 82
']' (93) 76 82
'{' (123) 6 11 27 28 29 70
'}' (125) 9 15 68
error (256) 6 7
TOK_VOID (258) 30
TOK_CHAR (259)
TOK_INT (260) 31
TOK_STRING (261) 32 75
TOK_IF (262) 35 36 37
TOK_ELSE (263) 35 37
TOK_WHILE (264) 71
TOK_RETURN (265) 72 73
TOK_STRUCT (266) 11
TOK_NULL (267) 87
TOK_NEW (268) 38 60
TOK_VARDECL (269) 14 34
TOK_ARRAY (270) 13 23
TOK_ARROW (271) 83
TOK_BR (272)
TOK_EQ (273) 52
TOK_NE (274) 53
TOK_LT (275) 54
TOK_LE (276) 55
TOK_GT (277) 56
TOK_GE (278) 57
TOK_NOT (279) 61
TOK_IDENT (280) 11 12 13 23 24 33 74 80 81 83
TOK_INTCON (281) 84
TOK_CHARCON (282) 86
TOK_STRINGCON (283) 85
TOK_ROOT (284)
TOK_BLOCK (285)
TOK_CALL (286)
TOK_IFELSE (287)
TOK_INITDECL (288)
TOK_POS (289)
TOK_NEG (290)
TOK_NEWARRAY (291)
TOK_TYPEID (292)
TOK_FIELD (293)
TOK_NEWSTR (294)
TOK_PARAM (295) 21 22 35 36 37 71 75 80
TOK_FUNCTION (296)
TOK_PROTOTYPE (297)
TOK_DECLID (298)


Nonterminals, with rules where they appear

$accept (58)
    on left: 0
start (59)
    on left: 1, on right: 0
program (60)
    on left: 2 3 4 5 6 7 8, on right: 1 2 3 4 5 6 7
structdef (61)
    on left: 9, on right: 2
struc (62)
    on left: 10 11, on right: 9 10
fielddecl (63)
    on left: 12 13, on right: 10
globaldecl (64)
    on left: 14, on right: 3
function (65)
    on left: 15 16, on right: 4
func (66)
    on left: 17 18 19, on right: 15 16 17 18
param (67)
    on left: 20 21 22, on right: 18 20
identdec (68)
    on left: 23 24, on right: 14 19 20 21 34
fnbody (69)
    on left: 25 26 27 28 29, on right: 15 25 26
basetype (70)
    on left: 30 31 32 33, on right: 12 13 23 24 76
localdecl (71)
    on left: 34, on right: 26 28
ifelse (72)
    on left: 35 36 37, on right: 64
expr (73)
    on left: 38 39 40 41 42 43 44, on right: 34 35 36 37 42 46 47 48
    49 50 51 52 53 54 55 56 57 58 59 60 61 66 71 73 75 76 79 82 83
binop (74)
    on left: 45 46 47 48 49 50 51 52 53 54 55 56 57, on right: 39
unop (75)
    on left: 58 59 60 61, on right: 40
statement (76)
    on left: 62 63 64 65 66 67, on right: 5 25 27 35 36 37 69 70 71
block (77)
    on left: 68, on right: 62
blockHelp (78)
    on left: 69 70, on right: 68 69
while (79)
    on left: 71, on right: 63
return (80)
    on left: 72 73, on right: 65
allocation (81)
    on left: 74 75 76, on right: 38
call (82)
    on left: 77, on right: 41
funCall (83)
    on left: 78 79 80, on right: 77 78 79
variable (84)
    on left: 81 82 83, on right: 43
constant (85)
    on left: 84 85 86 87, on right: 14 44


State 0

    0 $accept: . start $end

    $default  reduce using rule 8 (program)

    start    go to state 1
    program  go to state 2


State 1

    0 $accept: start . $end

    $end  shift, and go to state 3


State 2

    1 start: program .
    2 program: program . structdef
    3        | program . globaldecl
    4        | program . function
    5        | program . statement
    6        | program . error '{'
    7        | program . error ';'

    error          shift, and go to state 4
    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_IF         shift, and go to state 8
    TOK_ELSE       shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_STRUCT     shift, and go to state 12
    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_NOT        shift, and go to state 15
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22
    '{'            shift, and go to state 23
    ';'            shift, and go to state 24

    $end       reduce using rule 1 (start)
    TOK_ARROW  reduce using rule 45 (binop)
    TOK_EQ     reduce using rule 45 (binop)
    TOK_NE     reduce using rule 45 (binop)
    TOK_LT     reduce using rule 45 (binop)
    TOK_LE     reduce using rule 45 (binop)
    TOK_GT     reduce using rule 45 (binop)
    TOK_GE     reduce using rule 45 (binop)
    '+'        [reduce using rule 45 (binop)]
    '-'        [reduce using rule 45 (binop)]
    '*'        reduce using rule 45 (binop)
    '/'        reduce using rule 45 (binop)
    '%'        reduce using rule 45 (binop)
    ';'        [reduce using rule 45 (binop)]
    '='        reduce using rule 45 (binop)
    '['        reduce using rule 45 (binop)

    structdef   go to state 25
    struc       go to state 26
    globaldecl  go to state 27
    function    go to state 28
    func        go to state 29
    identdec    go to state 30
    basetype    go to state 31
    ifelse      go to state 32
    expr        go to state 33
    binop       go to state 34
    unop        go to state 35
    statement   go to state 36
    block       go to state 37
    blockHelp   go to state 38
    while       go to state 39
    return      go to state 40
    call        go to state 41
    funCall     go to state 42
    variable    go to state 43
    constant    go to state 44


State 3

    0 $accept: start $end .

    $default  accept


State 4

    6 program: program error . '{'
    7        | program error . ';'

    '{'  shift, and go to state 45
    ';'  shift, and go to state 46


State 5

   30 basetype: TOK_VOID .

    $default  reduce using rule 30 (basetype)


State 6

   31 basetype: TOK_INT .

    $default  reduce using rule 31 (basetype)


State 7

   32 basetype: TOK_STRING .

    $default  reduce using rule 32 (basetype)


State 8

   35 ifelse: TOK_IF . TOK_PARAM expr ')' statement TOK_ELSE statement
   36       | TOK_IF . TOK_PARAM expr ')' statement

    TOK_PARAM  shift, and go to state 47


State 9

   37 ifelse: TOK_ELSE . TOK_IF TOK_PARAM expr ')' statement

    TOK_IF  shift, and go to state 48


State 10

   71 while: TOK_WHILE . TOK_PARAM expr ')' statement

    TOK_PARAM  shift, and go to state 49


State 11

   72 return: TOK_RETURN . ';'
   73       | TOK_RETURN . expr ';'

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_NOT        shift, and go to state 15
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22
    ';'            shift, and go to state 51

    '+'       [reduce using rule 45 (binop)]
    '-'       [reduce using rule 45 (binop)]
    ';'       [reduce using rule 45 (binop)]
    $default  reduce using rule 45 (binop)

    expr      go to state 52
    binop     go to state 34
    unop      go to state 35
    call      go to state 41
    funCall   go to state 42
    variable  go to state 43
    constant  go to state 44


State 12

   11 struc: TOK_STRUCT . TOK_IDENT '{'

    TOK_IDENT  shift, and go to state 53


State 13

   87 constant: TOK_NULL .

    $default  reduce using rule 87 (constant)


State 14

   38 expr: TOK_NEW . allocation
   60 unop: TOK_NEW . expr

    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 54
    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_NOT        shift, and go to state 15
    TOK_IDENT      shift, and go to state 55
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22

    TOK_NULL       [reduce using rule 45 (binop)]
    TOK_NEW        [reduce using rule 45 (binop)]
    TOK_NOT        [reduce using rule 45 (binop)]
    TOK_IDENT      [reduce using rule 45 (binop)]
    TOK_INTCON     [reduce using rule 45 (binop)]
    TOK_CHARCON    [reduce using rule 45 (binop)]
    TOK_STRINGCON  [reduce using rule 45 (binop)]
    '+'            [reduce using rule 45 (binop)]
    '-'            [reduce using rule 45 (binop)]
    '('            [reduce using rule 45 (binop)]
    $default       reduce using rule 45 (binop)

    basetype    go to state 56
    expr        go to state 57
    binop       go to state 34
    unop        go to state 35
    allocation  go to state 58
    call        go to state 41
    funCall     go to state 42
    variable    go to state 43
    constant    go to state 44


State 15

   61 unop: TOK_NOT . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_NOT        shift, and go to state 15
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22

    TOK_NULL       [reduce using rule 45 (binop)]
    TOK_NEW        [reduce using rule 45 (binop)]
    TOK_NOT        [reduce using rule 45 (binop)]
    TOK_IDENT      [reduce using rule 45 (binop)]
    TOK_INTCON     [reduce using rule 45 (binop)]
    TOK_CHARCON    [reduce using rule 45 (binop)]
    TOK_STRINGCON  [reduce using rule 45 (binop)]
    '+'            [reduce using rule 45 (binop)]
    '-'            [reduce using rule 45 (binop)]
    '('            [reduce using rule 45 (binop)]
    $default       reduce using rule 45 (binop)

    expr      go to state 59
    binop     go to state 34
    unop      go to state 35
    call      go to state 41
    funCall   go to state 42
    variable  go to state 43
    constant  go to state 44


State 16

   33 basetype: TOK_IDENT .
   80 funCall: TOK_IDENT . TOK_PARAM
   81 variable: TOK_IDENT .

    TOK_PARAM  shift, and go to state 60

    TOK_ARRAY  reduce using rule 33 (basetype)
    TOK_IDENT  reduce using rule 33 (basetype)
    $default   reduce using rule 81 (variable)


State 17

   84 constant: TOK_INTCON .

    $default  reduce using rule 84 (constant)


State 18

   86 constant: TOK_CHARCON .

    $default  reduce using rule 86 (constant)


State 19

   85 constant: TOK_STRINGCON .

    $default  reduce using rule 85 (constant)


State 20

   58 unop: '+' . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_NOT        shift, and go to state 15
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22

    TOK_NULL       [reduce using rule 45 (binop)]
    TOK_NEW        [reduce using rule 45 (binop)]
    TOK_NOT        [reduce using rule 45 (binop)]
    TOK_IDENT      [reduce using rule 45 (binop)]
    TOK_INTCON     [reduce using rule 45 (binop)]
    TOK_CHARCON    [reduce using rule 45 (binop)]
    TOK_STRINGCON  [reduce using rule 45 (binop)]
    '+'            [reduce using rule 45 (binop)]
    '-'            [reduce using rule 45 (binop)]
    '('            [reduce using rule 45 (binop)]
    $default       reduce using rule 45 (binop)

    expr      go to state 61
    binop     go to state 34
    unop      go to state 35
    call      go to state 41
    funCall   go to state 42
    variable  go to state 43
    constant  go to state 44


State 21

   59 unop: '-' . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_NOT        shift, and go to state 15
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22

    TOK_NULL       [reduce using rule 45 (binop)]
    TOK_NEW        [reduce using rule 45 (binop)]
    TOK_NOT        [reduce using rule 45 (binop)]
    TOK_IDENT      [reduce using rule 45 (binop)]
    TOK_INTCON     [reduce using rule 45 (binop)]
    TOK_CHARCON    [reduce using rule 45 (binop)]
    TOK_STRINGCON  [reduce using rule 45 (binop)]
    '+'            [reduce using rule 45 (binop)]
    '-'            [reduce using rule 45 (binop)]
    '('            [reduce using rule 45 (binop)]
    $default       reduce using rule 45 (binop)

    expr      go to state 62
    binop     go to state 34
    unop      go to state 35
    call      go to state 41
    funCall   go to state 42
    variable  go to state 43
    constant  go to state 44


State 22

   42 expr: '(' . expr ')'

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_NOT        shift, and go to state 15
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22

    '+'       [reduce using rule 45 (binop)]
    '-'       [reduce using rule 45 (binop)]
    $default  reduce using rule 45 (binop)

    expr      go to state 63
    binop     go to state 34
    unop      go to state 35
    call      go to state 41
    funCall   go to state 42
    variable  go to state 43
    constant  go to state 44


State 23

   70 blockHelp: '{' . statement

    TOK_IF         shift, and go to state 8
    TOK_ELSE       shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_NOT        shift, and go to state 15
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22
    '{'            shift, and go to state 23
    ';'            shift, and go to state 24

    '+'       [reduce using rule 45 (binop)]
    '-'       [reduce using rule 45 (binop)]
    ';'       [reduce using rule 45 (binop)]
    $default  reduce using rule 45 (binop)

    ifelse     go to state 32
    expr       go to state 33
    binop      go to state 34
    unop       go to state 35
    statement  go to state 64
    block      go to state 37
    blockHelp  go to state 38
    while      go to state 39
    return     go to state 40
    call       go to state 41
    funCall    go to state 42
    variable   go to state 43
    constant   go to state 44


State 24

   67 statement: ';' .

    $default  reduce using rule 67 (statement)


State 25

    2 program: program structdef .

    $default  reduce using rule 2 (program)


State 26

    9 structdef: struc . '}'
   10 struc: struc . fielddecl ';'

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_IDENT   shift, and go to state 65
    '}'         shift, and go to state 66

    fielddecl  go to state 67
    basetype   go to state 68


State 27

    3 program: program globaldecl .

    $default  reduce using rule 3 (program)


State 28

    4 program: program function .

    $default  reduce using rule 4 (program)


State 29

   15 function: func . fnbody '}'
   16         | func . ';'
   17 func: func . ')'
   18     | func . param

    TOK_PARAM  shift, and go to state 69
    ')'        shift, and go to state 70
    '{'        shift, and go to state 71
    ';'        shift, and go to state 72

    param   go to state 73
    fnbody  go to state 74


State 30

   14 globaldecl: identdec . TOK_VARDECL constant ';'
   19 func: identdec .

    TOK_VARDECL  shift, and go to state 75

    $default  reduce using rule 19 (func)


State 31

   23 identdec: basetype . TOK_ARRAY TOK_IDENT
   24         | basetype . TOK_IDENT

    TOK_ARRAY  shift, and go to state 76
    TOK_IDENT  shift, and go to state 77


State 32

   64 statement: ifelse .

    $default  reduce using rule 64 (statement)


State 33

   46 binop: expr . '=' expr
   47      | expr . '+' expr
   48      | expr . '-' expr
   49      | expr . '*' expr
   50      | expr . '/' expr
   51      | expr . '%' expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   66 statement: expr . ';'
   82 variable: expr . '[' expr ']'
   83         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 78
    TOK_EQ     shift, and go to state 79
    TOK_NE     shift, and go to state 80
    TOK_LT     shift, and go to state 81
    TOK_LE     shift, and go to state 82
    TOK_GT     shift, and go to state 83
    TOK_GE     shift, and go to state 84
    '+'        shift, and go to state 85
    '-'        shift, and go to state 86
    '*'        shift, and go to state 87
    '/'        shift, and go to state 88
    '%'        shift, and go to state 89
    ';'        shift, and go to state 90
    '='        shift, and go to state 91
    '['        shift, and go to state 92


State 34

   39 expr: binop .

    $default  reduce using rule 39 (expr)


State 35

   40 expr: unop .

    $default  reduce using rule 40 (expr)


State 36

    5 program: program statement .

    $default  reduce using rule 5 (program)


State 37

   62 statement: block .

    $default  reduce using rule 62 (statement)


State 38

   68 block: blockHelp . '}'
   69 blockHelp: blockHelp . statement

    TOK_IF         shift, and go to state 8
    TOK_ELSE       shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_NOT        shift, and go to state 15
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22
    '{'            shift, and go to state 23
    ';'            shift, and go to state 24
    '}'            shift, and go to state 93

    '+'       [reduce using rule 45 (binop)]
    '-'       [reduce using rule 45 (binop)]
    ';'       [reduce using rule 45 (binop)]
    $default  reduce using rule 45 (binop)

    ifelse     go to state 32
    expr       go to state 33
    binop      go to state 34
    unop       go to state 35
    statement  go to state 94
    block      go to state 37
    blockHelp  go to state 38
    while      go to state 39
    return     go to state 40
    call       go to state 41
    funCall    go to state 42
    variable   go to state 43
    constant   go to state 44


State 39

   63 statement: while .

    $default  reduce using rule 63 (statement)


State 40

   65 statement: return .

    $default  reduce using rule 65 (statement)


State 41

   41 expr: call .

    $default  reduce using rule 41 (expr)


State 42

   77 call: funCall . ')'
   78 funCall: funCall . ','
   79        | funCall . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_NOT        shift, and go to state 15
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22
    ')'            shift, and go to state 95
    ','            shift, and go to state 96

    TOK_NULL       [reduce using rule 45 (binop)]
    TOK_NEW        [reduce using rule 45 (binop)]
    TOK_NOT        [reduce using rule 45 (binop)]
    TOK_IDENT      [reduce using rule 45 (binop)]
    TOK_INTCON     [reduce using rule 45 (binop)]
    TOK_CHARCON    [reduce using rule 45 (binop)]
    TOK_STRINGCON  [reduce using rule 45 (binop)]
    '+'            [reduce using rule 45 (binop)]
    '-'            [reduce using rule 45 (binop)]
    '('            [reduce using rule 45 (binop)]
    ')'            [reduce using rule 45 (binop)]
    ','            [reduce using rule 45 (binop)]
    $default       reduce using rule 45 (binop)

    expr      go to state 97
    binop     go to state 34
    unop      go to state 35
    call      go to state 41
    funCall   go to state 42
    variable  go to state 43
    constant  go to state 44


State 43

   43 expr: variable .

    $default  reduce using rule 43 (expr)


State 44

   44 expr: constant .

    $default  reduce using rule 44 (expr)


State 45

    6 program: program error '{' .

    $default  reduce using rule 6 (program)


State 46

    7 program: program error ';' .

    $default  reduce using rule 7 (program)


State 47

   35 ifelse: TOK_IF TOK_PARAM . expr ')' statement TOK_ELSE statement
   36       | TOK_IF TOK_PARAM . expr ')' statement

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_NOT        shift, and go to state 15
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22

    '+'       [reduce using rule 45 (binop)]
    '-'       [reduce using rule 45 (binop)]
    $default  reduce using rule 45 (binop)

    expr      go to state 98
    binop     go to state 34
    unop      go to state 35
    call      go to state 41
    funCall   go to state 42
    variable  go to state 43
    constant  go to state 44


State 48

   37 ifelse: TOK_ELSE TOK_IF . TOK_PARAM expr ')' statement

    TOK_PARAM  shift, and go to state 99


State 49

   71 while: TOK_WHILE TOK_PARAM . expr ')' statement

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_NOT        shift, and go to state 15
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22

    '+'       [reduce using rule 45 (binop)]
    '-'       [reduce using rule 45 (binop)]
    $default  reduce using rule 45 (binop)

    expr      go to state 100
    binop     go to state 34
    unop      go to state 35
    call      go to state 41
    funCall   go to state 42
    variable  go to state 43
    constant  go to state 44


State 50

   80 funCall: TOK_IDENT . TOK_PARAM
   81 variable: TOK_IDENT .

    TOK_PARAM  shift, and go to state 60

    $default  reduce using rule 81 (variable)


State 51

   72 return: TOK_RETURN ';' .

    $default  reduce using rule 72 (return)


State 52

   46 binop: expr . '=' expr
   47      | expr . '+' expr
   48      | expr . '-' expr
   49      | expr . '*' expr
   50      | expr . '/' expr
   51      | expr . '%' expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   73 return: TOK_RETURN expr . ';'
   82 variable: expr . '[' expr ']'
   83         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 78
    TOK_EQ     shift, and go to state 79
    TOK_NE     shift, and go to state 80
    TOK_LT     shift, and go to state 81
    TOK_LE     shift, and go to state 82
    TOK_GT     shift, and go to state 83
    TOK_GE     shift, and go to state 84
    '+'        shift, and go to state 85
    '-'        shift, and go to state 86
    '*'        shift, and go to state 87
    '/'        shift, and go to state 88
    '%'        shift, and go to state 89
    ';'        shift, and go to state 101
    '='        shift, and go to state 91
    '['        shift, and go to state 92


State 53

   11 struc: TOK_STRUCT TOK_IDENT . '{'

    '{'  shift, and go to state 102


State 54

   32 basetype: TOK_STRING .
   75 allocation: TOK_STRING . TOK_PARAM expr ')'

    TOK_PARAM  shift, and go to state 103

    $default  reduce using rule 32 (basetype)


State 55

   33 basetype: TOK_IDENT .
   74 allocation: TOK_IDENT .
   80 funCall: TOK_IDENT . TOK_PARAM
   81 variable: TOK_IDENT .

    TOK_PARAM  shift, and go to state 60

    TOK_NULL       reduce using rule 74 (allocation)
    TOK_NULL       [reduce using rule 81 (variable)]
    TOK_NEW        reduce using rule 74 (allocation)
    TOK_NEW        [reduce using rule 81 (variable)]
    TOK_ARROW      reduce using rule 74 (allocation)
    TOK_ARROW      [reduce using rule 81 (variable)]
    TOK_EQ         reduce using rule 74 (allocation)
    TOK_EQ         [reduce using rule 81 (variable)]
    TOK_NE         reduce using rule 74 (allocation)
    TOK_NE         [reduce using rule 81 (variable)]
    TOK_LT         reduce using rule 74 (allocation)
    TOK_LT         [reduce using rule 81 (variable)]
    TOK_LE         reduce using rule 74 (allocation)
    TOK_LE         [reduce using rule 81 (variable)]
    TOK_GT         reduce using rule 74 (allocation)
    TOK_GT         [reduce using rule 81 (variable)]
    TOK_GE         reduce using rule 74 (allocation)
    TOK_GE         [reduce using rule 81 (variable)]
    TOK_NOT        reduce using rule 74 (allocation)
    TOK_NOT        [reduce using rule 81 (variable)]
    TOK_IDENT      reduce using rule 74 (allocation)
    TOK_IDENT      [reduce using rule 81 (variable)]
    TOK_INTCON     reduce using rule 74 (allocation)
    TOK_INTCON     [reduce using rule 81 (variable)]
    TOK_CHARCON    reduce using rule 74 (allocation)
    TOK_CHARCON    [reduce using rule 81 (variable)]
    TOK_STRINGCON  reduce using rule 74 (allocation)
    TOK_STRINGCON  [reduce using rule 81 (variable)]
    '+'            reduce using rule 74 (allocation)
    '+'            [reduce using rule 81 (variable)]
    '-'            reduce using rule 74 (allocation)
    '-'            [reduce using rule 81 (variable)]
    '*'            reduce using rule 74 (allocation)
    '*'            [reduce using rule 81 (variable)]
    '/'            reduce using rule 74 (allocation)
    '/'            [reduce using rule 81 (variable)]
    '%'            reduce using rule 74 (allocation)
    '%'            [reduce using rule 81 (variable)]
    '('            reduce using rule 74 (allocation)
    '('            [reduce using rule 81 (variable)]
    ')'            reduce using rule 74 (allocation)
    ')'            [reduce using rule 81 (variable)]
    ';'            reduce using rule 74 (allocation)
    ';'            [reduce using rule 81 (variable)]
    ','            reduce using rule 74 (allocation)
    ','            [reduce using rule 81 (variable)]
    '='            reduce using rule 74 (allocation)
    '='            [reduce using rule 81 (variable)]
    '['            reduce using rule 33 (basetype)
    '['            [reduce using rule 74 (allocation)]
    '['            [reduce using rule 81 (variable)]
    ']'            reduce using rule 74 (allocation)
    ']'            [reduce using rule 81 (variable)]
    $default       reduce using rule 74 (allocation)


State 56

   76 allocation: basetype . '[' expr ']'

    '['  shift, and go to state 104


State 57

   46 binop: expr . '=' expr
   47      | expr . '+' expr
   48      | expr . '-' expr
   49      | expr . '*' expr
   50      | expr . '/' expr
   51      | expr . '%' expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   60 unop: TOK_NEW expr .
   82 variable: expr . '[' expr ']'
   83         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 78
    '='        shift, and go to state 91
    '['        shift, and go to state 92

    '='       [reduce using rule 60 (unop)]
    '['       [reduce using rule 60 (unop)]
    $default  reduce using rule 60 (unop)


State 58

   38 expr: TOK_NEW allocation .

    $default  reduce using rule 38 (expr)


State 59

   46 binop: expr . '=' expr
   47      | expr . '+' expr
   48      | expr . '-' expr
   49      | expr . '*' expr
   50      | expr . '/' expr
   51      | expr . '%' expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   61 unop: TOK_NOT expr .
   82 variable: expr . '[' expr ']'
   83         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 78
    '='        shift, and go to state 91
    '['        shift, and go to state 92

    '='       [reduce using rule 61 (unop)]
    '['       [reduce using rule 61 (unop)]
    $default  reduce using rule 61 (unop)


State 60

   80 funCall: TOK_IDENT TOK_PARAM .

    $default  reduce using rule 80 (funCall)


State 61

   46 binop: expr . '=' expr
   47      | expr . '+' expr
   48      | expr . '-' expr
   49      | expr . '*' expr
   50      | expr . '/' expr
   51      | expr . '%' expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58 unop: '+' expr .
   82 variable: expr . '[' expr ']'
   83         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 78
    '='        shift, and go to state 91
    '['        shift, and go to state 92

    '='       [reduce using rule 58 (unop)]
    '['       [reduce using rule 58 (unop)]
    $default  reduce using rule 58 (unop)


State 62

   46 binop: expr . '=' expr
   47      | expr . '+' expr
   48      | expr . '-' expr
   49      | expr . '*' expr
   50      | expr . '/' expr
   51      | expr . '%' expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   59 unop: '-' expr .
   82 variable: expr . '[' expr ']'
   83         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 78
    '='        shift, and go to state 91
    '['        shift, and go to state 92

    '='       [reduce using rule 59 (unop)]
    '['       [reduce using rule 59 (unop)]
    $default  reduce using rule 59 (unop)


State 63

   42 expr: '(' expr . ')'
   46 binop: expr . '=' expr
   47      | expr . '+' expr
   48      | expr . '-' expr
   49      | expr . '*' expr
   50      | expr . '/' expr
   51      | expr . '%' expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   82 variable: expr . '[' expr ']'
   83         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 78
    TOK_EQ     shift, and go to state 79
    TOK_NE     shift, and go to state 80
    TOK_LT     shift, and go to state 81
    TOK_LE     shift, and go to state 82
    TOK_GT     shift, and go to state 83
    TOK_GE     shift, and go to state 84
    '+'        shift, and go to state 85
    '-'        shift, and go to state 86
    '*'        shift, and go to state 87
    '/'        shift, and go to state 88
    '%'        shift, and go to state 89
    ')'        shift, and go to state 105
    '='        shift, and go to state 91
    '['        shift, and go to state 92


State 64

   70 blockHelp: '{' statement .

    $default  reduce using rule 70 (blockHelp)


State 65

   33 basetype: TOK_IDENT .

    $default  reduce using rule 33 (basetype)


State 66

    9 structdef: struc '}' .

    $default  reduce using rule 9 (structdef)


State 67

   10 struc: struc fielddecl . ';'

    ';'  shift, and go to state 106


State 68

   12 fielddecl: basetype . TOK_IDENT
   13          | basetype . TOK_ARRAY TOK_IDENT

    TOK_ARRAY  shift, and go to state 107
    TOK_IDENT  shift, and go to state 108


State 69

   21 param: TOK_PARAM . identdec
   22      | TOK_PARAM .

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_IDENT   shift, and go to state 65

    $default  reduce using rule 22 (param)

    identdec  go to state 109
    basetype  go to state 31


State 70

   17 func: func ')' .

    $default  reduce using rule 17 (func)


State 71

   27 fnbody: '{' . statement
   28       | '{' . localdecl
   29       | '{' .

    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_IF         shift, and go to state 8
    TOK_ELSE       shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_NOT        shift, and go to state 15
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22
    '{'            shift, and go to state 23
    ';'            shift, and go to state 24

    TOK_VOID       [reduce using rule 29 (fnbody)]
    TOK_INT        [reduce using rule 29 (fnbody)]
    TOK_STRING     [reduce using rule 29 (fnbody)]
    TOK_IF         [reduce using rule 29 (fnbody)]
    TOK_ELSE       [reduce using rule 29 (fnbody)]
    TOK_WHILE      [reduce using rule 29 (fnbody)]
    TOK_RETURN     [reduce using rule 29 (fnbody)]
    TOK_NULL       [reduce using rule 29 (fnbody)]
    TOK_NEW        [reduce using rule 29 (fnbody)]
    TOK_ARROW      reduce using rule 29 (fnbody)
    TOK_ARROW      [reduce using rule 45 (binop)]
    TOK_EQ         reduce using rule 29 (fnbody)
    TOK_EQ         [reduce using rule 45 (binop)]
    TOK_NE         reduce using rule 29 (fnbody)
    TOK_NE         [reduce using rule 45 (binop)]
    TOK_LT         reduce using rule 29 (fnbody)
    TOK_LT         [reduce using rule 45 (binop)]
    TOK_LE         reduce using rule 29 (fnbody)
    TOK_LE         [reduce using rule 45 (binop)]
    TOK_GT         reduce using rule 29 (fnbody)
    TOK_GT         [reduce using rule 45 (binop)]
    TOK_GE         reduce using rule 29 (fnbody)
    TOK_GE         [reduce using rule 45 (binop)]
    TOK_NOT        [reduce using rule 29 (fnbody)]
    TOK_IDENT      [reduce using rule 29 (fnbody)]
    TOK_INTCON     [reduce using rule 29 (fnbody)]
    TOK_CHARCON    [reduce using rule 29 (fnbody)]
    TOK_STRINGCON  [reduce using rule 29 (fnbody)]
    '+'            [reduce using rule 29 (fnbody)]
    '+'            [reduce using rule 45 (binop)]
    '-'            [reduce using rule 29 (fnbody)]
    '-'            [reduce using rule 45 (binop)]
    '*'            reduce using rule 29 (fnbody)
    '*'            [reduce using rule 45 (binop)]
    '/'            reduce using rule 29 (fnbody)
    '/'            [reduce using rule 45 (binop)]
    '%'            reduce using rule 29 (fnbody)
    '%'            [reduce using rule 45 (binop)]
    '('            [reduce using rule 29 (fnbody)]
    '{'            [reduce using rule 29 (fnbody)]
    ';'            [reduce using rule 29 (fnbody)]
    ';'            [reduce using rule 45 (binop)]
    '='            reduce using rule 29 (fnbody)
    '='            [reduce using rule 45 (binop)]
    '['            reduce using rule 29 (fnbody)
    '['            [reduce using rule 45 (binop)]
    $default       reduce using rule 29 (fnbody)

    identdec   go to state 110
    basetype   go to state 31
    localdecl  go to state 111
    ifelse     go to state 32
    expr       go to state 33
    binop      go to state 34
    unop       go to state 35
    statement  go to state 112
    block      go to state 37
    blockHelp  go to state 38
    while      go to state 39
    return     go to state 40
    call       go to state 41
    funCall    go to state 42
    variable   go to state 43
    constant   go to state 44


State 72

   16 function: func ';' .

    $default  reduce using rule 16 (function)


State 73

   18 func: func param .
   20 param: param . ',' identdec

    ','  shift, and go to state 113

    $default  reduce using rule 18 (func)


State 74

   15 function: func fnbody . '}'
   25 fnbody: fnbody . statement
   26       | fnbody . localdecl

    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_IF         shift, and go to state 8
    TOK_ELSE       shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_NOT        shift, and go to state 15
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22
    '{'            shift, and go to state 23
    ';'            shift, and go to state 24
    '}'            shift, and go to state 114

    '+'       [reduce using rule 45 (binop)]
    '-'       [reduce using rule 45 (binop)]
    ';'       [reduce using rule 45 (binop)]
    $default  reduce using rule 45 (binop)

    identdec   go to state 110
    basetype   go to state 31
    localdecl  go to state 115
    ifelse     go to state 32
    expr       go to state 33
    binop      go to state 34
    unop       go to state 35
    statement  go to state 116
    block      go to state 37
    blockHelp  go to state 38
    while      go to state 39
    return     go to state 40
    call       go to state 41
    funCall    go to state 42
    variable   go to state 43
    constant   go to state 44


State 75

   14 globaldecl: identdec TOK_VARDECL . constant ';'

    TOK_NULL       shift, and go to state 13
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19

    constant  go to state 117


State 76

   23 identdec: basetype TOK_ARRAY . TOK_IDENT

    TOK_IDENT  shift, and go to state 118


State 77

   24 identdec: basetype TOK_IDENT .

    $default  reduce using rule 24 (identdec)


State 78

   83 variable: expr TOK_ARROW . TOK_IDENT

    TOK_IDENT  shift, and go to state 119


State 79

   52 binop: expr TOK_EQ . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_NOT        shift, and go to state 15
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22

    TOK_NULL       [reduce using rule 45 (binop)]
    TOK_NEW        [reduce using rule 45 (binop)]
    TOK_NOT        [reduce using rule 45 (binop)]
    TOK_IDENT      [reduce using rule 45 (binop)]
    TOK_INTCON     [reduce using rule 45 (binop)]
    TOK_CHARCON    [reduce using rule 45 (binop)]
    TOK_STRINGCON  [reduce using rule 45 (binop)]
    '+'            [reduce using rule 45 (binop)]
    '-'            [reduce using rule 45 (binop)]
    '('            [reduce using rule 45 (binop)]
    $default       reduce using rule 45 (binop)

    expr      go to state 120
    binop     go to state 34
    unop      go to state 35
    call      go to state 41
    funCall   go to state 42
    variable  go to state 43
    constant  go to state 44


State 80

   53 binop: expr TOK_NE . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_NOT        shift, and go to state 15
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22

    TOK_NULL       [reduce using rule 45 (binop)]
    TOK_NEW        [reduce using rule 45 (binop)]
    TOK_NOT        [reduce using rule 45 (binop)]
    TOK_IDENT      [reduce using rule 45 (binop)]
    TOK_INTCON     [reduce using rule 45 (binop)]
    TOK_CHARCON    [reduce using rule 45 (binop)]
    TOK_STRINGCON  [reduce using rule 45 (binop)]
    '+'            [reduce using rule 45 (binop)]
    '-'            [reduce using rule 45 (binop)]
    '('            [reduce using rule 45 (binop)]
    $default       reduce using rule 45 (binop)

    expr      go to state 121
    binop     go to state 34
    unop      go to state 35
    call      go to state 41
    funCall   go to state 42
    variable  go to state 43
    constant  go to state 44


State 81

   54 binop: expr TOK_LT . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_NOT        shift, and go to state 15
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22

    TOK_NULL       [reduce using rule 45 (binop)]
    TOK_NEW        [reduce using rule 45 (binop)]
    TOK_NOT        [reduce using rule 45 (binop)]
    TOK_IDENT      [reduce using rule 45 (binop)]
    TOK_INTCON     [reduce using rule 45 (binop)]
    TOK_CHARCON    [reduce using rule 45 (binop)]
    TOK_STRINGCON  [reduce using rule 45 (binop)]
    '+'            [reduce using rule 45 (binop)]
    '-'            [reduce using rule 45 (binop)]
    '('            [reduce using rule 45 (binop)]
    $default       reduce using rule 45 (binop)

    expr      go to state 122
    binop     go to state 34
    unop      go to state 35
    call      go to state 41
    funCall   go to state 42
    variable  go to state 43
    constant  go to state 44


State 82

   55 binop: expr TOK_LE . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_NOT        shift, and go to state 15
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22

    TOK_NULL       [reduce using rule 45 (binop)]
    TOK_NEW        [reduce using rule 45 (binop)]
    TOK_NOT        [reduce using rule 45 (binop)]
    TOK_IDENT      [reduce using rule 45 (binop)]
    TOK_INTCON     [reduce using rule 45 (binop)]
    TOK_CHARCON    [reduce using rule 45 (binop)]
    TOK_STRINGCON  [reduce using rule 45 (binop)]
    '+'            [reduce using rule 45 (binop)]
    '-'            [reduce using rule 45 (binop)]
    '('            [reduce using rule 45 (binop)]
    $default       reduce using rule 45 (binop)

    expr      go to state 123
    binop     go to state 34
    unop      go to state 35
    call      go to state 41
    funCall   go to state 42
    variable  go to state 43
    constant  go to state 44


State 83

   56 binop: expr TOK_GT . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_NOT        shift, and go to state 15
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22

    TOK_NULL       [reduce using rule 45 (binop)]
    TOK_NEW        [reduce using rule 45 (binop)]
    TOK_NOT        [reduce using rule 45 (binop)]
    TOK_IDENT      [reduce using rule 45 (binop)]
    TOK_INTCON     [reduce using rule 45 (binop)]
    TOK_CHARCON    [reduce using rule 45 (binop)]
    TOK_STRINGCON  [reduce using rule 45 (binop)]
    '+'            [reduce using rule 45 (binop)]
    '-'            [reduce using rule 45 (binop)]
    '('            [reduce using rule 45 (binop)]
    $default       reduce using rule 45 (binop)

    expr      go to state 124
    binop     go to state 34
    unop      go to state 35
    call      go to state 41
    funCall   go to state 42
    variable  go to state 43
    constant  go to state 44


State 84

   57 binop: expr TOK_GE . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_NOT        shift, and go to state 15
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22

    TOK_NULL       [reduce using rule 45 (binop)]
    TOK_NEW        [reduce using rule 45 (binop)]
    TOK_NOT        [reduce using rule 45 (binop)]
    TOK_IDENT      [reduce using rule 45 (binop)]
    TOK_INTCON     [reduce using rule 45 (binop)]
    TOK_CHARCON    [reduce using rule 45 (binop)]
    TOK_STRINGCON  [reduce using rule 45 (binop)]
    '+'            [reduce using rule 45 (binop)]
    '-'            [reduce using rule 45 (binop)]
    '('            [reduce using rule 45 (binop)]
    $default       reduce using rule 45 (binop)

    expr      go to state 125
    binop     go to state 34
    unop      go to state 35
    call      go to state 41
    funCall   go to state 42
    variable  go to state 43
    constant  go to state 44


State 85

   47 binop: expr '+' . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_NOT        shift, and go to state 15
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22

    TOK_NULL       [reduce using rule 45 (binop)]
    TOK_NEW        [reduce using rule 45 (binop)]
    TOK_NOT        [reduce using rule 45 (binop)]
    TOK_IDENT      [reduce using rule 45 (binop)]
    TOK_INTCON     [reduce using rule 45 (binop)]
    TOK_CHARCON    [reduce using rule 45 (binop)]
    TOK_STRINGCON  [reduce using rule 45 (binop)]
    '+'            [reduce using rule 45 (binop)]
    '-'            [reduce using rule 45 (binop)]
    '('            [reduce using rule 45 (binop)]
    $default       reduce using rule 45 (binop)

    expr      go to state 126
    binop     go to state 34
    unop      go to state 35
    call      go to state 41
    funCall   go to state 42
    variable  go to state 43
    constant  go to state 44


State 86

   48 binop: expr '-' . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_NOT        shift, and go to state 15
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22

    TOK_NULL       [reduce using rule 45 (binop)]
    TOK_NEW        [reduce using rule 45 (binop)]
    TOK_NOT        [reduce using rule 45 (binop)]
    TOK_IDENT      [reduce using rule 45 (binop)]
    TOK_INTCON     [reduce using rule 45 (binop)]
    TOK_CHARCON    [reduce using rule 45 (binop)]
    TOK_STRINGCON  [reduce using rule 45 (binop)]
    '+'            [reduce using rule 45 (binop)]
    '-'            [reduce using rule 45 (binop)]
    '('            [reduce using rule 45 (binop)]
    $default       reduce using rule 45 (binop)

    expr      go to state 127
    binop     go to state 34
    unop      go to state 35
    call      go to state 41
    funCall   go to state 42
    variable  go to state 43
    constant  go to state 44


State 87

   49 binop: expr '*' . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_NOT        shift, and go to state 15
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22

    TOK_NULL       [reduce using rule 45 (binop)]
    TOK_NEW        [reduce using rule 45 (binop)]
    TOK_NOT        [reduce using rule 45 (binop)]
    TOK_IDENT      [reduce using rule 45 (binop)]
    TOK_INTCON     [reduce using rule 45 (binop)]
    TOK_CHARCON    [reduce using rule 45 (binop)]
    TOK_STRINGCON  [reduce using rule 45 (binop)]
    '+'            [reduce using rule 45 (binop)]
    '-'            [reduce using rule 45 (binop)]
    '('            [reduce using rule 45 (binop)]
    $default       reduce using rule 45 (binop)

    expr      go to state 128
    binop     go to state 34
    unop      go to state 35
    call      go to state 41
    funCall   go to state 42
    variable  go to state 43
    constant  go to state 44


State 88

   50 binop: expr '/' . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_NOT        shift, and go to state 15
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22

    TOK_NULL       [reduce using rule 45 (binop)]
    TOK_NEW        [reduce using rule 45 (binop)]
    TOK_NOT        [reduce using rule 45 (binop)]
    TOK_IDENT      [reduce using rule 45 (binop)]
    TOK_INTCON     [reduce using rule 45 (binop)]
    TOK_CHARCON    [reduce using rule 45 (binop)]
    TOK_STRINGCON  [reduce using rule 45 (binop)]
    '+'            [reduce using rule 45 (binop)]
    '-'            [reduce using rule 45 (binop)]
    '('            [reduce using rule 45 (binop)]
    $default       reduce using rule 45 (binop)

    expr      go to state 129
    binop     go to state 34
    unop      go to state 35
    call      go to state 41
    funCall   go to state 42
    variable  go to state 43
    constant  go to state 44


State 89

   51 binop: expr '%' . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_NOT        shift, and go to state 15
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22

    TOK_NULL       [reduce using rule 45 (binop)]
    TOK_NEW        [reduce using rule 45 (binop)]
    TOK_NOT        [reduce using rule 45 (binop)]
    TOK_IDENT      [reduce using rule 45 (binop)]
    TOK_INTCON     [reduce using rule 45 (binop)]
    TOK_CHARCON    [reduce using rule 45 (binop)]
    TOK_STRINGCON  [reduce using rule 45 (binop)]
    '+'            [reduce using rule 45 (binop)]
    '-'            [reduce using rule 45 (binop)]
    '('            [reduce using rule 45 (binop)]
    $default       reduce using rule 45 (binop)

    expr      go to state 130
    binop     go to state 34
    unop      go to state 35
    call      go to state 41
    funCall   go to state 42
    variable  go to state 43
    constant  go to state 44


State 90

   66 statement: expr ';' .

    $default  reduce using rule 66 (statement)


State 91

   46 binop: expr '=' . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_NOT        shift, and go to state 15
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22

    TOK_NULL       [reduce using rule 45 (binop)]
    TOK_NEW        [reduce using rule 45 (binop)]
    TOK_NOT        [reduce using rule 45 (binop)]
    TOK_IDENT      [reduce using rule 45 (binop)]
    TOK_INTCON     [reduce using rule 45 (binop)]
    TOK_CHARCON    [reduce using rule 45 (binop)]
    TOK_STRINGCON  [reduce using rule 45 (binop)]
    '+'            [reduce using rule 45 (binop)]
    '-'            [reduce using rule 45 (binop)]
    '('            [reduce using rule 45 (binop)]
    $default       reduce using rule 45 (binop)

    expr      go to state 131
    binop     go to state 34
    unop      go to state 35
    call      go to state 41
    funCall   go to state 42
    variable  go to state 43
    constant  go to state 44


State 92

   82 variable: expr '[' . expr ']'

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_NOT        shift, and go to state 15
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22

    '+'       [reduce using rule 45 (binop)]
    '-'       [reduce using rule 45 (binop)]
    $default  reduce using rule 45 (binop)

    expr      go to state 132
    binop     go to state 34
    unop      go to state 35
    call      go to state 41
    funCall   go to state 42
    variable  go to state 43
    constant  go to state 44


State 93

   68 block: blockHelp '}' .

    $default  reduce using rule 68 (block)


State 94

   69 blockHelp: blockHelp statement .

    $default  reduce using rule 69 (blockHelp)


State 95

   77 call: funCall ')' .

    $default  reduce using rule 77 (call)


State 96

   78 funCall: funCall ',' .

    $default  reduce using rule 78 (funCall)


State 97

   46 binop: expr . '=' expr
   47      | expr . '+' expr
   48      | expr . '-' expr
   49      | expr . '*' expr
   50      | expr . '/' expr
   51      | expr . '%' expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   79 funCall: funCall expr .
   82 variable: expr . '[' expr ']'
   83         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 78
    TOK_EQ     shift, and go to state 79
    TOK_NE     shift, and go to state 80
    TOK_LT     shift, and go to state 81
    TOK_LE     shift, and go to state 82
    TOK_GT     shift, and go to state 83
    TOK_GE     shift, and go to state 84
    '+'        shift, and go to state 85
    '-'        shift, and go to state 86
    '*'        shift, and go to state 87
    '/'        shift, and go to state 88
    '%'        shift, and go to state 89
    '='        shift, and go to state 91
    '['        shift, and go to state 92

    TOK_ARROW  [reduce using rule 79 (funCall)]
    TOK_EQ     [reduce using rule 79 (funCall)]
    TOK_NE     [reduce using rule 79 (funCall)]
    TOK_LT     [reduce using rule 79 (funCall)]
    TOK_LE     [reduce using rule 79 (funCall)]
    TOK_GT     [reduce using rule 79 (funCall)]
    TOK_GE     [reduce using rule 79 (funCall)]
    '+'        [reduce using rule 79 (funCall)]
    '-'        [reduce using rule 79 (funCall)]
    '*'        [reduce using rule 79 (funCall)]
    '/'        [reduce using rule 79 (funCall)]
    '%'        [reduce using rule 79 (funCall)]
    '='        [reduce using rule 79 (funCall)]
    '['        [reduce using rule 79 (funCall)]
    $default   reduce using rule 79 (funCall)


State 98

   35 ifelse: TOK_IF TOK_PARAM expr . ')' statement TOK_ELSE statement
   36       | TOK_IF TOK_PARAM expr . ')' statement
   46 binop: expr . '=' expr
   47      | expr . '+' expr
   48      | expr . '-' expr
   49      | expr . '*' expr
   50      | expr . '/' expr
   51      | expr . '%' expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   82 variable: expr . '[' expr ']'
   83         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 78
    TOK_EQ     shift, and go to state 79
    TOK_NE     shift, and go to state 80
    TOK_LT     shift, and go to state 81
    TOK_LE     shift, and go to state 82
    TOK_GT     shift, and go to state 83
    TOK_GE     shift, and go to state 84
    '+'        shift, and go to state 85
    '-'        shift, and go to state 86
    '*'        shift, and go to state 87
    '/'        shift, and go to state 88
    '%'        shift, and go to state 89
    ')'        shift, and go to state 133
    '='        shift, and go to state 91
    '['        shift, and go to state 92


State 99

   37 ifelse: TOK_ELSE TOK_IF TOK_PARAM . expr ')' statement

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_NOT        shift, and go to state 15
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22

    '+'       [reduce using rule 45 (binop)]
    '-'       [reduce using rule 45 (binop)]
    $default  reduce using rule 45 (binop)

    expr      go to state 134
    binop     go to state 34
    unop      go to state 35
    call      go to state 41
    funCall   go to state 42
    variable  go to state 43
    constant  go to state 44


State 100

   46 binop: expr . '=' expr
   47      | expr . '+' expr
   48      | expr . '-' expr
   49      | expr . '*' expr
   50      | expr . '/' expr
   51      | expr . '%' expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   71 while: TOK_WHILE TOK_PARAM expr . ')' statement
   82 variable: expr . '[' expr ']'
   83         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 78
    TOK_EQ     shift, and go to state 79
    TOK_NE     shift, and go to state 80
    TOK_LT     shift, and go to state 81
    TOK_LE     shift, and go to state 82
    TOK_GT     shift, and go to state 83
    TOK_GE     shift, and go to state 84
    '+'        shift, and go to state 85
    '-'        shift, and go to state 86
    '*'        shift, and go to state 87
    '/'        shift, and go to state 88
    '%'        shift, and go to state 89
    ')'        shift, and go to state 135
    '='        shift, and go to state 91
    '['        shift, and go to state 92


State 101

   73 return: TOK_RETURN expr ';' .

    $default  reduce using rule 73 (return)


State 102

   11 struc: TOK_STRUCT TOK_IDENT '{' .

    $default  reduce using rule 11 (struc)


State 103

   75 allocation: TOK_STRING TOK_PARAM . expr ')'

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_NOT        shift, and go to state 15
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22

    '+'       [reduce using rule 45 (binop)]
    '-'       [reduce using rule 45 (binop)]
    $default  reduce using rule 45 (binop)

    expr      go to state 136
    binop     go to state 34
    unop      go to state 35
    call      go to state 41
    funCall   go to state 42
    variable  go to state 43
    constant  go to state 44


State 104

   76 allocation: basetype '[' . expr ']'

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_NOT        shift, and go to state 15
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22

    '+'       [reduce using rule 45 (binop)]
    '-'       [reduce using rule 45 (binop)]
    $default  reduce using rule 45 (binop)

    expr      go to state 137
    binop     go to state 34
    unop      go to state 35
    call      go to state 41
    funCall   go to state 42
    variable  go to state 43
    constant  go to state 44


State 105

   42 expr: '(' expr ')' .

    $default  reduce using rule 42 (expr)


State 106

   10 struc: struc fielddecl ';' .

    $default  reduce using rule 10 (struc)


State 107

   13 fielddecl: basetype TOK_ARRAY . TOK_IDENT

    TOK_IDENT  shift, and go to state 138


State 108

   12 fielddecl: basetype TOK_IDENT .

    $default  reduce using rule 12 (fielddecl)


State 109

   21 param: TOK_PARAM identdec .

    $default  reduce using rule 21 (param)


State 110

   34 localdecl: identdec . TOK_VARDECL expr ';'

    TOK_VARDECL  shift, and go to state 139


State 111

   28 fnbody: '{' localdecl .

    $default  reduce using rule 28 (fnbody)


State 112

   27 fnbody: '{' statement .

    $default  reduce using rule 27 (fnbody)


State 113

   20 param: param ',' . identdec

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_IDENT   shift, and go to state 65

    identdec  go to state 140
    basetype  go to state 31


State 114

   15 function: func fnbody '}' .

    $default  reduce using rule 15 (function)


State 115

   26 fnbody: fnbody localdecl .

    $default  reduce using rule 26 (fnbody)


State 116

   25 fnbody: fnbody statement .

    $default  reduce using rule 25 (fnbody)


State 117

   14 globaldecl: identdec TOK_VARDECL constant . ';'

    ';'  shift, and go to state 141


State 118

   23 identdec: basetype TOK_ARRAY TOK_IDENT .

    $default  reduce using rule 23 (identdec)


State 119

   83 variable: expr TOK_ARROW TOK_IDENT .

    $default  reduce using rule 83 (variable)


State 120

   46 binop: expr . '=' expr
   47      | expr . '+' expr
   48      | expr . '-' expr
   49      | expr . '*' expr
   50      | expr . '/' expr
   51      | expr . '%' expr
   52      | expr . TOK_EQ expr
   52      | expr TOK_EQ expr .
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   82 variable: expr . '[' expr ']'
   83         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 78
    '+'        shift, and go to state 85
    '-'        shift, and go to state 86
    '*'        shift, and go to state 87
    '/'        shift, and go to state 88
    '%'        shift, and go to state 89
    '='        shift, and go to state 91
    '['        shift, and go to state 92

    '='       [reduce using rule 52 (binop)]
    '['       [reduce using rule 52 (binop)]
    $default  reduce using rule 52 (binop)


State 121

   46 binop: expr . '=' expr
   47      | expr . '+' expr
   48      | expr . '-' expr
   49      | expr . '*' expr
   50      | expr . '/' expr
   51      | expr . '%' expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   53      | expr TOK_NE expr .
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   82 variable: expr . '[' expr ']'
   83         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 78
    '+'        shift, and go to state 85
    '-'        shift, and go to state 86
    '*'        shift, and go to state 87
    '/'        shift, and go to state 88
    '%'        shift, and go to state 89
    '='        shift, and go to state 91
    '['        shift, and go to state 92

    '='       [reduce using rule 53 (binop)]
    '['       [reduce using rule 53 (binop)]
    $default  reduce using rule 53 (binop)


State 122

   46 binop: expr . '=' expr
   47      | expr . '+' expr
   48      | expr . '-' expr
   49      | expr . '*' expr
   50      | expr . '/' expr
   51      | expr . '%' expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   54      | expr TOK_LT expr .
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   82 variable: expr . '[' expr ']'
   83         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 78
    '+'        shift, and go to state 85
    '-'        shift, and go to state 86
    '*'        shift, and go to state 87
    '/'        shift, and go to state 88
    '%'        shift, and go to state 89
    '='        shift, and go to state 91
    '['        shift, and go to state 92

    '='       [reduce using rule 54 (binop)]
    '['       [reduce using rule 54 (binop)]
    $default  reduce using rule 54 (binop)


State 123

   46 binop: expr . '=' expr
   47      | expr . '+' expr
   48      | expr . '-' expr
   49      | expr . '*' expr
   50      | expr . '/' expr
   51      | expr . '%' expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   55      | expr TOK_LE expr .
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   82 variable: expr . '[' expr ']'
   83         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 78
    '+'        shift, and go to state 85
    '-'        shift, and go to state 86
    '*'        shift, and go to state 87
    '/'        shift, and go to state 88
    '%'        shift, and go to state 89
    '='        shift, and go to state 91
    '['        shift, and go to state 92

    '='       [reduce using rule 55 (binop)]
    '['       [reduce using rule 55 (binop)]
    $default  reduce using rule 55 (binop)


State 124

   46 binop: expr . '=' expr
   47      | expr . '+' expr
   48      | expr . '-' expr
   49      | expr . '*' expr
   50      | expr . '/' expr
   51      | expr . '%' expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   56      | expr TOK_GT expr .
   57      | expr . TOK_GE expr
   82 variable: expr . '[' expr ']'
   83         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 78
    '+'        shift, and go to state 85
    '-'        shift, and go to state 86
    '*'        shift, and go to state 87
    '/'        shift, and go to state 88
    '%'        shift, and go to state 89
    '='        shift, and go to state 91
    '['        shift, and go to state 92

    '='       [reduce using rule 56 (binop)]
    '['       [reduce using rule 56 (binop)]
    $default  reduce using rule 56 (binop)


State 125

   46 binop: expr . '=' expr
   47      | expr . '+' expr
   48      | expr . '-' expr
   49      | expr . '*' expr
   50      | expr . '/' expr
   51      | expr . '%' expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   57      | expr TOK_GE expr .
   82 variable: expr . '[' expr ']'
   83         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 78
    '+'        shift, and go to state 85
    '-'        shift, and go to state 86
    '*'        shift, and go to state 87
    '/'        shift, and go to state 88
    '%'        shift, and go to state 89
    '='        shift, and go to state 91
    '['        shift, and go to state 92

    '='       [reduce using rule 57 (binop)]
    '['       [reduce using rule 57 (binop)]
    $default  reduce using rule 57 (binop)


State 126

   46 binop: expr . '=' expr
   47      | expr . '+' expr
   47      | expr '+' expr .
   48      | expr . '-' expr
   49      | expr . '*' expr
   50      | expr . '/' expr
   51      | expr . '%' expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   82 variable: expr . '[' expr ']'
   83         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 78
    '*'        shift, and go to state 87
    '/'        shift, and go to state 88
    '%'        shift, and go to state 89
    '='        shift, and go to state 91
    '['        shift, and go to state 92

    '='       [reduce using rule 47 (binop)]
    '['       [reduce using rule 47 (binop)]
    $default  reduce using rule 47 (binop)


State 127

   46 binop: expr . '=' expr
   47      | expr . '+' expr
   48      | expr . '-' expr
   48      | expr '-' expr .
   49      | expr . '*' expr
   50      | expr . '/' expr
   51      | expr . '%' expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   82 variable: expr . '[' expr ']'
   83         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 78
    '*'        shift, and go to state 87
    '/'        shift, and go to state 88
    '%'        shift, and go to state 89
    '='        shift, and go to state 91
    '['        shift, and go to state 92

    '='       [reduce using rule 48 (binop)]
    '['       [reduce using rule 48 (binop)]
    $default  reduce using rule 48 (binop)


State 128

   46 binop: expr . '=' expr
   47      | expr . '+' expr
   48      | expr . '-' expr
   49      | expr . '*' expr
   49      | expr '*' expr .
   50      | expr . '/' expr
   51      | expr . '%' expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   82 variable: expr . '[' expr ']'
   83         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 78
    '='        shift, and go to state 91
    '['        shift, and go to state 92

    '='       [reduce using rule 49 (binop)]
    '['       [reduce using rule 49 (binop)]
    $default  reduce using rule 49 (binop)


State 129

   46 binop: expr . '=' expr
   47      | expr . '+' expr
   48      | expr . '-' expr
   49      | expr . '*' expr
   50      | expr . '/' expr
   50      | expr '/' expr .
   51      | expr . '%' expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   82 variable: expr . '[' expr ']'
   83         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 78
    '='        shift, and go to state 91
    '['        shift, and go to state 92

    '='       [reduce using rule 50 (binop)]
    '['       [reduce using rule 50 (binop)]
    $default  reduce using rule 50 (binop)


State 130

   46 binop: expr . '=' expr
   47      | expr . '+' expr
   48      | expr . '-' expr
   49      | expr . '*' expr
   50      | expr . '/' expr
   51      | expr . '%' expr
   51      | expr '%' expr .
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   82 variable: expr . '[' expr ']'
   83         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 78
    '='        shift, and go to state 91
    '['        shift, and go to state 92

    '='       [reduce using rule 51 (binop)]
    '['       [reduce using rule 51 (binop)]
    $default  reduce using rule 51 (binop)


State 131

   46 binop: expr . '=' expr
   46      | expr '=' expr .
   47      | expr . '+' expr
   48      | expr . '-' expr
   49      | expr . '*' expr
   50      | expr . '/' expr
   51      | expr . '%' expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   82 variable: expr . '[' expr ']'
   83         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 78
    TOK_EQ     shift, and go to state 79
    TOK_NE     shift, and go to state 80
    TOK_LT     shift, and go to state 81
    TOK_LE     shift, and go to state 82
    TOK_GT     shift, and go to state 83
    TOK_GE     shift, and go to state 84
    '+'        shift, and go to state 85
    '-'        shift, and go to state 86
    '*'        shift, and go to state 87
    '/'        shift, and go to state 88
    '%'        shift, and go to state 89
    '='        shift, and go to state 91
    '['        shift, and go to state 92

    TOK_ARROW  [reduce using rule 46 (binop)]
    TOK_EQ     [reduce using rule 46 (binop)]
    TOK_NE     [reduce using rule 46 (binop)]
    TOK_LT     [reduce using rule 46 (binop)]
    TOK_LE     [reduce using rule 46 (binop)]
    TOK_GT     [reduce using rule 46 (binop)]
    TOK_GE     [reduce using rule 46 (binop)]
    '+'        [reduce using rule 46 (binop)]
    '-'        [reduce using rule 46 (binop)]
    '*'        [reduce using rule 46 (binop)]
    '/'        [reduce using rule 46 (binop)]
    '%'        [reduce using rule 46 (binop)]
    '='        [reduce using rule 46 (binop)]
    '['        [reduce using rule 46 (binop)]
    $default   reduce using rule 46 (binop)


State 132

   46 binop: expr . '=' expr
   47      | expr . '+' expr
   48      | expr . '-' expr
   49      | expr . '*' expr
   50      | expr . '/' expr
   51      | expr . '%' expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   82 variable: expr . '[' expr ']'
   82         | expr '[' expr . ']'
   83         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 78
    TOK_EQ     shift, and go to state 79
    TOK_NE     shift, and go to state 80
    TOK_LT     shift, and go to state 81
    TOK_LE     shift, and go to state 82
    TOK_GT     shift, and go to state 83
    TOK_GE     shift, and go to state 84
    '+'        shift, and go to state 85
    '-'        shift, and go to state 86
    '*'        shift, and go to state 87
    '/'        shift, and go to state 88
    '%'        shift, and go to state 89
    '='        shift, and go to state 91
    '['        shift, and go to state 92
    ']'        shift, and go to state 142


State 133

   35 ifelse: TOK_IF TOK_PARAM expr ')' . statement TOK_ELSE statement
   36       | TOK_IF TOK_PARAM expr ')' . statement

    TOK_IF         shift, and go to state 8
    TOK_ELSE       shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_NOT        shift, and go to state 15
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22
    '{'            shift, and go to state 23
    ';'            shift, and go to state 24

    '+'       [reduce using rule 45 (binop)]
    '-'       [reduce using rule 45 (binop)]
    ';'       [reduce using rule 45 (binop)]
    $default  reduce using rule 45 (binop)

    ifelse     go to state 32
    expr       go to state 33
    binop      go to state 34
    unop       go to state 35
    statement  go to state 143
    block      go to state 37
    blockHelp  go to state 38
    while      go to state 39
    return     go to state 40
    call       go to state 41
    funCall    go to state 42
    variable   go to state 43
    constant   go to state 44


State 134

   37 ifelse: TOK_ELSE TOK_IF TOK_PARAM expr . ')' statement
   46 binop: expr . '=' expr
   47      | expr . '+' expr
   48      | expr . '-' expr
   49      | expr . '*' expr
   50      | expr . '/' expr
   51      | expr . '%' expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   82 variable: expr . '[' expr ']'
   83         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 78
    TOK_EQ     shift, and go to state 79
    TOK_NE     shift, and go to state 80
    TOK_LT     shift, and go to state 81
    TOK_LE     shift, and go to state 82
    TOK_GT     shift, and go to state 83
    TOK_GE     shift, and go to state 84
    '+'        shift, and go to state 85
    '-'        shift, and go to state 86
    '*'        shift, and go to state 87
    '/'        shift, and go to state 88
    '%'        shift, and go to state 89
    ')'        shift, and go to state 144
    '='        shift, and go to state 91
    '['        shift, and go to state 92


State 135

   71 while: TOK_WHILE TOK_PARAM expr ')' . statement

    TOK_IF         shift, and go to state 8
    TOK_ELSE       shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_NOT        shift, and go to state 15
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22
    '{'            shift, and go to state 23
    ';'            shift, and go to state 24

    '+'       [reduce using rule 45 (binop)]
    '-'       [reduce using rule 45 (binop)]
    ';'       [reduce using rule 45 (binop)]
    $default  reduce using rule 45 (binop)

    ifelse     go to state 32
    expr       go to state 33
    binop      go to state 34
    unop       go to state 35
    statement  go to state 145
    block      go to state 37
    blockHelp  go to state 38
    while      go to state 39
    return     go to state 40
    call       go to state 41
    funCall    go to state 42
    variable   go to state 43
    constant   go to state 44


State 136

   46 binop: expr . '=' expr
   47      | expr . '+' expr
   48      | expr . '-' expr
   49      | expr . '*' expr
   50      | expr . '/' expr
   51      | expr . '%' expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   75 allocation: TOK_STRING TOK_PARAM expr . ')'
   82 variable: expr . '[' expr ']'
   83         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 78
    TOK_EQ     shift, and go to state 79
    TOK_NE     shift, and go to state 80
    TOK_LT     shift, and go to state 81
    TOK_LE     shift, and go to state 82
    TOK_GT     shift, and go to state 83
    TOK_GE     shift, and go to state 84
    '+'        shift, and go to state 85
    '-'        shift, and go to state 86
    '*'        shift, and go to state 87
    '/'        shift, and go to state 88
    '%'        shift, and go to state 89
    ')'        shift, and go to state 146
    '='        shift, and go to state 91
    '['        shift, and go to state 92


State 137

   46 binop: expr . '=' expr
   47      | expr . '+' expr
   48      | expr . '-' expr
   49      | expr . '*' expr
   50      | expr . '/' expr
   51      | expr . '%' expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   76 allocation: basetype '[' expr . ']'
   82 variable: expr . '[' expr ']'
   83         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 78
    TOK_EQ     shift, and go to state 79
    TOK_NE     shift, and go to state 80
    TOK_LT     shift, and go to state 81
    TOK_LE     shift, and go to state 82
    TOK_GT     shift, and go to state 83
    TOK_GE     shift, and go to state 84
    '+'        shift, and go to state 85
    '-'        shift, and go to state 86
    '*'        shift, and go to state 87
    '/'        shift, and go to state 88
    '%'        shift, and go to state 89
    '='        shift, and go to state 91
    '['        shift, and go to state 92
    ']'        shift, and go to state 147


State 138

   13 fielddecl: basetype TOK_ARRAY TOK_IDENT .

    $default  reduce using rule 13 (fielddecl)


State 139

   34 localdecl: identdec TOK_VARDECL . expr ';'

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_NOT        shift, and go to state 15
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22

    '+'       [reduce using rule 45 (binop)]
    '-'       [reduce using rule 45 (binop)]
    $default  reduce using rule 45 (binop)

    expr      go to state 148
    binop     go to state 34
    unop      go to state 35
    call      go to state 41
    funCall   go to state 42
    variable  go to state 43
    constant  go to state 44


State 140

   20 param: param ',' identdec .

    $default  reduce using rule 20 (param)


State 141

   14 globaldecl: identdec TOK_VARDECL constant ';' .

    $default  reduce using rule 14 (globaldecl)


State 142

   82 variable: expr '[' expr ']' .

    $default  reduce using rule 82 (variable)


State 143

   35 ifelse: TOK_IF TOK_PARAM expr ')' statement . TOK_ELSE statement
   36       | TOK_IF TOK_PARAM expr ')' statement .

    TOK_ELSE  shift, and go to state 149

    $default  reduce using rule 36 (ifelse)


State 144

   37 ifelse: TOK_ELSE TOK_IF TOK_PARAM expr ')' . statement

    TOK_IF         shift, and go to state 8
    TOK_ELSE       shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_NOT        shift, and go to state 15
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22
    '{'            shift, and go to state 23
    ';'            shift, and go to state 24

    '+'       [reduce using rule 45 (binop)]
    '-'       [reduce using rule 45 (binop)]
    ';'       [reduce using rule 45 (binop)]
    $default  reduce using rule 45 (binop)

    ifelse     go to state 32
    expr       go to state 33
    binop      go to state 34
    unop       go to state 35
    statement  go to state 150
    block      go to state 37
    blockHelp  go to state 38
    while      go to state 39
    return     go to state 40
    call       go to state 41
    funCall    go to state 42
    variable   go to state 43
    constant   go to state 44


State 145

   71 while: TOK_WHILE TOK_PARAM expr ')' statement .

    $default  reduce using rule 71 (while)


State 146

   75 allocation: TOK_STRING TOK_PARAM expr ')' .

    $default  reduce using rule 75 (allocation)


State 147

   76 allocation: basetype '[' expr ']' .

    $default  reduce using rule 76 (allocation)


State 148

   34 localdecl: identdec TOK_VARDECL expr . ';'
   46 binop: expr . '=' expr
   47      | expr . '+' expr
   48      | expr . '-' expr
   49      | expr . '*' expr
   50      | expr . '/' expr
   51      | expr . '%' expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   82 variable: expr . '[' expr ']'
   83         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 78
    TOK_EQ     shift, and go to state 79
    TOK_NE     shift, and go to state 80
    TOK_LT     shift, and go to state 81
    TOK_LE     shift, and go to state 82
    TOK_GT     shift, and go to state 83
    TOK_GE     shift, and go to state 84
    '+'        shift, and go to state 85
    '-'        shift, and go to state 86
    '*'        shift, and go to state 87
    '/'        shift, and go to state 88
    '%'        shift, and go to state 89
    ';'        shift, and go to state 151
    '='        shift, and go to state 91
    '['        shift, and go to state 92


State 149

   35 ifelse: TOK_IF TOK_PARAM expr ')' statement TOK_ELSE . statement

    TOK_IF         shift, and go to state 8
    TOK_ELSE       shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_NOT        shift, and go to state 15
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 22
    '{'            shift, and go to state 23
    ';'            shift, and go to state 24

    '+'       [reduce using rule 45 (binop)]
    '-'       [reduce using rule 45 (binop)]
    ';'       [reduce using rule 45 (binop)]
    $default  reduce using rule 45 (binop)

    ifelse     go to state 32
    expr       go to state 33
    binop      go to state 34
    unop       go to state 35
    statement  go to state 152
    block      go to state 37
    blockHelp  go to state 38
    while      go to state 39
    return     go to state 40
    call       go to state 41
    funCall    go to state 42
    variable   go to state 43
    constant   go to state 44


State 150

   37 ifelse: TOK_ELSE TOK_IF TOK_PARAM expr ')' statement .

    $default  reduce using rule 37 (ifelse)


State 151

   34 localdecl: identdec TOK_VARDECL expr ';' .

    $default  reduce using rule 34 (localdecl)


State 152

   35 ifelse: TOK_IF TOK_PARAM expr ')' statement TOK_ELSE statement .

    $default  reduce using rule 35 (ifelse)
